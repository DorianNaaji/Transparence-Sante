// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package transparence_sante_bi.qualite_beneficiaire_dim_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: qualite_beneficiaire_dim Purpose: Remplir la dimension de qualite des
 * beneficiaires<br>
 * Description: Les bénéficiaires sont liés à une qualité. fait par Dorian <br>
 * 
 * @author haytham.elghazel@univ-lyon1.fr
 * @version 7.3.1.20200219_1130
 * @status DEV
 */
public class qualite_beneficiaire_dim implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "qualite_beneficiaire_dim";
	private final String projectName = "TRANSPARENCE_SANTE_BI";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					qualite_beneficiaire_dim.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(qualite_beneficiaire_dim.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];

		public String qualite_beneficiaire_id;

		public String getQualite_beneficiaire_id() {
			return this.qualite_beneficiaire_id;
		}

		public String nom_qualite_beneficiaire;

		public String getNom_qualite_beneficiaire() {
			return this.nom_qualite_beneficiaire;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim) {

				try {

					int length = 0;

					this.qualite_beneficiaire_id = readString(dis);

					this.nom_qualite_beneficiaire = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.qualite_beneficiaire_id, dos);

				// String

				writeString(this.nom_qualite_beneficiaire, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("qualite_beneficiaire_id=" + qualite_beneficiaire_id);
			sb.append(",nom_qualite_beneficiaire=" + nom_qualite_beneficiaire);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class qualitesStruct implements routines.system.IPersistableRow<qualitesStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];

		public String qualite_beneficiaire_id;

		public String getQualite_beneficiaire_id() {
			return this.qualite_beneficiaire_id;
		}

		public String nom_qualite_beneficiaire;

		public String getNom_qualite_beneficiaire() {
			return this.nom_qualite_beneficiaire;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim) {

				try {

					int length = 0;

					this.qualite_beneficiaire_id = readString(dis);

					this.nom_qualite_beneficiaire = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.qualite_beneficiaire_id, dos);

				// String

				writeString(this.nom_qualite_beneficiaire, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("qualite_beneficiaire_id=" + qualite_beneficiaire_id);
			sb.append(",nom_qualite_beneficiaire=" + nom_qualite_beneficiaire);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(qualitesStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class filteredStruct implements routines.system.IPersistableRow<filteredStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];

		public String qualite_beneficiaire_id;

		public String getQualite_beneficiaire_id() {
			return this.qualite_beneficiaire_id;
		}

		public String nom_qualite_beneficiaire;

		public String getNom_qualite_beneficiaire() {
			return this.nom_qualite_beneficiaire;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim) {

				try {

					int length = 0;

					this.qualite_beneficiaire_id = readString(dis);

					this.nom_qualite_beneficiaire = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.qualite_beneficiaire_id, dos);

				// String

				writeString(this.nom_qualite_beneficiaire, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("qualite_beneficiaire_id=" + qualite_beneficiaire_id);
			sb.append(",nom_qualite_beneficiaire=" + nom_qualite_beneficiaire);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(filteredStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class mergedStruct implements routines.system.IPersistableRow<mergedStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];

		public String qualite_beneficiaire_id;

		public String getQualite_beneficiaire_id() {
			return this.qualite_beneficiaire_id;
		}

		public String nom_qualite_beneficiaire;

		public String getNom_qualite_beneficiaire() {
			return this.nom_qualite_beneficiaire;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim) {

				try {

					int length = 0;

					this.qualite_beneficiaire_id = readString(dis);

					this.nom_qualite_beneficiaire = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.qualite_beneficiaire_id, dos);

				// String

				writeString(this.nom_qualite_beneficiaire, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("qualite_beneficiaire_id=" + qualite_beneficiaire_id);
			sb.append(",nom_qualite_beneficiaire=" + nom_qualite_beneficiaire);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mergedStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class qualites_remunerationsStruct
			implements routines.system.IPersistableRow<qualites_remunerationsStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];

		public String qualite_beneficiaire_id;

		public String getQualite_beneficiaire_id() {
			return this.qualite_beneficiaire_id;
		}

		public String nom_qualite_beneficiaire;

		public String getNom_qualite_beneficiaire() {
			return this.nom_qualite_beneficiaire;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim) {

				try {

					int length = 0;

					this.qualite_beneficiaire_id = readString(dis);

					this.nom_qualite_beneficiaire = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.qualite_beneficiaire_id, dos);

				// String

				writeString(this.nom_qualite_beneficiaire, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("qualite_beneficiaire_id=" + qualite_beneficiaire_id);
			sb.append(",nom_qualite_beneficiaire=" + nom_qualite_beneficiaire);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(qualites_remunerationsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class remunerationsStruct implements routines.system.IPersistableRow<remunerationsStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String denomination_sociale;

		public String getDenomination_sociale() {
			return this.denomination_sociale;
		}

		public String ligne_identifiant;

		public String getLigne_identifiant() {
			return this.ligne_identifiant;
		}

		public Character ligne_rectification;

		public Character getLigne_rectification() {
			return this.ligne_rectification;
		}

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String categorie;

		public String getCategorie() {
			return this.categorie;
		}

		public String benef_nom;

		public String getBenef_nom() {
			return this.benef_nom;
		}

		public String benef_prenom;

		public String getBenef_prenom() {
			return this.benef_prenom;
		}

		public String benef_qualite_code;

		public String getBenef_qualite_code() {
			return this.benef_qualite_code;
		}

		public String qualite;

		public String getQualite() {
			return this.qualite;
		}

		public String benef_adresse1;

		public String getBenef_adresse1() {
			return this.benef_adresse1;
		}

		public String benef_adresse2;

		public String getBenef_adresse2() {
			return this.benef_adresse2;
		}

		public String benef_adresse3;

		public String getBenef_adresse3() {
			return this.benef_adresse3;
		}

		public String benef_adresse4;

		public String getBenef_adresse4() {
			return this.benef_adresse4;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_ville;

		public String getBenef_ville() {
			return this.benef_ville;
		}

		public String benef_pays_code;

		public String getBenef_pays_code() {
			return this.benef_pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String benef_titre_code;

		public String getBenef_titre_code() {
			return this.benef_titre_code;
		}

		public String benef_titre_libelle;

		public String getBenef_titre_libelle() {
			return this.benef_titre_libelle;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_speicalite_libelle;

		public String getBenef_speicalite_libelle() {
			return this.benef_speicalite_libelle;
		}

		public String benef_identifiant_type_code;

		public String getBenef_identifiant_type_code() {
			return this.benef_identifiant_type_code;
		}

		public String identifiant_type;

		public String getIdentifiant_type() {
			return this.identifiant_type;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String benef_etablissement;

		public String getBenef_etablissement() {
			return this.benef_etablissement;
		}

		public String benef_etablissement_codepostal;

		public String getBenef_etablissement_codepostal() {
			return this.benef_etablissement_codepostal;
		}

		public String benef_etablissement_ville;

		public String getBenef_etablissement_ville() {
			return this.benef_etablissement_ville;
		}

		public String benef_denomination_sociale;

		public String getBenef_denomination_sociale() {
			return this.benef_denomination_sociale;
		}

		public String benef_objet_social;

		public String getBenef_objet_social() {
			return this.benef_objet_social;
		}

		public String ligne_type;

		public String getLigne_type() {
			return this.ligne_type;
		}

		public String remu_date;

		public String getRemu_date() {
			return this.remu_date;
		}

		public String remu_montant_ttc;

		public String getRemu_montant_ttc() {
			return this.remu_montant_ttc;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim) {

				try {

					int length = 0;

					this.entreprise_identifiant = readString(dis);

					this.denomination_sociale = readString(dis);

					this.ligne_identifiant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ligne_rectification = null;
					} else {
						this.ligne_rectification = dis.readChar();
					}

					this.benef_categorie_code = readString(dis);

					this.categorie = readString(dis);

					this.benef_nom = readString(dis);

					this.benef_prenom = readString(dis);

					this.benef_qualite_code = readString(dis);

					this.qualite = readString(dis);

					this.benef_adresse1 = readString(dis);

					this.benef_adresse2 = readString(dis);

					this.benef_adresse3 = readString(dis);

					this.benef_adresse4 = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_ville = readString(dis);

					this.benef_pays_code = readString(dis);

					this.pays = readString(dis);

					this.benef_titre_code = readString(dis);

					this.benef_titre_libelle = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_speicalite_libelle = readString(dis);

					this.benef_identifiant_type_code = readString(dis);

					this.identifiant_type = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.benef_etablissement = readString(dis);

					this.benef_etablissement_codepostal = readString(dis);

					this.benef_etablissement_ville = readString(dis);

					this.benef_denomination_sociale = readString(dis);

					this.benef_objet_social = readString(dis);

					this.ligne_type = readString(dis);

					this.remu_date = readString(dis);

					this.remu_montant_ttc = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entreprise_identifiant, dos);

				// String

				writeString(this.denomination_sociale, dos);

				// String

				writeString(this.ligne_identifiant, dos);

				// Character

				if (this.ligne_rectification == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.ligne_rectification);
				}

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.categorie, dos);

				// String

				writeString(this.benef_nom, dos);

				// String

				writeString(this.benef_prenom, dos);

				// String

				writeString(this.benef_qualite_code, dos);

				// String

				writeString(this.qualite, dos);

				// String

				writeString(this.benef_adresse1, dos);

				// String

				writeString(this.benef_adresse2, dos);

				// String

				writeString(this.benef_adresse3, dos);

				// String

				writeString(this.benef_adresse4, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_ville, dos);

				// String

				writeString(this.benef_pays_code, dos);

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.benef_titre_code, dos);

				// String

				writeString(this.benef_titre_libelle, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_speicalite_libelle, dos);

				// String

				writeString(this.benef_identifiant_type_code, dos);

				// String

				writeString(this.identifiant_type, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.benef_etablissement, dos);

				// String

				writeString(this.benef_etablissement_codepostal, dos);

				// String

				writeString(this.benef_etablissement_ville, dos);

				// String

				writeString(this.benef_denomination_sociale, dos);

				// String

				writeString(this.benef_objet_social, dos);

				// String

				writeString(this.ligne_type, dos);

				// String

				writeString(this.remu_date, dos);

				// String

				writeString(this.remu_montant_ttc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",denomination_sociale=" + denomination_sociale);
			sb.append(",ligne_identifiant=" + ligne_identifiant);
			sb.append(",ligne_rectification=" + String.valueOf(ligne_rectification));
			sb.append(",benef_categorie_code=" + benef_categorie_code);
			sb.append(",categorie=" + categorie);
			sb.append(",benef_nom=" + benef_nom);
			sb.append(",benef_prenom=" + benef_prenom);
			sb.append(",benef_qualite_code=" + benef_qualite_code);
			sb.append(",qualite=" + qualite);
			sb.append(",benef_adresse1=" + benef_adresse1);
			sb.append(",benef_adresse2=" + benef_adresse2);
			sb.append(",benef_adresse3=" + benef_adresse3);
			sb.append(",benef_adresse4=" + benef_adresse4);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_ville=" + benef_ville);
			sb.append(",benef_pays_code=" + benef_pays_code);
			sb.append(",pays=" + pays);
			sb.append(",benef_titre_code=" + benef_titre_code);
			sb.append(",benef_titre_libelle=" + benef_titre_libelle);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_speicalite_libelle=" + benef_speicalite_libelle);
			sb.append(",benef_identifiant_type_code=" + benef_identifiant_type_code);
			sb.append(",identifiant_type=" + identifiant_type);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",benef_etablissement=" + benef_etablissement);
			sb.append(",benef_etablissement_codepostal=" + benef_etablissement_codepostal);
			sb.append(",benef_etablissement_ville=" + benef_etablissement_ville);
			sb.append(",benef_denomination_sociale=" + benef_denomination_sociale);
			sb.append(",benef_objet_social=" + benef_objet_social);
			sb.append(",ligne_type=" + ligne_type);
			sb.append(",remu_date=" + remu_date);
			sb.append(",remu_montant_ttc=" + remu_montant_ttc);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(remunerationsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class qualites_avantagesStruct implements routines.system.IPersistableRow<qualites_avantagesStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];

		public String qualite_beneficiaire_id;

		public String getQualite_beneficiaire_id() {
			return this.qualite_beneficiaire_id;
		}

		public String nom_qualite_beneficiaire;

		public String getNom_qualite_beneficiaire() {
			return this.nom_qualite_beneficiaire;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim) {

				try {

					int length = 0;

					this.qualite_beneficiaire_id = readString(dis);

					this.nom_qualite_beneficiaire = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.qualite_beneficiaire_id, dos);

				// String

				writeString(this.nom_qualite_beneficiaire, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("qualite_beneficiaire_id=" + qualite_beneficiaire_id);
			sb.append(",nom_qualite_beneficiaire=" + nom_qualite_beneficiaire);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(qualites_avantagesStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class avantagesStruct implements routines.system.IPersistableRow<avantagesStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String denomination_sociale;

		public String getDenomination_sociale() {
			return this.denomination_sociale;
		}

		public String ligne_identifiant;

		public String getLigne_identifiant() {
			return this.ligne_identifiant;
		}

		public Character ligne_rectification;

		public Character getLigne_rectification() {
			return this.ligne_rectification;
		}

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String categorie;

		public String getCategorie() {
			return this.categorie;
		}

		public String benef_nom;

		public String getBenef_nom() {
			return this.benef_nom;
		}

		public String benef_prenom;

		public String getBenef_prenom() {
			return this.benef_prenom;
		}

		public String benef_qualite_code;

		public String getBenef_qualite_code() {
			return this.benef_qualite_code;
		}

		public String qualite;

		public String getQualite() {
			return this.qualite;
		}

		public String benef_adresse1;

		public String getBenef_adresse1() {
			return this.benef_adresse1;
		}

		public String benef_adresse2;

		public String getBenef_adresse2() {
			return this.benef_adresse2;
		}

		public String benef_adresse3;

		public String getBenef_adresse3() {
			return this.benef_adresse3;
		}

		public String benef_adresse4;

		public String getBenef_adresse4() {
			return this.benef_adresse4;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_ville;

		public String getBenef_ville() {
			return this.benef_ville;
		}

		public String benef_pays_code;

		public String getBenef_pays_code() {
			return this.benef_pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String benef_titre_code;

		public String getBenef_titre_code() {
			return this.benef_titre_code;
		}

		public String benef_titre_libelle;

		public String getBenef_titre_libelle() {
			return this.benef_titre_libelle;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_speicalite_libelle;

		public String getBenef_speicalite_libelle() {
			return this.benef_speicalite_libelle;
		}

		public String benef_identifiant_type_code;

		public String getBenef_identifiant_type_code() {
			return this.benef_identifiant_type_code;
		}

		public String identifiant_type;

		public String getIdentifiant_type() {
			return this.identifiant_type;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String benef_etablissement;

		public String getBenef_etablissement() {
			return this.benef_etablissement;
		}

		public String benef_etablissement_codepostal;

		public String getBenef_etablissement_codepostal() {
			return this.benef_etablissement_codepostal;
		}

		public String benef_etablissement_ville;

		public String getBenef_etablissement_ville() {
			return this.benef_etablissement_ville;
		}

		public String benef_denomination_sociale;

		public String getBenef_denomination_sociale() {
			return this.benef_denomination_sociale;
		}

		public String benef_objet_social;

		public String getBenef_objet_social() {
			return this.benef_objet_social;
		}

		public String ligne_type;

		public String getLigne_type() {
			return this.ligne_type;
		}

		public String avant_date_signature;

		public String getAvant_date_signature() {
			return this.avant_date_signature;
		}

		public String avant_montant_ttc;

		public String getAvant_montant_ttc() {
			return this.avant_montant_ttc;
		}

		public String avant_nature;

		public String getAvant_nature() {
			return this.avant_nature;
		}

		public String avant_convention_lie;

		public String getAvant_convention_lie() {
			return this.avant_convention_lie;
		}

		public String semestre;

		public String getSemestre() {
			return this.semestre;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim) {

				try {

					int length = 0;

					this.entreprise_identifiant = readString(dis);

					this.denomination_sociale = readString(dis);

					this.ligne_identifiant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ligne_rectification = null;
					} else {
						this.ligne_rectification = dis.readChar();
					}

					this.benef_categorie_code = readString(dis);

					this.categorie = readString(dis);

					this.benef_nom = readString(dis);

					this.benef_prenom = readString(dis);

					this.benef_qualite_code = readString(dis);

					this.qualite = readString(dis);

					this.benef_adresse1 = readString(dis);

					this.benef_adresse2 = readString(dis);

					this.benef_adresse3 = readString(dis);

					this.benef_adresse4 = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_ville = readString(dis);

					this.benef_pays_code = readString(dis);

					this.pays = readString(dis);

					this.benef_titre_code = readString(dis);

					this.benef_titre_libelle = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_speicalite_libelle = readString(dis);

					this.benef_identifiant_type_code = readString(dis);

					this.identifiant_type = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.benef_etablissement = readString(dis);

					this.benef_etablissement_codepostal = readString(dis);

					this.benef_etablissement_ville = readString(dis);

					this.benef_denomination_sociale = readString(dis);

					this.benef_objet_social = readString(dis);

					this.ligne_type = readString(dis);

					this.avant_date_signature = readString(dis);

					this.avant_montant_ttc = readString(dis);

					this.avant_nature = readString(dis);

					this.avant_convention_lie = readString(dis);

					this.semestre = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entreprise_identifiant, dos);

				// String

				writeString(this.denomination_sociale, dos);

				// String

				writeString(this.ligne_identifiant, dos);

				// Character

				if (this.ligne_rectification == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.ligne_rectification);
				}

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.categorie, dos);

				// String

				writeString(this.benef_nom, dos);

				// String

				writeString(this.benef_prenom, dos);

				// String

				writeString(this.benef_qualite_code, dos);

				// String

				writeString(this.qualite, dos);

				// String

				writeString(this.benef_adresse1, dos);

				// String

				writeString(this.benef_adresse2, dos);

				// String

				writeString(this.benef_adresse3, dos);

				// String

				writeString(this.benef_adresse4, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_ville, dos);

				// String

				writeString(this.benef_pays_code, dos);

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.benef_titre_code, dos);

				// String

				writeString(this.benef_titre_libelle, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_speicalite_libelle, dos);

				// String

				writeString(this.benef_identifiant_type_code, dos);

				// String

				writeString(this.identifiant_type, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.benef_etablissement, dos);

				// String

				writeString(this.benef_etablissement_codepostal, dos);

				// String

				writeString(this.benef_etablissement_ville, dos);

				// String

				writeString(this.benef_denomination_sociale, dos);

				// String

				writeString(this.benef_objet_social, dos);

				// String

				writeString(this.ligne_type, dos);

				// String

				writeString(this.avant_date_signature, dos);

				// String

				writeString(this.avant_montant_ttc, dos);

				// String

				writeString(this.avant_nature, dos);

				// String

				writeString(this.avant_convention_lie, dos);

				// String

				writeString(this.semestre, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",denomination_sociale=" + denomination_sociale);
			sb.append(",ligne_identifiant=" + ligne_identifiant);
			sb.append(",ligne_rectification=" + String.valueOf(ligne_rectification));
			sb.append(",benef_categorie_code=" + benef_categorie_code);
			sb.append(",categorie=" + categorie);
			sb.append(",benef_nom=" + benef_nom);
			sb.append(",benef_prenom=" + benef_prenom);
			sb.append(",benef_qualite_code=" + benef_qualite_code);
			sb.append(",qualite=" + qualite);
			sb.append(",benef_adresse1=" + benef_adresse1);
			sb.append(",benef_adresse2=" + benef_adresse2);
			sb.append(",benef_adresse3=" + benef_adresse3);
			sb.append(",benef_adresse4=" + benef_adresse4);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_ville=" + benef_ville);
			sb.append(",benef_pays_code=" + benef_pays_code);
			sb.append(",pays=" + pays);
			sb.append(",benef_titre_code=" + benef_titre_code);
			sb.append(",benef_titre_libelle=" + benef_titre_libelle);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_speicalite_libelle=" + benef_speicalite_libelle);
			sb.append(",benef_identifiant_type_code=" + benef_identifiant_type_code);
			sb.append(",identifiant_type=" + identifiant_type);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",benef_etablissement=" + benef_etablissement);
			sb.append(",benef_etablissement_codepostal=" + benef_etablissement_codepostal);
			sb.append(",benef_etablissement_ville=" + benef_etablissement_ville);
			sb.append(",benef_denomination_sociale=" + benef_denomination_sociale);
			sb.append(",benef_objet_social=" + benef_objet_social);
			sb.append(",ligne_type=" + ligne_type);
			sb.append(",avant_date_signature=" + avant_date_signature);
			sb.append(",avant_montant_ttc=" + avant_montant_ttc);
			sb.append(",avant_nature=" + avant_nature);
			sb.append(",avant_convention_lie=" + avant_convention_lie);
			sb.append(",semestre=" + semestre);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(avantagesStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class qualites_conventionsStruct
			implements routines.system.IPersistableRow<qualites_conventionsStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];

		public String qualite_beneficiaire_id;

		public String getQualite_beneficiaire_id() {
			return this.qualite_beneficiaire_id;
		}

		public String nom_qualite_beneficiaire;

		public String getNom_qualite_beneficiaire() {
			return this.nom_qualite_beneficiaire;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim) {

				try {

					int length = 0;

					this.qualite_beneficiaire_id = readString(dis);

					this.nom_qualite_beneficiaire = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.qualite_beneficiaire_id, dos);

				// String

				writeString(this.nom_qualite_beneficiaire, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("qualite_beneficiaire_id=" + qualite_beneficiaire_id);
			sb.append(",nom_qualite_beneficiaire=" + nom_qualite_beneficiaire);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(qualites_conventionsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class conventionsStruct implements routines.system.IPersistableRow<conventionsStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String denomination_sociale;

		public String getDenomination_sociale() {
			return this.denomination_sociale;
		}

		public String ligne_identifiant;

		public String getLigne_identifiant() {
			return this.ligne_identifiant;
		}

		public Character ligne_rectification;

		public Character getLigne_rectification() {
			return this.ligne_rectification;
		}

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String categorie;

		public String getCategorie() {
			return this.categorie;
		}

		public String benef_nom;

		public String getBenef_nom() {
			return this.benef_nom;
		}

		public String benef_prenom;

		public String getBenef_prenom() {
			return this.benef_prenom;
		}

		public String benef_qualite_code;

		public String getBenef_qualite_code() {
			return this.benef_qualite_code;
		}

		public String qualite;

		public String getQualite() {
			return this.qualite;
		}

		public String benef_adresse1;

		public String getBenef_adresse1() {
			return this.benef_adresse1;
		}

		public String benef_adresse2;

		public String getBenef_adresse2() {
			return this.benef_adresse2;
		}

		public String benef_adresse3;

		public String getBenef_adresse3() {
			return this.benef_adresse3;
		}

		public String benef_adresse4;

		public String getBenef_adresse4() {
			return this.benef_adresse4;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_ville;

		public String getBenef_ville() {
			return this.benef_ville;
		}

		public String benef_pays_code;

		public String getBenef_pays_code() {
			return this.benef_pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String benef_titre_code;

		public String getBenef_titre_code() {
			return this.benef_titre_code;
		}

		public String benef_titre_libelle;

		public String getBenef_titre_libelle() {
			return this.benef_titre_libelle;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_speicalite_libelle;

		public String getBenef_speicalite_libelle() {
			return this.benef_speicalite_libelle;
		}

		public String benef_identifiant_type_code;

		public String getBenef_identifiant_type_code() {
			return this.benef_identifiant_type_code;
		}

		public String identifiant_type;

		public String getIdentifiant_type() {
			return this.identifiant_type;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String benef_etablissement;

		public String getBenef_etablissement() {
			return this.benef_etablissement;
		}

		public String benef_etablissement_codepostal;

		public String getBenef_etablissement_codepostal() {
			return this.benef_etablissement_codepostal;
		}

		public String benef_etablissement_ville;

		public String getBenef_etablissement_ville() {
			return this.benef_etablissement_ville;
		}

		public String benef_denomination_sociale;

		public String getBenef_denomination_sociale() {
			return this.benef_denomination_sociale;
		}

		public String benef_objet_social;

		public String getBenef_objet_social() {
			return this.benef_objet_social;
		}

		public String ligne_type;

		public String getLigne_type() {
			return this.ligne_type;
		}

		public String conv_date_signature;

		public String getConv_date_signature() {
			return this.conv_date_signature;
		}

		public String conv_objet;

		public String getConv_objet() {
			return this.conv_objet;
		}

		public String conv_objet_autre;

		public String getConv_objet_autre() {
			return this.conv_objet_autre;
		}

		public String conv_date_debut;

		public String getConv_date_debut() {
			return this.conv_date_debut;
		}

		public String conv_date_fin;

		public String getConv_date_fin() {
			return this.conv_date_fin;
		}

		public String conv_montant_ttc;

		public String getConv_montant_ttc() {
			return this.conv_montant_ttc;
		}

		public String conv_manifestation_date;

		public String getConv_manifestation_date() {
			return this.conv_manifestation_date;
		}

		public String conv_manifestation_nom;

		public String getConv_manifestation_nom() {
			return this.conv_manifestation_nom;
		}

		public String conv_manifestation_lieu;

		public String getConv_manifestation_lieu() {
			return this.conv_manifestation_lieu;
		}

		public String conv_manifestation_organisateur;

		public String getConv_manifestation_organisateur() {
			return this.conv_manifestation_organisateur;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim) {

				try {

					int length = 0;

					this.entreprise_identifiant = readString(dis);

					this.denomination_sociale = readString(dis);

					this.ligne_identifiant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ligne_rectification = null;
					} else {
						this.ligne_rectification = dis.readChar();
					}

					this.benef_categorie_code = readString(dis);

					this.categorie = readString(dis);

					this.benef_nom = readString(dis);

					this.benef_prenom = readString(dis);

					this.benef_qualite_code = readString(dis);

					this.qualite = readString(dis);

					this.benef_adresse1 = readString(dis);

					this.benef_adresse2 = readString(dis);

					this.benef_adresse3 = readString(dis);

					this.benef_adresse4 = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_ville = readString(dis);

					this.benef_pays_code = readString(dis);

					this.pays = readString(dis);

					this.benef_titre_code = readString(dis);

					this.benef_titre_libelle = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_speicalite_libelle = readString(dis);

					this.benef_identifiant_type_code = readString(dis);

					this.identifiant_type = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.benef_etablissement = readString(dis);

					this.benef_etablissement_codepostal = readString(dis);

					this.benef_etablissement_ville = readString(dis);

					this.benef_denomination_sociale = readString(dis);

					this.benef_objet_social = readString(dis);

					this.ligne_type = readString(dis);

					this.conv_date_signature = readString(dis);

					this.conv_objet = readString(dis);

					this.conv_objet_autre = readString(dis);

					this.conv_date_debut = readString(dis);

					this.conv_date_fin = readString(dis);

					this.conv_montant_ttc = readString(dis);

					this.conv_manifestation_date = readString(dis);

					this.conv_manifestation_nom = readString(dis);

					this.conv_manifestation_lieu = readString(dis);

					this.conv_manifestation_organisateur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entreprise_identifiant, dos);

				// String

				writeString(this.denomination_sociale, dos);

				// String

				writeString(this.ligne_identifiant, dos);

				// Character

				if (this.ligne_rectification == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.ligne_rectification);
				}

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.categorie, dos);

				// String

				writeString(this.benef_nom, dos);

				// String

				writeString(this.benef_prenom, dos);

				// String

				writeString(this.benef_qualite_code, dos);

				// String

				writeString(this.qualite, dos);

				// String

				writeString(this.benef_adresse1, dos);

				// String

				writeString(this.benef_adresse2, dos);

				// String

				writeString(this.benef_adresse3, dos);

				// String

				writeString(this.benef_adresse4, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_ville, dos);

				// String

				writeString(this.benef_pays_code, dos);

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.benef_titre_code, dos);

				// String

				writeString(this.benef_titre_libelle, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_speicalite_libelle, dos);

				// String

				writeString(this.benef_identifiant_type_code, dos);

				// String

				writeString(this.identifiant_type, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.benef_etablissement, dos);

				// String

				writeString(this.benef_etablissement_codepostal, dos);

				// String

				writeString(this.benef_etablissement_ville, dos);

				// String

				writeString(this.benef_denomination_sociale, dos);

				// String

				writeString(this.benef_objet_social, dos);

				// String

				writeString(this.ligne_type, dos);

				// String

				writeString(this.conv_date_signature, dos);

				// String

				writeString(this.conv_objet, dos);

				// String

				writeString(this.conv_objet_autre, dos);

				// String

				writeString(this.conv_date_debut, dos);

				// String

				writeString(this.conv_date_fin, dos);

				// String

				writeString(this.conv_montant_ttc, dos);

				// String

				writeString(this.conv_manifestation_date, dos);

				// String

				writeString(this.conv_manifestation_nom, dos);

				// String

				writeString(this.conv_manifestation_lieu, dos);

				// String

				writeString(this.conv_manifestation_organisateur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",denomination_sociale=" + denomination_sociale);
			sb.append(",ligne_identifiant=" + ligne_identifiant);
			sb.append(",ligne_rectification=" + String.valueOf(ligne_rectification));
			sb.append(",benef_categorie_code=" + benef_categorie_code);
			sb.append(",categorie=" + categorie);
			sb.append(",benef_nom=" + benef_nom);
			sb.append(",benef_prenom=" + benef_prenom);
			sb.append(",benef_qualite_code=" + benef_qualite_code);
			sb.append(",qualite=" + qualite);
			sb.append(",benef_adresse1=" + benef_adresse1);
			sb.append(",benef_adresse2=" + benef_adresse2);
			sb.append(",benef_adresse3=" + benef_adresse3);
			sb.append(",benef_adresse4=" + benef_adresse4);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_ville=" + benef_ville);
			sb.append(",benef_pays_code=" + benef_pays_code);
			sb.append(",pays=" + pays);
			sb.append(",benef_titre_code=" + benef_titre_code);
			sb.append(",benef_titre_libelle=" + benef_titre_libelle);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_speicalite_libelle=" + benef_speicalite_libelle);
			sb.append(",benef_identifiant_type_code=" + benef_identifiant_type_code);
			sb.append(",identifiant_type=" + identifiant_type);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",benef_etablissement=" + benef_etablissement);
			sb.append(",benef_etablissement_codepostal=" + benef_etablissement_codepostal);
			sb.append(",benef_etablissement_ville=" + benef_etablissement_ville);
			sb.append(",benef_denomination_sociale=" + benef_denomination_sociale);
			sb.append(",benef_objet_social=" + benef_objet_social);
			sb.append(",ligne_type=" + ligne_type);
			sb.append(",conv_date_signature=" + conv_date_signature);
			sb.append(",conv_objet=" + conv_objet);
			sb.append(",conv_objet_autre=" + conv_objet_autre);
			sb.append(",conv_date_debut=" + conv_date_debut);
			sb.append(",conv_date_fin=" + conv_date_fin);
			sb.append(",conv_montant_ttc=" + conv_montant_ttc);
			sb.append(",conv_manifestation_date=" + conv_manifestation_date);
			sb.append(",conv_manifestation_nom=" + conv_manifestation_nom);
			sb.append(",conv_manifestation_lieu=" + conv_manifestation_lieu);
			sb.append(",conv_manifestation_organisateur=" + conv_manifestation_organisateur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(conventionsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				remunerationsStruct remunerations = new remunerationsStruct();
				qualites_remunerationsStruct qualites_remunerations = new qualites_remunerationsStruct();

				avantagesStruct avantages = new avantagesStruct();
				qualites_avantagesStruct qualites_avantages = new qualites_avantagesStruct();

				conventionsStruct conventions = new conventionsStruct();
				qualites_conventionsStruct qualites_conventions = new qualites_conventionsStruct();

				mergedStruct merged = new mergedStruct();
				filteredStruct filtered = new filteredStruct();
				qualitesStruct qualites = new qualitesStruct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[2];

					public void addRow(String[] row) {

						for (int i = 0; i < 2; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 1 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 1 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[1] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "qualite_beneficiaire_id", "nom_qualite_beneficiaire", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "qualites");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;

				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "qualite_beneficiaire_dim";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbProperties_tDBOutput_1 = "noDatetimeStringSync=true";
				String url_tDBOutput_1 = null;
				if (dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
					url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "transparence_sante_bi" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_1.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "transparence_sante_bi" + "?"
							+ properties_tDBOutput_1;
				}
				String driverClass_tDBOutput_1 = "com.mysql.jdbc.Driver";

				String dbUser_tDBOutput_1 = "root";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:iMgJoBJ3gZrj0r27lXkYvhhUlUSGr6Y+HOB4bg==");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				java.lang.Class.forName(driverClass_tDBOutput_1);

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;

				try (java.sql.Statement stmtClear_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtClear_tDBOutput_1.executeUpdate("DELETE FROM `" + tableName_tDBOutput_1 + "`");
				}

				String insert_tDBOutput_1 = "INSERT INTO `" + "qualite_beneficiaire_dim"
						+ "` (`qualite_beneficiaire_id`,`nom_qualite_beneficiaire`) VALUES (?,?)";
				int batchSize_tDBOutput_1 = 100;
				int batchSizeCounter_tDBOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "filtered");
				}

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String qualite_beneficiaire_id;
					String nom_qualite_beneficiaire;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.qualite_beneficiaire_id == null) ? 0
									: this.qualite_beneficiaire_id.hashCode());

							result = prime * result + ((this.nom_qualite_beneficiaire == null) ? 0
									: this.nom_qualite_beneficiaire.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.qualite_beneficiaire_id == null) {
							if (other.qualite_beneficiaire_id != null)
								return false;

						} else if (!this.qualite_beneficiaire_id.equals(other.qualite_beneficiaire_id))

							return false;

						if (this.nom_qualite_beneficiaire == null) {
							if (other.nom_qualite_beneficiaire != null)
								return false;

						} else if (!this.nom_qualite_beneficiaire.equals(other.nom_qualite_beneficiaire))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "merged");
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "qualites_remunerations",
							"qualites_avantages", "qualites_conventions");
				}

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "remunerations");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				qualites_remunerationsStruct qualites_remunerations_tmp = new qualites_remunerationsStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try {

					Object filename_tFileInputDelimited_3 = "C:/BI/transparence-sante/data/data.gouv/remunerations.csv";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0 || random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								"C:/BI/transparence-sante/data/data.gouv/remunerations.csv", "UTF-8", ";", "\n", false,
								1, 0, limit_tFileInputDelimited_3, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						remunerations = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						remunerations = new remunerationsStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_3 = 0;

							remunerations.entreprise_identifiant = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 1;

							remunerations.denomination_sociale = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 2;

							remunerations.ligne_identifiant = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 3;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									remunerations.ligne_rectification = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ligne_rectification", "remunerations", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								remunerations.ligne_rectification = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 4;

							remunerations.benef_categorie_code = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 5;

							remunerations.categorie = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 6;

							remunerations.benef_nom = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 7;

							remunerations.benef_prenom = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 8;

							remunerations.benef_qualite_code = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 9;

							remunerations.qualite = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 10;

							remunerations.benef_adresse1 = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 11;

							remunerations.benef_adresse2 = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 12;

							remunerations.benef_adresse3 = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 13;

							remunerations.benef_adresse4 = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 14;

							remunerations.benef_codepostal = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 15;

							remunerations.benef_ville = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 16;

							remunerations.benef_pays_code = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 17;

							remunerations.pays = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 18;

							remunerations.benef_titre_code = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 19;

							remunerations.benef_titre_libelle = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 20;

							remunerations.benef_specialite_code = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 21;

							remunerations.benef_speicalite_libelle = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 22;

							remunerations.benef_identifiant_type_code = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 23;

							remunerations.identifiant_type = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 24;

							remunerations.benef_identifiant_valeur = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 25;

							remunerations.benef_etablissement = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 26;

							remunerations.benef_etablissement_codepostal = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 27;

							remunerations.benef_etablissement_ville = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 28;

							remunerations.benef_denomination_sociale = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 29;

							remunerations.benef_objet_social = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 30;

							remunerations.ligne_type = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 31;

							remunerations.remu_date = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 32;

							remunerations.remu_montant_ttc = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							remunerations = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "remunerations"
						if (remunerations != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "remunerations");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								qualites_remunerations = null;

// # Output table : 'qualites_remunerations'
								qualites_remunerations_tmp.qualite_beneficiaire_id = remunerations.benef_qualite_code
										.equals("") ? null : remunerations.benef_qualite_code;
								qualites_remunerations_tmp.nom_qualite_beneficiaire = remunerations.qualite.equals("")
										? null
										: remunerations.qualite;
								qualites_remunerations = qualites_remunerations_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "qualites_remunerations"
							if (qualites_remunerations != null) {

								/**
								 * [tUnite_1 main ] start
								 */

								currentComponent = "tUnite_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "qualites_remunerations");
								}

//////////

// for output
								merged = new mergedStruct();

								merged.qualite_beneficiaire_id = qualites_remunerations.qualite_beneficiaire_id;
								merged.nom_qualite_beneficiaire = qualites_remunerations.nom_qualite_beneficiaire;

								nb_line_tUnite_1++;

//////////

								tos_count_tUnite_1++;

								/**
								 * [tUnite_1 main ] stop
								 */

								/**
								 * [tUnite_1 process_data_begin ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_begin ] stop
								 */

								/**
								 * [tFilterRow_1 main ] start
								 */

								currentComponent = "tFilterRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "merged");
								}

								filtered = null;
								Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
								ope_tFilterRow_1.matches((merged.qualite_beneficiaire_id != null),
										"qualite_beneficiaire_id!=null failed");
								ope_tFilterRow_1.matches((merged.nom_qualite_beneficiaire != null),
										"nom_qualite_beneficiaire!=null failed");

								if (ope_tFilterRow_1.getMatchFlag()) {
									if (filtered == null) {
										filtered = new filteredStruct();
									}
									filtered.qualite_beneficiaire_id = merged.qualite_beneficiaire_id;
									filtered.nom_qualite_beneficiaire = merged.nom_qualite_beneficiaire;
									nb_line_ok_tFilterRow_1++;
								} else {
									nb_line_reject_tFilterRow_1++;
								}

								nb_line_tFilterRow_1++;

								tos_count_tFilterRow_1++;

								/**
								 * [tFilterRow_1 main ] stop
								 */

								/**
								 * [tFilterRow_1 process_data_begin ] start
								 */

								currentComponent = "tFilterRow_1";

								/**
								 * [tFilterRow_1 process_data_begin ] stop
								 */
// Start of branch "filtered"
								if (filtered != null) {

									/**
									 * [tUniqRow_1 main ] start
									 */

									currentComponent = "tUniqRow_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "filtered");
									}

									qualites = null;
									if (filtered.qualite_beneficiaire_id == null) {
										finder_tUniqRow_1.qualite_beneficiaire_id = null;
									} else {
										finder_tUniqRow_1.qualite_beneficiaire_id = filtered.qualite_beneficiaire_id
												.toLowerCase();
									}
									if (filtered.nom_qualite_beneficiaire == null) {
										finder_tUniqRow_1.nom_qualite_beneficiaire = null;
									} else {
										finder_tUniqRow_1.nom_qualite_beneficiaire = filtered.nom_qualite_beneficiaire
												.toLowerCase();
									}
									finder_tUniqRow_1.hashCodeDirty = true;
									if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
										KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

										if (filtered.qualite_beneficiaire_id == null) {
											new_tUniqRow_1.qualite_beneficiaire_id = null;
										} else {
											new_tUniqRow_1.qualite_beneficiaire_id = filtered.qualite_beneficiaire_id
													.toLowerCase();
										}
										if (filtered.nom_qualite_beneficiaire == null) {
											new_tUniqRow_1.nom_qualite_beneficiaire = null;
										} else {
											new_tUniqRow_1.nom_qualite_beneficiaire = filtered.nom_qualite_beneficiaire
													.toLowerCase();
										}

										keystUniqRow_1.add(new_tUniqRow_1);
										if (qualites == null) {

											qualites = new qualitesStruct();
										}
										qualites.qualite_beneficiaire_id = filtered.qualite_beneficiaire_id;
										qualites.nom_qualite_beneficiaire = filtered.nom_qualite_beneficiaire;
										nb_uniques_tUniqRow_1++;
									} else {
										nb_duplicates_tUniqRow_1++;
									}

									tos_count_tUniqRow_1++;

									/**
									 * [tUniqRow_1 main ] stop
									 */

									/**
									 * [tUniqRow_1 process_data_begin ] start
									 */

									currentComponent = "tUniqRow_1";

									/**
									 * [tUniqRow_1 process_data_begin ] stop
									 */
// Start of branch "qualites"
									if (qualites != null) {

										/**
										 * [tDBOutput_1 main ] start
										 */

										currentComponent = "tDBOutput_1";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "qualites");
										}

										row3 = null;
										whetherReject_tDBOutput_1 = false;
										if (qualites.qualite_beneficiaire_id == null) {
											pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_1.setString(1, qualites.qualite_beneficiaire_id);
										}

										if (qualites.nom_qualite_beneficiaire == null) {
											pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_1.setString(2, qualites.nom_qualite_beneficiaire);
										}

										pstmt_tDBOutput_1.addBatch();
										nb_line_tDBOutput_1++;

										batchSizeCounter_tDBOutput_1++;
										if (!whetherReject_tDBOutput_1) {
											row3 = new row3Struct();
											row3.qualite_beneficiaire_id = qualites.qualite_beneficiaire_id;
											row3.nom_qualite_beneficiaire = qualites.nom_qualite_beneficiaire;
										}
										if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
											try {
												int countSum_tDBOutput_1 = 0;
												for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
													countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED
															? 0
															: 1);
												}
												insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
											} catch (java.sql.BatchUpdateException e) {
												int countSum_tDBOutput_1 = 0;
												for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
													countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
															: countEach_tDBOutput_1);
												}
												insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
												System.err.println(e.getMessage());
											}

											batchSizeCounter_tDBOutput_1 = 0;
										}
										commitCounter_tDBOutput_1++;

										if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

											try {
												int countSum_tDBOutput_1 = 0;
												for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
													countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
												}
												insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
											} catch (java.sql.BatchUpdateException e) {
												int countSum_tDBOutput_1 = 0;
												for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
													countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
															: countEach_tDBOutput_1);
												}
												insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
												System.err.println(e.getMessage());

											}
											conn_tDBOutput_1.commit();
											commitCounter_tDBOutput_1 = 0;

										}

										tos_count_tDBOutput_1++;

										/**
										 * [tDBOutput_1 main ] stop
										 */

										/**
										 * [tDBOutput_1 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_1";

										/**
										 * [tDBOutput_1 process_data_begin ] stop
										 */
// Start of branch "row3"
										if (row3 != null) {

											/**
											 * [tLogRow_1 main ] start
											 */

											currentComponent = "tLogRow_1";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
											}

///////////////////////		

											String[] row_tLogRow_1 = new String[2];

											if (row3.qualite_beneficiaire_id != null) { //
												row_tLogRow_1[0] = String.valueOf(row3.qualite_beneficiaire_id);

											} //

											if (row3.nom_qualite_beneficiaire != null) { //
												row_tLogRow_1[1] = String.valueOf(row3.nom_qualite_beneficiaire);

											} //

											util_tLogRow_1.addRow(row_tLogRow_1);
											nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

											tos_count_tLogRow_1++;

											/**
											 * [tLogRow_1 main ] stop
											 */

											/**
											 * [tLogRow_1 process_data_begin ] start
											 */

											currentComponent = "tLogRow_1";

											/**
											 * [tLogRow_1 process_data_begin ] stop
											 */

											/**
											 * [tLogRow_1 process_data_end ] start
											 */

											currentComponent = "tLogRow_1";

											/**
											 * [tLogRow_1 process_data_end ] stop
											 */

										} // End of branch "row3"

										/**
										 * [tDBOutput_1 process_data_end ] start
										 */

										currentComponent = "tDBOutput_1";

										/**
										 * [tDBOutput_1 process_data_end ] stop
										 */

									} // End of branch "qualites"

									/**
									 * [tUniqRow_1 process_data_end ] start
									 */

									currentComponent = "tUniqRow_1";

									/**
									 * [tUniqRow_1 process_data_end ] stop
									 */

								} // End of branch "filtered"

								/**
								 * [tFilterRow_1 process_data_end ] start
								 */

								currentComponent = "tFilterRow_1";

								/**
								 * [tFilterRow_1 process_data_end ] stop
								 */

								/**
								 * [tUnite_1 process_data_end ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_end ] stop
								 */

							} // End of branch "qualites_remunerations"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "remunerations"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) ("C:/BI/transparence-sante/data/data.gouv/remunerations.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "remunerations");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "avantages");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				qualites_avantagesStruct qualites_avantages_tmp = new qualites_avantagesStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ";").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */
						"C:/BI/transparence-sante/data/data.gouv/avantages.csv"/**
																				 * End field
																				 * tFileInputDelimited_1:FILENAME
																				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),
											"UTF-8")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_1.readNext()) {

								totalLinetFileInputDelimited_1++;

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
											: totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1
										? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						avantages = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						avantages = new avantagesStruct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) ";").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								avantages.entreprise_identifiant = null;

								avantages.denomination_sociale = null;

								avantages.ligne_identifiant = null;

								avantages.ligne_rectification = null;

								avantages.benef_categorie_code = null;

								avantages.categorie = null;

								avantages.benef_nom = null;

								avantages.benef_prenom = null;

								avantages.benef_qualite_code = null;

								avantages.qualite = null;

								avantages.benef_adresse1 = null;

								avantages.benef_adresse2 = null;

								avantages.benef_adresse3 = null;

								avantages.benef_adresse4 = null;

								avantages.benef_codepostal = null;

								avantages.benef_ville = null;

								avantages.benef_pays_code = null;

								avantages.pays = null;

								avantages.benef_titre_code = null;

								avantages.benef_titre_libelle = null;

								avantages.benef_specialite_code = null;

								avantages.benef_speicalite_libelle = null;

								avantages.benef_identifiant_type_code = null;

								avantages.identifiant_type = null;

								avantages.benef_identifiant_valeur = null;

								avantages.benef_etablissement = null;

								avantages.benef_etablissement_codepostal = null;

								avantages.benef_etablissement_ville = null;

								avantages.benef_denomination_sociale = null;

								avantages.benef_objet_social = null;

								avantages.ligne_type = null;

								avantages.avant_date_signature = null;

								avantages.avant_montant_ttc = null;

								avantages.avant_nature = null;

								avantages.avant_convention_lie = null;

								avantages.semestre = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.entreprise_identifiant = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.entreprise_identifiant = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.denomination_sociale = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.denomination_sociale = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.ligne_identifiant = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.ligne_identifiant = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											avantages.ligne_rectification = ParserUtils.parseTo_Character(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"ligne_rectification", "avantages",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										avantages.ligne_rectification = null;

									}

								} else {

									avantages.ligne_rectification = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.benef_categorie_code = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.benef_categorie_code = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.categorie = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.categorie = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.benef_nom = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.benef_nom = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 7;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.benef_prenom = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.benef_prenom = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 8;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.benef_qualite_code = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.benef_qualite_code = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 9;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.qualite = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.qualite = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 10;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.benef_adresse1 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.benef_adresse1 = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 11;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.benef_adresse2 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.benef_adresse2 = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 12;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.benef_adresse3 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.benef_adresse3 = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 13;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.benef_adresse4 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.benef_adresse4 = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 14;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.benef_codepostal = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.benef_codepostal = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 15;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.benef_ville = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.benef_ville = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 16;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.benef_pays_code = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.benef_pays_code = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 17;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.pays = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.pays = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 18;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.benef_titre_code = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.benef_titre_code = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 19;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.benef_titre_libelle = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.benef_titre_libelle = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 20;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.benef_specialite_code = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.benef_specialite_code = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 21;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.benef_speicalite_libelle = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.benef_speicalite_libelle = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 22;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.benef_identifiant_type_code = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.benef_identifiant_type_code = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 23;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.identifiant_type = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.identifiant_type = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 24;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.benef_identifiant_valeur = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.benef_identifiant_valeur = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 25;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.benef_etablissement = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.benef_etablissement = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 26;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.benef_etablissement_codepostal = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.benef_etablissement_codepostal = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 27;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.benef_etablissement_ville = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.benef_etablissement_ville = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 28;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.benef_denomination_sociale = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.benef_denomination_sociale = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 29;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.benef_objet_social = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.benef_objet_social = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 30;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.ligne_type = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.ligne_type = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 31;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.avant_date_signature = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.avant_date_signature = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 32;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.avant_montant_ttc = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.avant_montant_ttc = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 33;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.avant_nature = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.avant_nature = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 34;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.avant_convention_lie = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.avant_convention_lie = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 35;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages.semestre = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages.semestre = null;

								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							avantages = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "avantages"
						if (avantages != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "avantages");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								qualites_avantages = null;

// # Output table : 'qualites_avantages'
								qualites_avantages_tmp.qualite_beneficiaire_id = avantages.benef_qualite_code.equals("")
										? null
										: avantages.benef_qualite_code;
								qualites_avantages_tmp.nom_qualite_beneficiaire = avantages.qualite.equals("") ? null
										: avantages.qualite;
								qualites_avantages = qualites_avantages_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
// Start of branch "qualites_avantages"
							if (qualites_avantages != null) {

								/**
								 * [tUnite_1 main ] start
								 */

								currentComponent = "tUnite_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "qualites_avantages");
								}

//////////

// for output
								merged = new mergedStruct();

								merged.qualite_beneficiaire_id = qualites_avantages.qualite_beneficiaire_id;
								merged.nom_qualite_beneficiaire = qualites_avantages.nom_qualite_beneficiaire;

								nb_line_tUnite_1++;

//////////

								tos_count_tUnite_1++;

								/**
								 * [tUnite_1 main ] stop
								 */

								/**
								 * [tUnite_1 process_data_begin ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_begin ] stop
								 */

								/**
								 * [tFilterRow_1 main ] start
								 */

								currentComponent = "tFilterRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "merged");
								}

								filtered = null;
								Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
								ope_tFilterRow_1.matches((merged.qualite_beneficiaire_id != null),
										"qualite_beneficiaire_id!=null failed");
								ope_tFilterRow_1.matches((merged.nom_qualite_beneficiaire != null),
										"nom_qualite_beneficiaire!=null failed");

								if (ope_tFilterRow_1.getMatchFlag()) {
									if (filtered == null) {
										filtered = new filteredStruct();
									}
									filtered.qualite_beneficiaire_id = merged.qualite_beneficiaire_id;
									filtered.nom_qualite_beneficiaire = merged.nom_qualite_beneficiaire;
									nb_line_ok_tFilterRow_1++;
								} else {
									nb_line_reject_tFilterRow_1++;
								}

								nb_line_tFilterRow_1++;

								tos_count_tFilterRow_1++;

								/**
								 * [tFilterRow_1 main ] stop
								 */

								/**
								 * [tFilterRow_1 process_data_begin ] start
								 */

								currentComponent = "tFilterRow_1";

								/**
								 * [tFilterRow_1 process_data_begin ] stop
								 */
// Start of branch "filtered"
								if (filtered != null) {

									/**
									 * [tUniqRow_1 main ] start
									 */

									currentComponent = "tUniqRow_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "filtered");
									}

									qualites = null;
									if (filtered.qualite_beneficiaire_id == null) {
										finder_tUniqRow_1.qualite_beneficiaire_id = null;
									} else {
										finder_tUniqRow_1.qualite_beneficiaire_id = filtered.qualite_beneficiaire_id
												.toLowerCase();
									}
									if (filtered.nom_qualite_beneficiaire == null) {
										finder_tUniqRow_1.nom_qualite_beneficiaire = null;
									} else {
										finder_tUniqRow_1.nom_qualite_beneficiaire = filtered.nom_qualite_beneficiaire
												.toLowerCase();
									}
									finder_tUniqRow_1.hashCodeDirty = true;
									if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
										KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

										if (filtered.qualite_beneficiaire_id == null) {
											new_tUniqRow_1.qualite_beneficiaire_id = null;
										} else {
											new_tUniqRow_1.qualite_beneficiaire_id = filtered.qualite_beneficiaire_id
													.toLowerCase();
										}
										if (filtered.nom_qualite_beneficiaire == null) {
											new_tUniqRow_1.nom_qualite_beneficiaire = null;
										} else {
											new_tUniqRow_1.nom_qualite_beneficiaire = filtered.nom_qualite_beneficiaire
													.toLowerCase();
										}

										keystUniqRow_1.add(new_tUniqRow_1);
										if (qualites == null) {

											qualites = new qualitesStruct();
										}
										qualites.qualite_beneficiaire_id = filtered.qualite_beneficiaire_id;
										qualites.nom_qualite_beneficiaire = filtered.nom_qualite_beneficiaire;
										nb_uniques_tUniqRow_1++;
									} else {
										nb_duplicates_tUniqRow_1++;
									}

									tos_count_tUniqRow_1++;

									/**
									 * [tUniqRow_1 main ] stop
									 */

									/**
									 * [tUniqRow_1 process_data_begin ] start
									 */

									currentComponent = "tUniqRow_1";

									/**
									 * [tUniqRow_1 process_data_begin ] stop
									 */
// Start of branch "qualites"
									if (qualites != null) {

										/**
										 * [tDBOutput_1 main ] start
										 */

										currentComponent = "tDBOutput_1";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "qualites");
										}

										row3 = null;
										whetherReject_tDBOutput_1 = false;
										if (qualites.qualite_beneficiaire_id == null) {
											pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_1.setString(1, qualites.qualite_beneficiaire_id);
										}

										if (qualites.nom_qualite_beneficiaire == null) {
											pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_1.setString(2, qualites.nom_qualite_beneficiaire);
										}

										pstmt_tDBOutput_1.addBatch();
										nb_line_tDBOutput_1++;

										batchSizeCounter_tDBOutput_1++;
										if (!whetherReject_tDBOutput_1) {
											row3 = new row3Struct();
											row3.qualite_beneficiaire_id = qualites.qualite_beneficiaire_id;
											row3.nom_qualite_beneficiaire = qualites.nom_qualite_beneficiaire;
										}
										if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
											try {
												int countSum_tDBOutput_1 = 0;
												for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
													countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED
															? 0
															: 1);
												}
												insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
											} catch (java.sql.BatchUpdateException e) {
												int countSum_tDBOutput_1 = 0;
												for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
													countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
															: countEach_tDBOutput_1);
												}
												insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
												System.err.println(e.getMessage());
											}

											batchSizeCounter_tDBOutput_1 = 0;
										}
										commitCounter_tDBOutput_1++;

										if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

											try {
												int countSum_tDBOutput_1 = 0;
												for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
													countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
												}
												insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
											} catch (java.sql.BatchUpdateException e) {
												int countSum_tDBOutput_1 = 0;
												for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
													countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
															: countEach_tDBOutput_1);
												}
												insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
												System.err.println(e.getMessage());

											}
											conn_tDBOutput_1.commit();
											commitCounter_tDBOutput_1 = 0;

										}

										tos_count_tDBOutput_1++;

										/**
										 * [tDBOutput_1 main ] stop
										 */

										/**
										 * [tDBOutput_1 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_1";

										/**
										 * [tDBOutput_1 process_data_begin ] stop
										 */
// Start of branch "row3"
										if (row3 != null) {

											/**
											 * [tLogRow_1 main ] start
											 */

											currentComponent = "tLogRow_1";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
											}

///////////////////////		

											String[] row_tLogRow_1 = new String[2];

											if (row3.qualite_beneficiaire_id != null) { //
												row_tLogRow_1[0] = String.valueOf(row3.qualite_beneficiaire_id);

											} //

											if (row3.nom_qualite_beneficiaire != null) { //
												row_tLogRow_1[1] = String.valueOf(row3.nom_qualite_beneficiaire);

											} //

											util_tLogRow_1.addRow(row_tLogRow_1);
											nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

											tos_count_tLogRow_1++;

											/**
											 * [tLogRow_1 main ] stop
											 */

											/**
											 * [tLogRow_1 process_data_begin ] start
											 */

											currentComponent = "tLogRow_1";

											/**
											 * [tLogRow_1 process_data_begin ] stop
											 */

											/**
											 * [tLogRow_1 process_data_end ] start
											 */

											currentComponent = "tLogRow_1";

											/**
											 * [tLogRow_1 process_data_end ] stop
											 */

										} // End of branch "row3"

										/**
										 * [tDBOutput_1 process_data_end ] start
										 */

										currentComponent = "tDBOutput_1";

										/**
										 * [tDBOutput_1 process_data_end ] stop
										 */

									} // End of branch "qualites"

									/**
									 * [tUniqRow_1 process_data_end ] start
									 */

									currentComponent = "tUniqRow_1";

									/**
									 * [tUniqRow_1 process_data_end ] stop
									 */

								} // End of branch "filtered"

								/**
								 * [tFilterRow_1 process_data_end ] start
								 */

								currentComponent = "tFilterRow_1";

								/**
								 * [tFilterRow_1 process_data_end ] stop
								 */

								/**
								 * [tUnite_1 process_data_end ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_end ] stop
								 */

							} // End of branch "qualites_avantages"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "avantages"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "avantages");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "conventions");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				qualites_conventionsStruct qualites_conventions_tmp = new qualites_conventionsStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try {

					Object filename_tFileInputDelimited_2 = "C:/BI/transparence-sante/data/data.gouv/conventions.csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0 || random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"C:/BI/transparence-sante/data/data.gouv/conventions.csv", "UTF-8", ";", "\n", false, 1,
								0, limit_tFileInputDelimited_2, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						conventions = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						conventions = new conventionsStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							conventions.entreprise_identifiant = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 1;

							conventions.denomination_sociale = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							conventions.ligne_identifiant = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 3;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									conventions.ligne_rectification = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ligne_rectification", "conventions", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								conventions.ligne_rectification = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 4;

							conventions.benef_categorie_code = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 5;

							conventions.categorie = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 6;

							conventions.benef_nom = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 7;

							conventions.benef_prenom = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 8;

							conventions.benef_qualite_code = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 9;

							conventions.qualite = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 10;

							conventions.benef_adresse1 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 11;

							conventions.benef_adresse2 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 12;

							conventions.benef_adresse3 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 13;

							conventions.benef_adresse4 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 14;

							conventions.benef_codepostal = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 15;

							conventions.benef_ville = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 16;

							conventions.benef_pays_code = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 17;

							conventions.pays = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 18;

							conventions.benef_titre_code = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 19;

							conventions.benef_titre_libelle = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 20;

							conventions.benef_specialite_code = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 21;

							conventions.benef_speicalite_libelle = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 22;

							conventions.benef_identifiant_type_code = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 23;

							conventions.identifiant_type = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 24;

							conventions.benef_identifiant_valeur = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 25;

							conventions.benef_etablissement = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 26;

							conventions.benef_etablissement_codepostal = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 27;

							conventions.benef_etablissement_ville = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 28;

							conventions.benef_denomination_sociale = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 29;

							conventions.benef_objet_social = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 30;

							conventions.ligne_type = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 31;

							conventions.conv_date_signature = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 32;

							conventions.conv_objet = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 33;

							conventions.conv_objet_autre = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 34;

							conventions.conv_date_debut = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 35;

							conventions.conv_date_fin = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 36;

							conventions.conv_montant_ttc = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 37;

							conventions.conv_manifestation_date = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 38;

							conventions.conv_manifestation_nom = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 39;

							conventions.conv_manifestation_lieu = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 40;

							conventions.conv_manifestation_organisateur = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							conventions = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "conventions"
						if (conventions != null) {

							/**
							 * [tMap_3 main ] start
							 */

							currentComponent = "tMap_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "conventions");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_3 = false;
							boolean mainRowRejected_tMap_3 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
								// ###############################
								// # Output tables

								qualites_conventions = null;

// # Output table : 'qualites_conventions'
								qualites_conventions_tmp.qualite_beneficiaire_id = // qualite code starts with a '['.
																					// Always.
// the code is enclosed between braces like so : [CODE]
										conventions.benef_qualite_code.equals("") ? null :

												conventions.benef_qualite_code.charAt(0) == '['
														? conventions.benef_qualite_code
														: null;
								qualites_conventions_tmp.nom_qualite_beneficiaire = conventions.qualite.equals("")
										? null
										: conventions.qualite;
								qualites_conventions = qualites_conventions_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_3 = false;

							tos_count_tMap_3++;

							/**
							 * [tMap_3 main ] stop
							 */

							/**
							 * [tMap_3 process_data_begin ] start
							 */

							currentComponent = "tMap_3";

							/**
							 * [tMap_3 process_data_begin ] stop
							 */
// Start of branch "qualites_conventions"
							if (qualites_conventions != null) {

								/**
								 * [tUnite_1 main ] start
								 */

								currentComponent = "tUnite_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "qualites_conventions");
								}

//////////

// for output
								merged = new mergedStruct();

								merged.qualite_beneficiaire_id = qualites_conventions.qualite_beneficiaire_id;
								merged.nom_qualite_beneficiaire = qualites_conventions.nom_qualite_beneficiaire;

								nb_line_tUnite_1++;

//////////

								tos_count_tUnite_1++;

								/**
								 * [tUnite_1 main ] stop
								 */

								/**
								 * [tUnite_1 process_data_begin ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_begin ] stop
								 */

								/**
								 * [tFilterRow_1 main ] start
								 */

								currentComponent = "tFilterRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "merged");
								}

								filtered = null;
								Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
								ope_tFilterRow_1.matches((merged.qualite_beneficiaire_id != null),
										"qualite_beneficiaire_id!=null failed");
								ope_tFilterRow_1.matches((merged.nom_qualite_beneficiaire != null),
										"nom_qualite_beneficiaire!=null failed");

								if (ope_tFilterRow_1.getMatchFlag()) {
									if (filtered == null) {
										filtered = new filteredStruct();
									}
									filtered.qualite_beneficiaire_id = merged.qualite_beneficiaire_id;
									filtered.nom_qualite_beneficiaire = merged.nom_qualite_beneficiaire;
									nb_line_ok_tFilterRow_1++;
								} else {
									nb_line_reject_tFilterRow_1++;
								}

								nb_line_tFilterRow_1++;

								tos_count_tFilterRow_1++;

								/**
								 * [tFilterRow_1 main ] stop
								 */

								/**
								 * [tFilterRow_1 process_data_begin ] start
								 */

								currentComponent = "tFilterRow_1";

								/**
								 * [tFilterRow_1 process_data_begin ] stop
								 */
// Start of branch "filtered"
								if (filtered != null) {

									/**
									 * [tUniqRow_1 main ] start
									 */

									currentComponent = "tUniqRow_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "filtered");
									}

									qualites = null;
									if (filtered.qualite_beneficiaire_id == null) {
										finder_tUniqRow_1.qualite_beneficiaire_id = null;
									} else {
										finder_tUniqRow_1.qualite_beneficiaire_id = filtered.qualite_beneficiaire_id
												.toLowerCase();
									}
									if (filtered.nom_qualite_beneficiaire == null) {
										finder_tUniqRow_1.nom_qualite_beneficiaire = null;
									} else {
										finder_tUniqRow_1.nom_qualite_beneficiaire = filtered.nom_qualite_beneficiaire
												.toLowerCase();
									}
									finder_tUniqRow_1.hashCodeDirty = true;
									if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
										KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

										if (filtered.qualite_beneficiaire_id == null) {
											new_tUniqRow_1.qualite_beneficiaire_id = null;
										} else {
											new_tUniqRow_1.qualite_beneficiaire_id = filtered.qualite_beneficiaire_id
													.toLowerCase();
										}
										if (filtered.nom_qualite_beneficiaire == null) {
											new_tUniqRow_1.nom_qualite_beneficiaire = null;
										} else {
											new_tUniqRow_1.nom_qualite_beneficiaire = filtered.nom_qualite_beneficiaire
													.toLowerCase();
										}

										keystUniqRow_1.add(new_tUniqRow_1);
										if (qualites == null) {

											qualites = new qualitesStruct();
										}
										qualites.qualite_beneficiaire_id = filtered.qualite_beneficiaire_id;
										qualites.nom_qualite_beneficiaire = filtered.nom_qualite_beneficiaire;
										nb_uniques_tUniqRow_1++;
									} else {
										nb_duplicates_tUniqRow_1++;
									}

									tos_count_tUniqRow_1++;

									/**
									 * [tUniqRow_1 main ] stop
									 */

									/**
									 * [tUniqRow_1 process_data_begin ] start
									 */

									currentComponent = "tUniqRow_1";

									/**
									 * [tUniqRow_1 process_data_begin ] stop
									 */
// Start of branch "qualites"
									if (qualites != null) {

										/**
										 * [tDBOutput_1 main ] start
										 */

										currentComponent = "tDBOutput_1";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "qualites");
										}

										row3 = null;
										whetherReject_tDBOutput_1 = false;
										if (qualites.qualite_beneficiaire_id == null) {
											pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_1.setString(1, qualites.qualite_beneficiaire_id);
										}

										if (qualites.nom_qualite_beneficiaire == null) {
											pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_1.setString(2, qualites.nom_qualite_beneficiaire);
										}

										pstmt_tDBOutput_1.addBatch();
										nb_line_tDBOutput_1++;

										batchSizeCounter_tDBOutput_1++;
										if (!whetherReject_tDBOutput_1) {
											row3 = new row3Struct();
											row3.qualite_beneficiaire_id = qualites.qualite_beneficiaire_id;
											row3.nom_qualite_beneficiaire = qualites.nom_qualite_beneficiaire;
										}
										if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
											try {
												int countSum_tDBOutput_1 = 0;
												for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
													countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED
															? 0
															: 1);
												}
												insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
											} catch (java.sql.BatchUpdateException e) {
												int countSum_tDBOutput_1 = 0;
												for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
													countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
															: countEach_tDBOutput_1);
												}
												insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
												System.err.println(e.getMessage());
											}

											batchSizeCounter_tDBOutput_1 = 0;
										}
										commitCounter_tDBOutput_1++;

										if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

											try {
												int countSum_tDBOutput_1 = 0;
												for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
													countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
												}
												insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
											} catch (java.sql.BatchUpdateException e) {
												int countSum_tDBOutput_1 = 0;
												for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
													countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
															: countEach_tDBOutput_1);
												}
												insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
												System.err.println(e.getMessage());

											}
											conn_tDBOutput_1.commit();
											commitCounter_tDBOutput_1 = 0;

										}

										tos_count_tDBOutput_1++;

										/**
										 * [tDBOutput_1 main ] stop
										 */

										/**
										 * [tDBOutput_1 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_1";

										/**
										 * [tDBOutput_1 process_data_begin ] stop
										 */
// Start of branch "row3"
										if (row3 != null) {

											/**
											 * [tLogRow_1 main ] start
											 */

											currentComponent = "tLogRow_1";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
											}

///////////////////////		

											String[] row_tLogRow_1 = new String[2];

											if (row3.qualite_beneficiaire_id != null) { //
												row_tLogRow_1[0] = String.valueOf(row3.qualite_beneficiaire_id);

											} //

											if (row3.nom_qualite_beneficiaire != null) { //
												row_tLogRow_1[1] = String.valueOf(row3.nom_qualite_beneficiaire);

											} //

											util_tLogRow_1.addRow(row_tLogRow_1);
											nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

											tos_count_tLogRow_1++;

											/**
											 * [tLogRow_1 main ] stop
											 */

											/**
											 * [tLogRow_1 process_data_begin ] start
											 */

											currentComponent = "tLogRow_1";

											/**
											 * [tLogRow_1 process_data_begin ] stop
											 */

											/**
											 * [tLogRow_1 process_data_end ] start
											 */

											currentComponent = "tLogRow_1";

											/**
											 * [tLogRow_1 process_data_end ] stop
											 */

										} // End of branch "row3"

										/**
										 * [tDBOutput_1 process_data_end ] start
										 */

										currentComponent = "tDBOutput_1";

										/**
										 * [tDBOutput_1 process_data_end ] stop
										 */

									} // End of branch "qualites"

									/**
									 * [tUniqRow_1 process_data_end ] start
									 */

									currentComponent = "tUniqRow_1";

									/**
									 * [tUniqRow_1 process_data_end ] stop
									 */

								} // End of branch "filtered"

								/**
								 * [tFilterRow_1 process_data_end ] start
								 */

								currentComponent = "tFilterRow_1";

								/**
								 * [tFilterRow_1 process_data_end ] stop
								 */

								/**
								 * [tUnite_1 process_data_end ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_end ] stop
								 */

							} // End of branch "qualites_conventions"

							/**
							 * [tMap_3 process_data_end ] start
							 */

							currentComponent = "tMap_3";

							/**
							 * [tMap_3 process_data_end ] stop
							 */

						} // End of branch "conventions"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("C:/BI/transparence-sante/data/data.gouv/conventions.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "conventions");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "qualites_remunerations", "qualites_avantages",
							"qualites_conventions");
				}

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "merged");
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "filtered");
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (batchSizeCounter_tDBOutput_1 != 0) {
						int countSum_tDBOutput_1 = 0;

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_1 = 0;

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0) {

					conn_tDBOutput_1.commit();

				}

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "qualites");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final qualite_beneficiaire_dim qualite_beneficiaire_dimClass = new qualite_beneficiaire_dim();

		int exitCode = qualite_beneficiaire_dimClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = qualite_beneficiaire_dim.class.getClassLoader().getResourceAsStream(
					"transparence_sante_bi/qualite_beneficiaire_dim_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = qualite_beneficiaire_dim.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_3) {
			globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_3.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : qualite_beneficiaire_dim");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 211279 characters generated by Talend Open Studio for Data Integration on the
 * 7 janvier 2021 03:30:04 CET
 ************************************************************************************************/