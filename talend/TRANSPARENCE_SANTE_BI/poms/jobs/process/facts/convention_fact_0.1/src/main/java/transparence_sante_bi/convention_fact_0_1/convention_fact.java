// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package transparence_sante_bi.convention_fact_0_1;

import routines.DateTransformations;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.Relational;
import routines.EvenementConventionIdGenerator;
import routines.Mathematical;
import routines.Numeric;
import routines.MyStringRoutine;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.ObjetConventionIdGenerator;
import routines.StringHandling;
import routines.TalendDate;
import routines.AdressesCleanerV2;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: convention_fact Purpose: Remplissage de la table des faits des
 * conventions<br>
 * Description: contient les différentes informations sur les conventions + des
 * clés vers les dimensions concernées. Voir doc :
 * https://github.com/DorianNaaji/transparence-sante <br>
 * 
 * @author haytham.elghazel@univ-lyon1.fr
 * @version 7.3.1.20200219_1130
 * @status DEV
 */
public class convention_fact implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "convention_fact";
	private final String projectName = "TRANSPARENCE_SANTE_BI";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					convention_fact.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(convention_fact.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_entreprises_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class conventions_uniquesStruct
			implements routines.system.IPersistableRow<conventions_uniquesStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_convention_fact = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ligne_id;

		public String getLigne_id() {
			return this.ligne_id;
		}

		public String entreprise_id;

		public String getEntreprise_id() {
			return this.entreprise_id;
		}

		public String beneficiaire_id;

		public String getBeneficiaire_id() {
			return this.beneficiaire_id;
		}

		public String categorie_beneficiaire_id;

		public String getCategorie_beneficiaire_id() {
			return this.categorie_beneficiaire_id;
		}

		public String qualite_beneficiaire_id;

		public String getQualite_beneficiaire_id() {
			return this.qualite_beneficiaire_id;
		}

		public String titre_beneficiaire_id;

		public String getTitre_beneficiaire_id() {
			return this.titre_beneficiaire_id;
		}

		public String adresse_beneficiaire_id;

		public String getAdresse_beneficiaire_id() {
			return this.adresse_beneficiaire_id;
		}

		public String adresse_entreprise_id;

		public String getAdresse_entreprise_id() {
			return this.adresse_entreprise_id;
		}

		public String specialite_beneficiaire_id;

		public String getSpecialite_beneficiaire_id() {
			return this.specialite_beneficiaire_id;
		}

		public String secteur_activite_entreprise_id;

		public String getSecteur_activite_entreprise_id() {
			return this.secteur_activite_entreprise_id;
		}

		public int objet_convention_id;

		public int getObjet_convention_id() {
			return this.objet_convention_id;
		}

		public int evenement_convention_id;

		public int getEvenement_convention_id() {
			return this.evenement_convention_id;
		}

		public java.util.Date date_debut_convention;

		public java.util.Date getDate_debut_convention() {
			return this.date_debut_convention;
		}

		public java.util.Date date_fin_convention;

		public java.util.Date getDate_fin_convention() {
			return this.date_fin_convention;
		}

		public java.util.Date date_signature_convention;

		public java.util.Date getDate_signature_convention() {
			return this.date_signature_convention;
		}

		public int montant_convention;

		public int getMontant_convention() {
			return this.montant_convention;
		}

		public int duree_convention;

		public int getDuree_convention() {
			return this.duree_convention;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ligne_id == null) ? 0 : this.ligne_id.hashCode());

				result = prime * result + ((this.entreprise_id == null) ? 0 : this.entreprise_id.hashCode());

				result = prime * result
						+ ((this.date_signature_convention == null) ? 0 : this.date_signature_convention.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final conventions_uniquesStruct other = (conventions_uniquesStruct) obj;

			if (this.ligne_id == null) {
				if (other.ligne_id != null)
					return false;

			} else if (!this.ligne_id.equals(other.ligne_id))

				return false;

			if (this.entreprise_id == null) {
				if (other.entreprise_id != null)
					return false;

			} else if (!this.entreprise_id.equals(other.entreprise_id))

				return false;

			if (this.date_signature_convention == null) {
				if (other.date_signature_convention != null)
					return false;

			} else if (!this.date_signature_convention.equals(other.date_signature_convention))

				return false;

			return true;
		}

		public void copyDataTo(conventions_uniquesStruct other) {

			other.ligne_id = this.ligne_id;
			other.entreprise_id = this.entreprise_id;
			other.beneficiaire_id = this.beneficiaire_id;
			other.categorie_beneficiaire_id = this.categorie_beneficiaire_id;
			other.qualite_beneficiaire_id = this.qualite_beneficiaire_id;
			other.titre_beneficiaire_id = this.titre_beneficiaire_id;
			other.adresse_beneficiaire_id = this.adresse_beneficiaire_id;
			other.adresse_entreprise_id = this.adresse_entreprise_id;
			other.specialite_beneficiaire_id = this.specialite_beneficiaire_id;
			other.secteur_activite_entreprise_id = this.secteur_activite_entreprise_id;
			other.objet_convention_id = this.objet_convention_id;
			other.evenement_convention_id = this.evenement_convention_id;
			other.date_debut_convention = this.date_debut_convention;
			other.date_fin_convention = this.date_fin_convention;
			other.date_signature_convention = this.date_signature_convention;
			other.montant_convention = this.montant_convention;
			other.duree_convention = this.duree_convention;

		}

		public void copyKeysDataTo(conventions_uniquesStruct other) {

			other.ligne_id = this.ligne_id;
			other.entreprise_id = this.entreprise_id;
			other.date_signature_convention = this.date_signature_convention;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_convention_fact) {

				try {

					int length = 0;

					this.ligne_id = readString(dis);

					this.entreprise_id = readString(dis);

					this.beneficiaire_id = readString(dis);

					this.categorie_beneficiaire_id = readString(dis);

					this.qualite_beneficiaire_id = readString(dis);

					this.titre_beneficiaire_id = readString(dis);

					this.adresse_beneficiaire_id = readString(dis);

					this.adresse_entreprise_id = readString(dis);

					this.specialite_beneficiaire_id = readString(dis);

					this.secteur_activite_entreprise_id = readString(dis);

					this.objet_convention_id = dis.readInt();

					this.evenement_convention_id = dis.readInt();

					this.date_debut_convention = readDate(dis);

					this.date_fin_convention = readDate(dis);

					this.date_signature_convention = readDate(dis);

					this.montant_convention = dis.readInt();

					this.duree_convention = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ligne_id, dos);

				// String

				writeString(this.entreprise_id, dos);

				// String

				writeString(this.beneficiaire_id, dos);

				// String

				writeString(this.categorie_beneficiaire_id, dos);

				// String

				writeString(this.qualite_beneficiaire_id, dos);

				// String

				writeString(this.titre_beneficiaire_id, dos);

				// String

				writeString(this.adresse_beneficiaire_id, dos);

				// String

				writeString(this.adresse_entreprise_id, dos);

				// String

				writeString(this.specialite_beneficiaire_id, dos);

				// String

				writeString(this.secteur_activite_entreprise_id, dos);

				// int

				dos.writeInt(this.objet_convention_id);

				// int

				dos.writeInt(this.evenement_convention_id);

				// java.util.Date

				writeDate(this.date_debut_convention, dos);

				// java.util.Date

				writeDate(this.date_fin_convention, dos);

				// java.util.Date

				writeDate(this.date_signature_convention, dos);

				// int

				dos.writeInt(this.montant_convention);

				// int

				dos.writeInt(this.duree_convention);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ligne_id=" + ligne_id);
			sb.append(",entreprise_id=" + entreprise_id);
			sb.append(",beneficiaire_id=" + beneficiaire_id);
			sb.append(",categorie_beneficiaire_id=" + categorie_beneficiaire_id);
			sb.append(",qualite_beneficiaire_id=" + qualite_beneficiaire_id);
			sb.append(",titre_beneficiaire_id=" + titre_beneficiaire_id);
			sb.append(",adresse_beneficiaire_id=" + adresse_beneficiaire_id);
			sb.append(",adresse_entreprise_id=" + adresse_entreprise_id);
			sb.append(",specialite_beneficiaire_id=" + specialite_beneficiaire_id);
			sb.append(",secteur_activite_entreprise_id=" + secteur_activite_entreprise_id);
			sb.append(",objet_convention_id=" + String.valueOf(objet_convention_id));
			sb.append(",evenement_convention_id=" + String.valueOf(evenement_convention_id));
			sb.append(",date_debut_convention=" + String.valueOf(date_debut_convention));
			sb.append(",date_fin_convention=" + String.valueOf(date_fin_convention));
			sb.append(",date_signature_convention=" + String.valueOf(date_signature_convention));
			sb.append(",montant_convention=" + String.valueOf(montant_convention));
			sb.append(",duree_convention=" + String.valueOf(duree_convention));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(conventions_uniquesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ligne_id, other.ligne_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.entreprise_id, other.entreprise_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.date_signature_convention, other.date_signature_convention);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_convention_fact = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[0];

		public String ligne_id;

		public String getLigne_id() {
			return this.ligne_id;
		}

		public String entreprise_id;

		public String getEntreprise_id() {
			return this.entreprise_id;
		}

		public String beneficiaire_id;

		public String getBeneficiaire_id() {
			return this.beneficiaire_id;
		}

		public String categorie_beneficiaire_id;

		public String getCategorie_beneficiaire_id() {
			return this.categorie_beneficiaire_id;
		}

		public String qualite_beneficiaire_id;

		public String getQualite_beneficiaire_id() {
			return this.qualite_beneficiaire_id;
		}

		public String titre_beneficiaire_id;

		public String getTitre_beneficiaire_id() {
			return this.titre_beneficiaire_id;
		}

		public String adresse_beneficiaire_id;

		public String getAdresse_beneficiaire_id() {
			return this.adresse_beneficiaire_id;
		}

		public String adresse_entreprise_id;

		public String getAdresse_entreprise_id() {
			return this.adresse_entreprise_id;
		}

		public String specialite_beneficiaire_id;

		public String getSpecialite_beneficiaire_id() {
			return this.specialite_beneficiaire_id;
		}

		public String secteur_activite_entreprise_id;

		public String getSecteur_activite_entreprise_id() {
			return this.secteur_activite_entreprise_id;
		}

		public int objet_convention_id;

		public int getObjet_convention_id() {
			return this.objet_convention_id;
		}

		public int evenement_convention_id;

		public int getEvenement_convention_id() {
			return this.evenement_convention_id;
		}

		public java.util.Date date_debut_convention;

		public java.util.Date getDate_debut_convention() {
			return this.date_debut_convention;
		}

		public java.util.Date date_fin_convention;

		public java.util.Date getDate_fin_convention() {
			return this.date_fin_convention;
		}

		public java.util.Date date_signature_convention;

		public java.util.Date getDate_signature_convention() {
			return this.date_signature_convention;
		}

		public int montant_convention;

		public int getMontant_convention() {
			return this.montant_convention;
		}

		public int duree_convention;

		public int getDuree_convention() {
			return this.duree_convention;
		}

		public String composite_key;

		public String getComposite_key() {
			return this.composite_key;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_convention_fact) {

				try {

					int length = 0;

					this.ligne_id = readString(dis);

					this.entreprise_id = readString(dis);

					this.beneficiaire_id = readString(dis);

					this.categorie_beneficiaire_id = readString(dis);

					this.qualite_beneficiaire_id = readString(dis);

					this.titre_beneficiaire_id = readString(dis);

					this.adresse_beneficiaire_id = readString(dis);

					this.adresse_entreprise_id = readString(dis);

					this.specialite_beneficiaire_id = readString(dis);

					this.secteur_activite_entreprise_id = readString(dis);

					this.objet_convention_id = dis.readInt();

					this.evenement_convention_id = dis.readInt();

					this.date_debut_convention = readDate(dis);

					this.date_fin_convention = readDate(dis);

					this.date_signature_convention = readDate(dis);

					this.montant_convention = dis.readInt();

					this.duree_convention = dis.readInt();

					this.composite_key = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ligne_id, dos);

				// String

				writeString(this.entreprise_id, dos);

				// String

				writeString(this.beneficiaire_id, dos);

				// String

				writeString(this.categorie_beneficiaire_id, dos);

				// String

				writeString(this.qualite_beneficiaire_id, dos);

				// String

				writeString(this.titre_beneficiaire_id, dos);

				// String

				writeString(this.adresse_beneficiaire_id, dos);

				// String

				writeString(this.adresse_entreprise_id, dos);

				// String

				writeString(this.specialite_beneficiaire_id, dos);

				// String

				writeString(this.secteur_activite_entreprise_id, dos);

				// int

				dos.writeInt(this.objet_convention_id);

				// int

				dos.writeInt(this.evenement_convention_id);

				// java.util.Date

				writeDate(this.date_debut_convention, dos);

				// java.util.Date

				writeDate(this.date_fin_convention, dos);

				// java.util.Date

				writeDate(this.date_signature_convention, dos);

				// int

				dos.writeInt(this.montant_convention);

				// int

				dos.writeInt(this.duree_convention);

				// String

				writeString(this.composite_key, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ligne_id=" + ligne_id);
			sb.append(",entreprise_id=" + entreprise_id);
			sb.append(",beneficiaire_id=" + beneficiaire_id);
			sb.append(",categorie_beneficiaire_id=" + categorie_beneficiaire_id);
			sb.append(",qualite_beneficiaire_id=" + qualite_beneficiaire_id);
			sb.append(",titre_beneficiaire_id=" + titre_beneficiaire_id);
			sb.append(",adresse_beneficiaire_id=" + adresse_beneficiaire_id);
			sb.append(",adresse_entreprise_id=" + adresse_entreprise_id);
			sb.append(",specialite_beneficiaire_id=" + specialite_beneficiaire_id);
			sb.append(",secteur_activite_entreprise_id=" + secteur_activite_entreprise_id);
			sb.append(",objet_convention_id=" + String.valueOf(objet_convention_id));
			sb.append(",evenement_convention_id=" + String.valueOf(evenement_convention_id));
			sb.append(",date_debut_convention=" + String.valueOf(date_debut_convention));
			sb.append(",date_fin_convention=" + String.valueOf(date_fin_convention));
			sb.append(",date_signature_convention=" + String.valueOf(date_signature_convention));
			sb.append(",montant_convention=" + String.valueOf(montant_convention));
			sb.append(",duree_convention=" + String.valueOf(duree_convention));
			sb.append(",composite_key=" + composite_key);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class conventions_factStruct implements routines.system.IPersistableRow<conventions_factStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_convention_fact = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ligne_id;

		public String getLigne_id() {
			return this.ligne_id;
		}

		public String entreprise_id;

		public String getEntreprise_id() {
			return this.entreprise_id;
		}

		public String beneficiaire_id;

		public String getBeneficiaire_id() {
			return this.beneficiaire_id;
		}

		public String categorie_beneficiaire_id;

		public String getCategorie_beneficiaire_id() {
			return this.categorie_beneficiaire_id;
		}

		public String qualite_beneficiaire_id;

		public String getQualite_beneficiaire_id() {
			return this.qualite_beneficiaire_id;
		}

		public String titre_beneficiaire_id;

		public String getTitre_beneficiaire_id() {
			return this.titre_beneficiaire_id;
		}

		public String adresse_beneficiaire_id;

		public String getAdresse_beneficiaire_id() {
			return this.adresse_beneficiaire_id;
		}

		public String adresse_entreprise_id;

		public String getAdresse_entreprise_id() {
			return this.adresse_entreprise_id;
		}

		public String specialite_beneficiaire_id;

		public String getSpecialite_beneficiaire_id() {
			return this.specialite_beneficiaire_id;
		}

		public String secteur_activite_entreprise_id;

		public String getSecteur_activite_entreprise_id() {
			return this.secteur_activite_entreprise_id;
		}

		public int objet_convention_id;

		public int getObjet_convention_id() {
			return this.objet_convention_id;
		}

		public int evenement_convention_id;

		public int getEvenement_convention_id() {
			return this.evenement_convention_id;
		}

		public java.util.Date date_debut_convention;

		public java.util.Date getDate_debut_convention() {
			return this.date_debut_convention;
		}

		public java.util.Date date_fin_convention;

		public java.util.Date getDate_fin_convention() {
			return this.date_fin_convention;
		}

		public java.util.Date date_signature_convention;

		public java.util.Date getDate_signature_convention() {
			return this.date_signature_convention;
		}

		public int montant_convention;

		public int getMontant_convention() {
			return this.montant_convention;
		}

		public int duree_convention;

		public int getDuree_convention() {
			return this.duree_convention;
		}

		public String composite_key;

		public String getComposite_key() {
			return this.composite_key;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ligne_id == null) ? 0 : this.ligne_id.hashCode());

				result = prime * result + ((this.entreprise_id == null) ? 0 : this.entreprise_id.hashCode());

				result = prime * result
						+ ((this.date_signature_convention == null) ? 0 : this.date_signature_convention.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final conventions_factStruct other = (conventions_factStruct) obj;

			if (this.ligne_id == null) {
				if (other.ligne_id != null)
					return false;

			} else if (!this.ligne_id.equals(other.ligne_id))

				return false;

			if (this.entreprise_id == null) {
				if (other.entreprise_id != null)
					return false;

			} else if (!this.entreprise_id.equals(other.entreprise_id))

				return false;

			if (this.date_signature_convention == null) {
				if (other.date_signature_convention != null)
					return false;

			} else if (!this.date_signature_convention.equals(other.date_signature_convention))

				return false;

			return true;
		}

		public void copyDataTo(conventions_factStruct other) {

			other.ligne_id = this.ligne_id;
			other.entreprise_id = this.entreprise_id;
			other.beneficiaire_id = this.beneficiaire_id;
			other.categorie_beneficiaire_id = this.categorie_beneficiaire_id;
			other.qualite_beneficiaire_id = this.qualite_beneficiaire_id;
			other.titre_beneficiaire_id = this.titre_beneficiaire_id;
			other.adresse_beneficiaire_id = this.adresse_beneficiaire_id;
			other.adresse_entreprise_id = this.adresse_entreprise_id;
			other.specialite_beneficiaire_id = this.specialite_beneficiaire_id;
			other.secteur_activite_entreprise_id = this.secteur_activite_entreprise_id;
			other.objet_convention_id = this.objet_convention_id;
			other.evenement_convention_id = this.evenement_convention_id;
			other.date_debut_convention = this.date_debut_convention;
			other.date_fin_convention = this.date_fin_convention;
			other.date_signature_convention = this.date_signature_convention;
			other.montant_convention = this.montant_convention;
			other.duree_convention = this.duree_convention;
			other.composite_key = this.composite_key;

		}

		public void copyKeysDataTo(conventions_factStruct other) {

			other.ligne_id = this.ligne_id;
			other.entreprise_id = this.entreprise_id;
			other.date_signature_convention = this.date_signature_convention;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_convention_fact) {

				try {

					int length = 0;

					this.ligne_id = readString(dis);

					this.entreprise_id = readString(dis);

					this.beneficiaire_id = readString(dis);

					this.categorie_beneficiaire_id = readString(dis);

					this.qualite_beneficiaire_id = readString(dis);

					this.titre_beneficiaire_id = readString(dis);

					this.adresse_beneficiaire_id = readString(dis);

					this.adresse_entreprise_id = readString(dis);

					this.specialite_beneficiaire_id = readString(dis);

					this.secteur_activite_entreprise_id = readString(dis);

					this.objet_convention_id = dis.readInt();

					this.evenement_convention_id = dis.readInt();

					this.date_debut_convention = readDate(dis);

					this.date_fin_convention = readDate(dis);

					this.date_signature_convention = readDate(dis);

					this.montant_convention = dis.readInt();

					this.duree_convention = dis.readInt();

					this.composite_key = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ligne_id, dos);

				// String

				writeString(this.entreprise_id, dos);

				// String

				writeString(this.beneficiaire_id, dos);

				// String

				writeString(this.categorie_beneficiaire_id, dos);

				// String

				writeString(this.qualite_beneficiaire_id, dos);

				// String

				writeString(this.titre_beneficiaire_id, dos);

				// String

				writeString(this.adresse_beneficiaire_id, dos);

				// String

				writeString(this.adresse_entreprise_id, dos);

				// String

				writeString(this.specialite_beneficiaire_id, dos);

				// String

				writeString(this.secteur_activite_entreprise_id, dos);

				// int

				dos.writeInt(this.objet_convention_id);

				// int

				dos.writeInt(this.evenement_convention_id);

				// java.util.Date

				writeDate(this.date_debut_convention, dos);

				// java.util.Date

				writeDate(this.date_fin_convention, dos);

				// java.util.Date

				writeDate(this.date_signature_convention, dos);

				// int

				dos.writeInt(this.montant_convention);

				// int

				dos.writeInt(this.duree_convention);

				// String

				writeString(this.composite_key, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ligne_id=" + ligne_id);
			sb.append(",entreprise_id=" + entreprise_id);
			sb.append(",beneficiaire_id=" + beneficiaire_id);
			sb.append(",categorie_beneficiaire_id=" + categorie_beneficiaire_id);
			sb.append(",qualite_beneficiaire_id=" + qualite_beneficiaire_id);
			sb.append(",titre_beneficiaire_id=" + titre_beneficiaire_id);
			sb.append(",adresse_beneficiaire_id=" + adresse_beneficiaire_id);
			sb.append(",adresse_entreprise_id=" + adresse_entreprise_id);
			sb.append(",specialite_beneficiaire_id=" + specialite_beneficiaire_id);
			sb.append(",secteur_activite_entreprise_id=" + secteur_activite_entreprise_id);
			sb.append(",objet_convention_id=" + String.valueOf(objet_convention_id));
			sb.append(",evenement_convention_id=" + String.valueOf(evenement_convention_id));
			sb.append(",date_debut_convention=" + String.valueOf(date_debut_convention));
			sb.append(",date_fin_convention=" + String.valueOf(date_fin_convention));
			sb.append(",date_signature_convention=" + String.valueOf(date_signature_convention));
			sb.append(",montant_convention=" + String.valueOf(montant_convention));
			sb.append(",duree_convention=" + String.valueOf(duree_convention));
			sb.append(",composite_key=" + composite_key);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(conventions_factStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ligne_id, other.ligne_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.entreprise_id, other.entreprise_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.date_signature_convention, other.date_signature_convention);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class conventionsStruct implements routines.system.IPersistableRow<conventionsStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_convention_fact = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[0];

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String denomination_sociale;

		public String getDenomination_sociale() {
			return this.denomination_sociale;
		}

		public String ligne_identifiant;

		public String getLigne_identifiant() {
			return this.ligne_identifiant;
		}

		public Character ligne_rectification;

		public Character getLigne_rectification() {
			return this.ligne_rectification;
		}

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String categorie;

		public String getCategorie() {
			return this.categorie;
		}

		public String benef_nom;

		public String getBenef_nom() {
			return this.benef_nom;
		}

		public String benef_prenom;

		public String getBenef_prenom() {
			return this.benef_prenom;
		}

		public String benef_qualite_code;

		public String getBenef_qualite_code() {
			return this.benef_qualite_code;
		}

		public String qualite;

		public String getQualite() {
			return this.qualite;
		}

		public String benef_adresse1;

		public String getBenef_adresse1() {
			return this.benef_adresse1;
		}

		public String benef_adresse2;

		public String getBenef_adresse2() {
			return this.benef_adresse2;
		}

		public String benef_adresse3;

		public String getBenef_adresse3() {
			return this.benef_adresse3;
		}

		public String benef_adresse4;

		public String getBenef_adresse4() {
			return this.benef_adresse4;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_ville;

		public String getBenef_ville() {
			return this.benef_ville;
		}

		public String benef_pays_code;

		public String getBenef_pays_code() {
			return this.benef_pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String benef_titre_code;

		public String getBenef_titre_code() {
			return this.benef_titre_code;
		}

		public String benef_titre_libelle;

		public String getBenef_titre_libelle() {
			return this.benef_titre_libelle;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_speicalite_libelle;

		public String getBenef_speicalite_libelle() {
			return this.benef_speicalite_libelle;
		}

		public String benef_identifiant_type_code;

		public String getBenef_identifiant_type_code() {
			return this.benef_identifiant_type_code;
		}

		public String identifiant_type;

		public String getIdentifiant_type() {
			return this.identifiant_type;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String benef_etablissement;

		public String getBenef_etablissement() {
			return this.benef_etablissement;
		}

		public String benef_etablissement_codepostal;

		public String getBenef_etablissement_codepostal() {
			return this.benef_etablissement_codepostal;
		}

		public String benef_etablissement_ville;

		public String getBenef_etablissement_ville() {
			return this.benef_etablissement_ville;
		}

		public String benef_denomination_sociale;

		public String getBenef_denomination_sociale() {
			return this.benef_denomination_sociale;
		}

		public String benef_objet_social;

		public String getBenef_objet_social() {
			return this.benef_objet_social;
		}

		public String ligne_type;

		public String getLigne_type() {
			return this.ligne_type;
		}

		public String conv_date_signature;

		public String getConv_date_signature() {
			return this.conv_date_signature;
		}

		public String conv_objet;

		public String getConv_objet() {
			return this.conv_objet;
		}

		public String conv_objet_autre;

		public String getConv_objet_autre() {
			return this.conv_objet_autre;
		}

		public String conv_date_debut;

		public String getConv_date_debut() {
			return this.conv_date_debut;
		}

		public String conv_date_fin;

		public String getConv_date_fin() {
			return this.conv_date_fin;
		}

		public String conv_montant_ttc;

		public String getConv_montant_ttc() {
			return this.conv_montant_ttc;
		}

		public String conv_manifestation_date;

		public String getConv_manifestation_date() {
			return this.conv_manifestation_date;
		}

		public String conv_manifestation_nom;

		public String getConv_manifestation_nom() {
			return this.conv_manifestation_nom;
		}

		public String conv_manifestation_lieu;

		public String getConv_manifestation_lieu() {
			return this.conv_manifestation_lieu;
		}

		public String conv_manifestation_organisateur;

		public String getConv_manifestation_organisateur() {
			return this.conv_manifestation_organisateur;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_convention_fact) {

				try {

					int length = 0;

					this.entreprise_identifiant = readString(dis);

					this.denomination_sociale = readString(dis);

					this.ligne_identifiant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ligne_rectification = null;
					} else {
						this.ligne_rectification = dis.readChar();
					}

					this.benef_categorie_code = readString(dis);

					this.categorie = readString(dis);

					this.benef_nom = readString(dis);

					this.benef_prenom = readString(dis);

					this.benef_qualite_code = readString(dis);

					this.qualite = readString(dis);

					this.benef_adresse1 = readString(dis);

					this.benef_adresse2 = readString(dis);

					this.benef_adresse3 = readString(dis);

					this.benef_adresse4 = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_ville = readString(dis);

					this.benef_pays_code = readString(dis);

					this.pays = readString(dis);

					this.benef_titre_code = readString(dis);

					this.benef_titre_libelle = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_speicalite_libelle = readString(dis);

					this.benef_identifiant_type_code = readString(dis);

					this.identifiant_type = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.benef_etablissement = readString(dis);

					this.benef_etablissement_codepostal = readString(dis);

					this.benef_etablissement_ville = readString(dis);

					this.benef_denomination_sociale = readString(dis);

					this.benef_objet_social = readString(dis);

					this.ligne_type = readString(dis);

					this.conv_date_signature = readString(dis);

					this.conv_objet = readString(dis);

					this.conv_objet_autre = readString(dis);

					this.conv_date_debut = readString(dis);

					this.conv_date_fin = readString(dis);

					this.conv_montant_ttc = readString(dis);

					this.conv_manifestation_date = readString(dis);

					this.conv_manifestation_nom = readString(dis);

					this.conv_manifestation_lieu = readString(dis);

					this.conv_manifestation_organisateur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entreprise_identifiant, dos);

				// String

				writeString(this.denomination_sociale, dos);

				// String

				writeString(this.ligne_identifiant, dos);

				// Character

				if (this.ligne_rectification == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.ligne_rectification);
				}

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.categorie, dos);

				// String

				writeString(this.benef_nom, dos);

				// String

				writeString(this.benef_prenom, dos);

				// String

				writeString(this.benef_qualite_code, dos);

				// String

				writeString(this.qualite, dos);

				// String

				writeString(this.benef_adresse1, dos);

				// String

				writeString(this.benef_adresse2, dos);

				// String

				writeString(this.benef_adresse3, dos);

				// String

				writeString(this.benef_adresse4, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_ville, dos);

				// String

				writeString(this.benef_pays_code, dos);

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.benef_titre_code, dos);

				// String

				writeString(this.benef_titre_libelle, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_speicalite_libelle, dos);

				// String

				writeString(this.benef_identifiant_type_code, dos);

				// String

				writeString(this.identifiant_type, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.benef_etablissement, dos);

				// String

				writeString(this.benef_etablissement_codepostal, dos);

				// String

				writeString(this.benef_etablissement_ville, dos);

				// String

				writeString(this.benef_denomination_sociale, dos);

				// String

				writeString(this.benef_objet_social, dos);

				// String

				writeString(this.ligne_type, dos);

				// String

				writeString(this.conv_date_signature, dos);

				// String

				writeString(this.conv_objet, dos);

				// String

				writeString(this.conv_objet_autre, dos);

				// String

				writeString(this.conv_date_debut, dos);

				// String

				writeString(this.conv_date_fin, dos);

				// String

				writeString(this.conv_montant_ttc, dos);

				// String

				writeString(this.conv_manifestation_date, dos);

				// String

				writeString(this.conv_manifestation_nom, dos);

				// String

				writeString(this.conv_manifestation_lieu, dos);

				// String

				writeString(this.conv_manifestation_organisateur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",denomination_sociale=" + denomination_sociale);
			sb.append(",ligne_identifiant=" + ligne_identifiant);
			sb.append(",ligne_rectification=" + String.valueOf(ligne_rectification));
			sb.append(",benef_categorie_code=" + benef_categorie_code);
			sb.append(",categorie=" + categorie);
			sb.append(",benef_nom=" + benef_nom);
			sb.append(",benef_prenom=" + benef_prenom);
			sb.append(",benef_qualite_code=" + benef_qualite_code);
			sb.append(",qualite=" + qualite);
			sb.append(",benef_adresse1=" + benef_adresse1);
			sb.append(",benef_adresse2=" + benef_adresse2);
			sb.append(",benef_adresse3=" + benef_adresse3);
			sb.append(",benef_adresse4=" + benef_adresse4);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_ville=" + benef_ville);
			sb.append(",benef_pays_code=" + benef_pays_code);
			sb.append(",pays=" + pays);
			sb.append(",benef_titre_code=" + benef_titre_code);
			sb.append(",benef_titre_libelle=" + benef_titre_libelle);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_speicalite_libelle=" + benef_speicalite_libelle);
			sb.append(",benef_identifiant_type_code=" + benef_identifiant_type_code);
			sb.append(",identifiant_type=" + identifiant_type);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",benef_etablissement=" + benef_etablissement);
			sb.append(",benef_etablissement_codepostal=" + benef_etablissement_codepostal);
			sb.append(",benef_etablissement_ville=" + benef_etablissement_ville);
			sb.append(",benef_denomination_sociale=" + benef_denomination_sociale);
			sb.append(",benef_objet_social=" + benef_objet_social);
			sb.append(",ligne_type=" + ligne_type);
			sb.append(",conv_date_signature=" + conv_date_signature);
			sb.append(",conv_objet=" + conv_objet);
			sb.append(",conv_objet_autre=" + conv_objet_autre);
			sb.append(",conv_date_debut=" + conv_date_debut);
			sb.append(",conv_date_fin=" + conv_date_fin);
			sb.append(",conv_montant_ttc=" + conv_montant_ttc);
			sb.append(",conv_manifestation_date=" + conv_manifestation_date);
			sb.append(",conv_manifestation_nom=" + conv_manifestation_nom);
			sb.append(",conv_manifestation_lieu=" + conv_manifestation_lieu);
			sb.append(",conv_manifestation_organisateur=" + conv_manifestation_organisateur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(conventionsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_convention_fact = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[0];

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String denomination_sociale;

		public String getDenomination_sociale() {
			return this.denomination_sociale;
		}

		public String ligne_identifiant;

		public String getLigne_identifiant() {
			return this.ligne_identifiant;
		}

		public Character ligne_rectification;

		public Character getLigne_rectification() {
			return this.ligne_rectification;
		}

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String categorie;

		public String getCategorie() {
			return this.categorie;
		}

		public String benef_nom;

		public String getBenef_nom() {
			return this.benef_nom;
		}

		public String benef_prenom;

		public String getBenef_prenom() {
			return this.benef_prenom;
		}

		public String benef_qualite_code;

		public String getBenef_qualite_code() {
			return this.benef_qualite_code;
		}

		public String qualite;

		public String getQualite() {
			return this.qualite;
		}

		public String benef_adresse1;

		public String getBenef_adresse1() {
			return this.benef_adresse1;
		}

		public String benef_adresse2;

		public String getBenef_adresse2() {
			return this.benef_adresse2;
		}

		public String benef_adresse3;

		public String getBenef_adresse3() {
			return this.benef_adresse3;
		}

		public String benef_adresse4;

		public String getBenef_adresse4() {
			return this.benef_adresse4;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_ville;

		public String getBenef_ville() {
			return this.benef_ville;
		}

		public String benef_pays_code;

		public String getBenef_pays_code() {
			return this.benef_pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String benef_titre_code;

		public String getBenef_titre_code() {
			return this.benef_titre_code;
		}

		public String benef_titre_libelle;

		public String getBenef_titre_libelle() {
			return this.benef_titre_libelle;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_speicalite_libelle;

		public String getBenef_speicalite_libelle() {
			return this.benef_speicalite_libelle;
		}

		public String benef_identifiant_type_code;

		public String getBenef_identifiant_type_code() {
			return this.benef_identifiant_type_code;
		}

		public String identifiant_type;

		public String getIdentifiant_type() {
			return this.identifiant_type;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String benef_etablissement;

		public String getBenef_etablissement() {
			return this.benef_etablissement;
		}

		public String benef_etablissement_codepostal;

		public String getBenef_etablissement_codepostal() {
			return this.benef_etablissement_codepostal;
		}

		public String benef_etablissement_ville;

		public String getBenef_etablissement_ville() {
			return this.benef_etablissement_ville;
		}

		public String benef_denomination_sociale;

		public String getBenef_denomination_sociale() {
			return this.benef_denomination_sociale;
		}

		public String benef_objet_social;

		public String getBenef_objet_social() {
			return this.benef_objet_social;
		}

		public String ligne_type;

		public String getLigne_type() {
			return this.ligne_type;
		}

		public String conv_date_signature;

		public String getConv_date_signature() {
			return this.conv_date_signature;
		}

		public String conv_objet;

		public String getConv_objet() {
			return this.conv_objet;
		}

		public String conv_objet_autre;

		public String getConv_objet_autre() {
			return this.conv_objet_autre;
		}

		public String conv_date_debut;

		public String getConv_date_debut() {
			return this.conv_date_debut;
		}

		public String conv_date_fin;

		public String getConv_date_fin() {
			return this.conv_date_fin;
		}

		public String conv_montant_ttc;

		public String getConv_montant_ttc() {
			return this.conv_montant_ttc;
		}

		public String conv_manifestation_date;

		public String getConv_manifestation_date() {
			return this.conv_manifestation_date;
		}

		public String conv_manifestation_nom;

		public String getConv_manifestation_nom() {
			return this.conv_manifestation_nom;
		}

		public String conv_manifestation_lieu;

		public String getConv_manifestation_lieu() {
			return this.conv_manifestation_lieu;
		}

		public String conv_manifestation_organisateur;

		public String getConv_manifestation_organisateur() {
			return this.conv_manifestation_organisateur;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_convention_fact) {

				try {

					int length = 0;

					this.entreprise_identifiant = readString(dis);

					this.denomination_sociale = readString(dis);

					this.ligne_identifiant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ligne_rectification = null;
					} else {
						this.ligne_rectification = dis.readChar();
					}

					this.benef_categorie_code = readString(dis);

					this.categorie = readString(dis);

					this.benef_nom = readString(dis);

					this.benef_prenom = readString(dis);

					this.benef_qualite_code = readString(dis);

					this.qualite = readString(dis);

					this.benef_adresse1 = readString(dis);

					this.benef_adresse2 = readString(dis);

					this.benef_adresse3 = readString(dis);

					this.benef_adresse4 = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_ville = readString(dis);

					this.benef_pays_code = readString(dis);

					this.pays = readString(dis);

					this.benef_titre_code = readString(dis);

					this.benef_titre_libelle = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_speicalite_libelle = readString(dis);

					this.benef_identifiant_type_code = readString(dis);

					this.identifiant_type = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.benef_etablissement = readString(dis);

					this.benef_etablissement_codepostal = readString(dis);

					this.benef_etablissement_ville = readString(dis);

					this.benef_denomination_sociale = readString(dis);

					this.benef_objet_social = readString(dis);

					this.ligne_type = readString(dis);

					this.conv_date_signature = readString(dis);

					this.conv_objet = readString(dis);

					this.conv_objet_autre = readString(dis);

					this.conv_date_debut = readString(dis);

					this.conv_date_fin = readString(dis);

					this.conv_montant_ttc = readString(dis);

					this.conv_manifestation_date = readString(dis);

					this.conv_manifestation_nom = readString(dis);

					this.conv_manifestation_lieu = readString(dis);

					this.conv_manifestation_organisateur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entreprise_identifiant, dos);

				// String

				writeString(this.denomination_sociale, dos);

				// String

				writeString(this.ligne_identifiant, dos);

				// Character

				if (this.ligne_rectification == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.ligne_rectification);
				}

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.categorie, dos);

				// String

				writeString(this.benef_nom, dos);

				// String

				writeString(this.benef_prenom, dos);

				// String

				writeString(this.benef_qualite_code, dos);

				// String

				writeString(this.qualite, dos);

				// String

				writeString(this.benef_adresse1, dos);

				// String

				writeString(this.benef_adresse2, dos);

				// String

				writeString(this.benef_adresse3, dos);

				// String

				writeString(this.benef_adresse4, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_ville, dos);

				// String

				writeString(this.benef_pays_code, dos);

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.benef_titre_code, dos);

				// String

				writeString(this.benef_titre_libelle, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_speicalite_libelle, dos);

				// String

				writeString(this.benef_identifiant_type_code, dos);

				// String

				writeString(this.identifiant_type, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.benef_etablissement, dos);

				// String

				writeString(this.benef_etablissement_codepostal, dos);

				// String

				writeString(this.benef_etablissement_ville, dos);

				// String

				writeString(this.benef_denomination_sociale, dos);

				// String

				writeString(this.benef_objet_social, dos);

				// String

				writeString(this.ligne_type, dos);

				// String

				writeString(this.conv_date_signature, dos);

				// String

				writeString(this.conv_objet, dos);

				// String

				writeString(this.conv_objet_autre, dos);

				// String

				writeString(this.conv_date_debut, dos);

				// String

				writeString(this.conv_date_fin, dos);

				// String

				writeString(this.conv_montant_ttc, dos);

				// String

				writeString(this.conv_manifestation_date, dos);

				// String

				writeString(this.conv_manifestation_nom, dos);

				// String

				writeString(this.conv_manifestation_lieu, dos);

				// String

				writeString(this.conv_manifestation_organisateur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",denomination_sociale=" + denomination_sociale);
			sb.append(",ligne_identifiant=" + ligne_identifiant);
			sb.append(",ligne_rectification=" + String.valueOf(ligne_rectification));
			sb.append(",benef_categorie_code=" + benef_categorie_code);
			sb.append(",categorie=" + categorie);
			sb.append(",benef_nom=" + benef_nom);
			sb.append(",benef_prenom=" + benef_prenom);
			sb.append(",benef_qualite_code=" + benef_qualite_code);
			sb.append(",qualite=" + qualite);
			sb.append(",benef_adresse1=" + benef_adresse1);
			sb.append(",benef_adresse2=" + benef_adresse2);
			sb.append(",benef_adresse3=" + benef_adresse3);
			sb.append(",benef_adresse4=" + benef_adresse4);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_ville=" + benef_ville);
			sb.append(",benef_pays_code=" + benef_pays_code);
			sb.append(",pays=" + pays);
			sb.append(",benef_titre_code=" + benef_titre_code);
			sb.append(",benef_titre_libelle=" + benef_titre_libelle);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_speicalite_libelle=" + benef_speicalite_libelle);
			sb.append(",benef_identifiant_type_code=" + benef_identifiant_type_code);
			sb.append(",identifiant_type=" + identifiant_type);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",benef_etablissement=" + benef_etablissement);
			sb.append(",benef_etablissement_codepostal=" + benef_etablissement_codepostal);
			sb.append(",benef_etablissement_ville=" + benef_etablissement_ville);
			sb.append(",benef_denomination_sociale=" + benef_denomination_sociale);
			sb.append(",benef_objet_social=" + benef_objet_social);
			sb.append(",ligne_type=" + ligne_type);
			sb.append(",conv_date_signature=" + conv_date_signature);
			sb.append(",conv_objet=" + conv_objet);
			sb.append(",conv_objet_autre=" + conv_objet_autre);
			sb.append(",conv_date_debut=" + conv_date_debut);
			sb.append(",conv_date_fin=" + conv_date_fin);
			sb.append(",conv_montant_ttc=" + conv_montant_ttc);
			sb.append(",conv_manifestation_date=" + conv_manifestation_date);
			sb.append(",conv_manifestation_nom=" + conv_manifestation_nom);
			sb.append(",conv_manifestation_lieu=" + conv_manifestation_lieu);
			sb.append(",conv_manifestation_organisateur=" + conv_manifestation_organisateur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_convention_fact = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[0];

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String denomination_sociale;

		public String getDenomination_sociale() {
			return this.denomination_sociale;
		}

		public String ligne_identifiant;

		public String getLigne_identifiant() {
			return this.ligne_identifiant;
		}

		public Character ligne_rectification;

		public Character getLigne_rectification() {
			return this.ligne_rectification;
		}

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String categorie;

		public String getCategorie() {
			return this.categorie;
		}

		public String benef_nom;

		public String getBenef_nom() {
			return this.benef_nom;
		}

		public String benef_prenom;

		public String getBenef_prenom() {
			return this.benef_prenom;
		}

		public String benef_qualite_code;

		public String getBenef_qualite_code() {
			return this.benef_qualite_code;
		}

		public String qualite;

		public String getQualite() {
			return this.qualite;
		}

		public String benef_adresse1;

		public String getBenef_adresse1() {
			return this.benef_adresse1;
		}

		public String benef_adresse2;

		public String getBenef_adresse2() {
			return this.benef_adresse2;
		}

		public String benef_adresse3;

		public String getBenef_adresse3() {
			return this.benef_adresse3;
		}

		public String benef_adresse4;

		public String getBenef_adresse4() {
			return this.benef_adresse4;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_ville;

		public String getBenef_ville() {
			return this.benef_ville;
		}

		public String benef_pays_code;

		public String getBenef_pays_code() {
			return this.benef_pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String benef_titre_code;

		public String getBenef_titre_code() {
			return this.benef_titre_code;
		}

		public String benef_titre_libelle;

		public String getBenef_titre_libelle() {
			return this.benef_titre_libelle;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_speicalite_libelle;

		public String getBenef_speicalite_libelle() {
			return this.benef_speicalite_libelle;
		}

		public String benef_identifiant_type_code;

		public String getBenef_identifiant_type_code() {
			return this.benef_identifiant_type_code;
		}

		public String identifiant_type;

		public String getIdentifiant_type() {
			return this.identifiant_type;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String benef_etablissement;

		public String getBenef_etablissement() {
			return this.benef_etablissement;
		}

		public String benef_etablissement_codepostal;

		public String getBenef_etablissement_codepostal() {
			return this.benef_etablissement_codepostal;
		}

		public String benef_etablissement_ville;

		public String getBenef_etablissement_ville() {
			return this.benef_etablissement_ville;
		}

		public String benef_denomination_sociale;

		public String getBenef_denomination_sociale() {
			return this.benef_denomination_sociale;
		}

		public String benef_objet_social;

		public String getBenef_objet_social() {
			return this.benef_objet_social;
		}

		public String ligne_type;

		public String getLigne_type() {
			return this.ligne_type;
		}

		public String conv_date_signature;

		public String getConv_date_signature() {
			return this.conv_date_signature;
		}

		public String conv_objet;

		public String getConv_objet() {
			return this.conv_objet;
		}

		public String conv_objet_autre;

		public String getConv_objet_autre() {
			return this.conv_objet_autre;
		}

		public String conv_date_debut;

		public String getConv_date_debut() {
			return this.conv_date_debut;
		}

		public String conv_date_fin;

		public String getConv_date_fin() {
			return this.conv_date_fin;
		}

		public String conv_montant_ttc;

		public String getConv_montant_ttc() {
			return this.conv_montant_ttc;
		}

		public String conv_manifestation_date;

		public String getConv_manifestation_date() {
			return this.conv_manifestation_date;
		}

		public String conv_manifestation_nom;

		public String getConv_manifestation_nom() {
			return this.conv_manifestation_nom;
		}

		public String conv_manifestation_lieu;

		public String getConv_manifestation_lieu() {
			return this.conv_manifestation_lieu;
		}

		public String conv_manifestation_organisateur;

		public String getConv_manifestation_organisateur() {
			return this.conv_manifestation_organisateur;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_convention_fact) {

				try {

					int length = 0;

					this.entreprise_identifiant = readString(dis);

					this.denomination_sociale = readString(dis);

					this.ligne_identifiant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ligne_rectification = null;
					} else {
						this.ligne_rectification = dis.readChar();
					}

					this.benef_categorie_code = readString(dis);

					this.categorie = readString(dis);

					this.benef_nom = readString(dis);

					this.benef_prenom = readString(dis);

					this.benef_qualite_code = readString(dis);

					this.qualite = readString(dis);

					this.benef_adresse1 = readString(dis);

					this.benef_adresse2 = readString(dis);

					this.benef_adresse3 = readString(dis);

					this.benef_adresse4 = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_ville = readString(dis);

					this.benef_pays_code = readString(dis);

					this.pays = readString(dis);

					this.benef_titre_code = readString(dis);

					this.benef_titre_libelle = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_speicalite_libelle = readString(dis);

					this.benef_identifiant_type_code = readString(dis);

					this.identifiant_type = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.benef_etablissement = readString(dis);

					this.benef_etablissement_codepostal = readString(dis);

					this.benef_etablissement_ville = readString(dis);

					this.benef_denomination_sociale = readString(dis);

					this.benef_objet_social = readString(dis);

					this.ligne_type = readString(dis);

					this.conv_date_signature = readString(dis);

					this.conv_objet = readString(dis);

					this.conv_objet_autre = readString(dis);

					this.conv_date_debut = readString(dis);

					this.conv_date_fin = readString(dis);

					this.conv_montant_ttc = readString(dis);

					this.conv_manifestation_date = readString(dis);

					this.conv_manifestation_nom = readString(dis);

					this.conv_manifestation_lieu = readString(dis);

					this.conv_manifestation_organisateur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entreprise_identifiant, dos);

				// String

				writeString(this.denomination_sociale, dos);

				// String

				writeString(this.ligne_identifiant, dos);

				// Character

				if (this.ligne_rectification == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.ligne_rectification);
				}

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.categorie, dos);

				// String

				writeString(this.benef_nom, dos);

				// String

				writeString(this.benef_prenom, dos);

				// String

				writeString(this.benef_qualite_code, dos);

				// String

				writeString(this.qualite, dos);

				// String

				writeString(this.benef_adresse1, dos);

				// String

				writeString(this.benef_adresse2, dos);

				// String

				writeString(this.benef_adresse3, dos);

				// String

				writeString(this.benef_adresse4, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_ville, dos);

				// String

				writeString(this.benef_pays_code, dos);

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.benef_titre_code, dos);

				// String

				writeString(this.benef_titre_libelle, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_speicalite_libelle, dos);

				// String

				writeString(this.benef_identifiant_type_code, dos);

				// String

				writeString(this.identifiant_type, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.benef_etablissement, dos);

				// String

				writeString(this.benef_etablissement_codepostal, dos);

				// String

				writeString(this.benef_etablissement_ville, dos);

				// String

				writeString(this.benef_denomination_sociale, dos);

				// String

				writeString(this.benef_objet_social, dos);

				// String

				writeString(this.ligne_type, dos);

				// String

				writeString(this.conv_date_signature, dos);

				// String

				writeString(this.conv_objet, dos);

				// String

				writeString(this.conv_objet_autre, dos);

				// String

				writeString(this.conv_date_debut, dos);

				// String

				writeString(this.conv_date_fin, dos);

				// String

				writeString(this.conv_montant_ttc, dos);

				// String

				writeString(this.conv_manifestation_date, dos);

				// String

				writeString(this.conv_manifestation_nom, dos);

				// String

				writeString(this.conv_manifestation_lieu, dos);

				// String

				writeString(this.conv_manifestation_organisateur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",denomination_sociale=" + denomination_sociale);
			sb.append(",ligne_identifiant=" + ligne_identifiant);
			sb.append(",ligne_rectification=" + String.valueOf(ligne_rectification));
			sb.append(",benef_categorie_code=" + benef_categorie_code);
			sb.append(",categorie=" + categorie);
			sb.append(",benef_nom=" + benef_nom);
			sb.append(",benef_prenom=" + benef_prenom);
			sb.append(",benef_qualite_code=" + benef_qualite_code);
			sb.append(",qualite=" + qualite);
			sb.append(",benef_adresse1=" + benef_adresse1);
			sb.append(",benef_adresse2=" + benef_adresse2);
			sb.append(",benef_adresse3=" + benef_adresse3);
			sb.append(",benef_adresse4=" + benef_adresse4);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_ville=" + benef_ville);
			sb.append(",benef_pays_code=" + benef_pays_code);
			sb.append(",pays=" + pays);
			sb.append(",benef_titre_code=" + benef_titre_code);
			sb.append(",benef_titre_libelle=" + benef_titre_libelle);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_speicalite_libelle=" + benef_speicalite_libelle);
			sb.append(",benef_identifiant_type_code=" + benef_identifiant_type_code);
			sb.append(",identifiant_type=" + identifiant_type);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",benef_etablissement=" + benef_etablissement);
			sb.append(",benef_etablissement_codepostal=" + benef_etablissement_codepostal);
			sb.append(",benef_etablissement_ville=" + benef_etablissement_ville);
			sb.append(",benef_denomination_sociale=" + benef_denomination_sociale);
			sb.append(",benef_objet_social=" + benef_objet_social);
			sb.append(",ligne_type=" + ligne_type);
			sb.append(",conv_date_signature=" + conv_date_signature);
			sb.append(",conv_objet=" + conv_objet);
			sb.append(",conv_objet_autre=" + conv_objet_autre);
			sb.append(",conv_date_debut=" + conv_date_debut);
			sb.append(",conv_date_fin=" + conv_date_fin);
			sb.append(",conv_montant_ttc=" + conv_montant_ttc);
			sb.append(",conv_manifestation_date=" + conv_manifestation_date);
			sb.append(",conv_manifestation_nom=" + conv_manifestation_nom);
			sb.append(",conv_manifestation_lieu=" + conv_manifestation_lieu);
			sb.append(",conv_manifestation_organisateur=" + conv_manifestation_organisateur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_4Process(globalMap);

				row2Struct row2 = new row2Struct();
				conventionsStruct conventions = new conventionsStruct();
				conventions_factStruct conventions_fact = new conventions_factStruct();
				row1Struct row1 = new row1Struct();
				conventions_uniquesStruct conventions_uniques = new conventions_uniquesStruct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "conventions_uniques");
				}

				int tos_count_tDBOutput_2 = 0;

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;

				int rejectedCount_tDBOutput_2 = 0;

				String tableName_tDBOutput_2 = "convention_fact";
				boolean whetherReject_tDBOutput_2 = false;

				java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
				calendar_tDBOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
				calendar_tDBOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
				long date_tDBOutput_2;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbProperties_tDBOutput_2 = "noDatetimeStringSync=true";
				String url_tDBOutput_2 = null;
				if (dbProperties_tDBOutput_2 == null || dbProperties_tDBOutput_2.trim().length() == 0) {
					url_tDBOutput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "transparence_sante_bi" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_2 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_2.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_2 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "transparence_sante_bi" + "?"
							+ properties_tDBOutput_2;
				}
				String driverClass_tDBOutput_2 = "com.mysql.jdbc.Driver";

				String dbUser_tDBOutput_2 = "root";

				final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:zWwO1IVkQ4WXjedACaZrLaHzefzeqzUGE5fxrg==");

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;
				java.lang.Class.forName(driverClass_tDBOutput_2);

				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2, dbUser_tDBOutput_2,
						dbPwd_tDBOutput_2);

				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;

				try (java.sql.Statement stmtClear_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
					stmtClear_tDBOutput_2.executeUpdate("DELETE FROM `" + tableName_tDBOutput_2 + "`");
				}

				String insert_tDBOutput_2 = "INSERT INTO `" + "convention_fact"
						+ "` (`ligne_id`,`entreprise_id`,`beneficiaire_id`,`categorie_beneficiaire_id`,`qualite_beneficiaire_id`,`titre_beneficiaire_id`,`adresse_beneficiaire_id`,`adresse_entreprise_id`,`specialite_beneficiaire_id`,`secteur_activite_entreprise_id`,`objet_convention_id`,`evenement_convention_id`,`date_debut_convention`,`date_fin_convention`,`date_signature_convention`,`montant_convention`,`duree_convention`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_2 = 100;
				int batchSizeCounter_tDBOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				conventions_uniquesStruct conventions_uniques_tmp = new conventions_uniquesStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "conventions_fact");
				}

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String composite_key;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.composite_key == null) ? 0 : this.composite_key.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.composite_key == null) {
							if (other.composite_key != null)
								return false;

						} else if (!this.composite_key.equals(other.composite_key))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "conventions");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<entreprisesStruct> tHash_Lookup_entreprises = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<entreprisesStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<entreprisesStruct>) globalMap
						.get("tHash_Lookup_entreprises"));

				tHash_Lookup_entreprises.initGet();

				entreprisesStruct entreprisesHashKey = new entreprisesStruct();
				entreprisesStruct entreprisesDefault = new entreprisesStruct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
					String normalizedObjetConvention;
					String normalizedEvenementConvention;
					java.util.Date date_debut;
					java.util.Date date_fin;
					java.util.Date date_signature;
					boolean isConvMontantNumeric;
					String adresse_beneficiaire;
					String adresse_entreprise;
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				conventions_factStruct conventions_fact_tmp = new conventions_factStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/BI/transparence-sante/data/data.gouv/conventions.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/BI/transparence-sante/data/data.gouv/conventions.csv", "UTF-8", ";", "\n", false, 1,
								0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row2 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row2 = new row2Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row2.entreprise_identifiant = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row2.denomination_sociale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row2.ligne_identifiant = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.ligne_rectification = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ligne_rectification", "row2", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row2.ligne_rectification = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row2.benef_categorie_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row2.categorie = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row2.benef_nom = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							row2.benef_prenom = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 8;

							row2.benef_qualite_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 9;

							row2.qualite = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 10;

							row2.benef_adresse1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 11;

							row2.benef_adresse2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 12;

							row2.benef_adresse3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 13;

							row2.benef_adresse4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 14;

							row2.benef_codepostal = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 15;

							row2.benef_ville = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 16;

							row2.benef_pays_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 17;

							row2.pays = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 18;

							row2.benef_titre_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 19;

							row2.benef_titre_libelle = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 20;

							row2.benef_specialite_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 21;

							row2.benef_speicalite_libelle = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 22;

							row2.benef_identifiant_type_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 23;

							row2.identifiant_type = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 24;

							row2.benef_identifiant_valeur = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 25;

							row2.benef_etablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 26;

							row2.benef_etablissement_codepostal = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 27;

							row2.benef_etablissement_ville = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 28;

							row2.benef_denomination_sociale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 29;

							row2.benef_objet_social = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 30;

							row2.ligne_type = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 31;

							row2.conv_date_signature = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 32;

							row2.conv_objet = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 33;

							row2.conv_objet_autre = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 34;

							row2.conv_date_debut = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 35;

							row2.conv_date_fin = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 36;

							row2.conv_montant_ttc = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 37;

							row2.conv_manifestation_date = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 38;

							row2.conv_manifestation_nom = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 39;

							row2.conv_manifestation_lieu = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 40;

							row2.conv_manifestation_organisateur = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tFilterRow_1 main ] start
							 */

							currentComponent = "tFilterRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
							}

							conventions = null;
							Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
							ope_tFilterRow_1.matches(
									(row2.entreprise_identifiant == null ? false
											: row2.entreprise_identifiant.length() > 0),
									" entreprise_identifiant.length() > 0 failed");
							ope_tFilterRow_1.matches((// code sample : use row2 to define the condition.
// row2.columnName1.equals("foo") ||!(row2.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
							row2.benef_pays_code != null && row2.benef_codepostal != null
									&& !row2.benef_pays_code.replaceAll("[^a-zA-Z]", "").equals("")
									&& !row2.benef_codepostal.replaceAll("[^0-9\\-]", "").equals("")
									&& !row2.conv_montant_ttc.replaceAll("[^0-9]", "").equals("")
									&& row2.conv_montant_ttc != null), "advanced condition failed");

							if (ope_tFilterRow_1.getMatchFlag()) {
								if (conventions == null) {
									conventions = new conventionsStruct();
								}
								conventions.entreprise_identifiant = row2.entreprise_identifiant;
								conventions.denomination_sociale = row2.denomination_sociale;
								conventions.ligne_identifiant = row2.ligne_identifiant;
								conventions.ligne_rectification = row2.ligne_rectification;
								conventions.benef_categorie_code = row2.benef_categorie_code;
								conventions.categorie = row2.categorie;
								conventions.benef_nom = row2.benef_nom;
								conventions.benef_prenom = row2.benef_prenom;
								conventions.benef_qualite_code = row2.benef_qualite_code;
								conventions.qualite = row2.qualite;
								conventions.benef_adresse1 = row2.benef_adresse1;
								conventions.benef_adresse2 = row2.benef_adresse2;
								conventions.benef_adresse3 = row2.benef_adresse3;
								conventions.benef_adresse4 = row2.benef_adresse4;
								conventions.benef_codepostal = row2.benef_codepostal;
								conventions.benef_ville = row2.benef_ville;
								conventions.benef_pays_code = row2.benef_pays_code;
								conventions.pays = row2.pays;
								conventions.benef_titre_code = row2.benef_titre_code;
								conventions.benef_titre_libelle = row2.benef_titre_libelle;
								conventions.benef_specialite_code = row2.benef_specialite_code;
								conventions.benef_speicalite_libelle = row2.benef_speicalite_libelle;
								conventions.benef_identifiant_type_code = row2.benef_identifiant_type_code;
								conventions.identifiant_type = row2.identifiant_type;
								conventions.benef_identifiant_valeur = row2.benef_identifiant_valeur;
								conventions.benef_etablissement = row2.benef_etablissement;
								conventions.benef_etablissement_codepostal = row2.benef_etablissement_codepostal;
								conventions.benef_etablissement_ville = row2.benef_etablissement_ville;
								conventions.benef_denomination_sociale = row2.benef_denomination_sociale;
								conventions.benef_objet_social = row2.benef_objet_social;
								conventions.ligne_type = row2.ligne_type;
								conventions.conv_date_signature = row2.conv_date_signature;
								conventions.conv_objet = row2.conv_objet;
								conventions.conv_objet_autre = row2.conv_objet_autre;
								conventions.conv_date_debut = row2.conv_date_debut;
								conventions.conv_date_fin = row2.conv_date_fin;
								conventions.conv_montant_ttc = row2.conv_montant_ttc;
								conventions.conv_manifestation_date = row2.conv_manifestation_date;
								conventions.conv_manifestation_nom = row2.conv_manifestation_nom;
								conventions.conv_manifestation_lieu = row2.conv_manifestation_lieu;
								conventions.conv_manifestation_organisateur = row2.conv_manifestation_organisateur;
								nb_line_ok_tFilterRow_1++;
							} else {
								nb_line_reject_tFilterRow_1++;
							}

							nb_line_tFilterRow_1++;

							tos_count_tFilterRow_1++;

							/**
							 * [tFilterRow_1 main ] stop
							 */

							/**
							 * [tFilterRow_1 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_begin ] stop
							 */
// Start of branch "conventions"
							if (conventions != null) {

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "conventions");
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								///////////////////////////////////////////////
								// Starting Lookup Table "entreprises"
								///////////////////////////////////////////////

								boolean forceLoopentreprises = false;

								entreprisesStruct entreprisesObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

									tHash_Lookup_entreprises.lookup(entreprisesHashKey);

									if (!tHash_Lookup_entreprises.hasNext()) { // G_TM_M_090

										forceLoopentreprises = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLoopentreprises = true;
								} // G 21

								entreprisesStruct entreprises = null;

								while ((tHash_Lookup_entreprises != null && tHash_Lookup_entreprises.hasNext())
										|| forceLoopentreprises) { // G_TM_M_043

									// CALL close loop of lookup 'entreprises'

									entreprisesStruct fromLookup_entreprises = null;
									entreprises = entreprisesDefault;

									if (!forceLoopentreprises) { // G 46

										fromLookup_entreprises = tHash_Lookup_entreprises.next();

										if (fromLookup_entreprises != null) {
											entreprises = fromLookup_entreprises;
										}

									} // G 46

									forceLoopentreprises = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_2__Struct Var = Var__tMap_2;
										Var.normalizedObjetConvention = ObjetConventionIdGenerator
												.normalizeObjetConvention(conventions.conv_objet,
														conventions.conv_objet_autre);
										;
										Var.normalizedEvenementConvention = EvenementConventionIdGenerator
												.normalizeEvenementConvention(conventions.conv_manifestation_nom);
										;
										Var.date_debut = conventions.conv_date_debut != null
												&& !conventions.conv_date_debut.replaceAll("[^\\-\\/0-9]", "").isEmpty()
												&&
//enleve tous les elements que ne sont pas de nombre ou des  - et / 
												MyStringRoutine.isDate(
														conventions.conv_date_debut.replaceAll("[^\\-\\/0-9]", ""))
																? TalendDate.parseDate("dd-MM-yyyy", (
//make a date with the string  with only number and -  matches a date format
																conventions.conv_date_debut.replaceAll("[^\\-\\/0-9]",
																		"")).replace("/", "-"))
																:
// if date string is null or empty, default date
																TalendDate.parseDate("dd-MM-yyyy", "01-01-2000");
										Var.date_fin = conventions.conv_date_fin != null
												&& !conventions.conv_date_fin.replaceAll("[^\\-\\/0-9]", "").isEmpty()
												&&
//check if the string only number, - and / matches a date format
												MyStringRoutine.isDate(
														conventions.conv_date_fin.replaceAll("[^0-9\\/\\-]", ""))
																? TalendDate.parseDate("dd-MM-yyyy",
//make a date with the string  with only number and -  matches a date format
																		(conventions.conv_date_fin
																				.replaceAll("[^\\-\\/0-9]", ""))
																						.replace("/", "-"))
																:
// if date string is null or empty, default date
																TalendDate.parseDate("dd-MM-yyyy", "31-12-2099");
										Var.date_signature = conventions.conv_date_signature != null
												&& !conventions.conv_date_signature.replaceAll("[^\\-\\/0-9]", "")
														.isEmpty()
												&&
//check if the string only number, - and / matches a date format
												MyStringRoutine.isDate(
														conventions.conv_date_fin.replaceAll("[^0-9\\/\\-]", ""))
																? TalendDate.parseDate("dd-MM-yyyy",
//make a date with the string  with only number and -  matches a date format
																		(conventions.conv_date_signature
																				.replaceAll("[^0-9\\/\\-]", ""))
																						.replace("/", "-"))
																:
// if date string is null or empty, default date
																TalendDate.parseDate("dd-MM-yyyy", "01-01-2000");
										Var.isConvMontantNumeric = conventions.conv_montant_ttc != null
												&& !conventions.conv_montant_ttc.isEmpty()
														? MyStringRoutine.isFloat(conventions.conv_montant_ttc)
														: false;
										Var.adresse_beneficiaire = conventions.benef_codepostal + "|"
												+ conventions.benef_pays_code;
										Var.adresse_entreprise = entreprises.code_postal + "|" + entreprises.pays_code;// ###############################
										// ###############################
										// # Output tables

										conventions_fact = null;

// # Output table : 'conventions_fact'
										conventions_fact_tmp.ligne_id = conventions.ligne_identifiant;
										conventions_fact_tmp.entreprise_id = conventions.entreprise_identifiant;
										conventions_fact_tmp.beneficiaire_id = conventions.benef_identifiant_valeur == null
												|| conventions.benef_identifiant_valeur.isEmpty()
												|| !MyStringRoutine.isNumeric(conventions.benef_identifiant_valeur)
														? "N/A"
														: conventions.benef_identifiant_valeur.trim();
										conventions_fact_tmp.categorie_beneficiaire_id = conventions.benef_categorie_code
												.equals("") ? "N/A" : conventions.benef_categorie_code;
										conventions_fact_tmp.qualite_beneficiaire_id = conventions.benef_qualite_code
												.equals("") ? "N/A" : conventions.benef_qualite_code;
										conventions_fact_tmp.titre_beneficiaire_id = conventions.benef_titre_code
												.equals("") ? "N/A" : conventions.benef_titre_code;
										conventions_fact_tmp.adresse_beneficiaire_id = Var.adresse_beneficiaire;
										conventions_fact_tmp.adresse_entreprise_id = Var.adresse_entreprise;
										conventions_fact_tmp.specialite_beneficiaire_id = conventions.benef_specialite_code
												.equals("") ? "N/A" : conventions.benef_specialite_code;
										conventions_fact_tmp.secteur_activite_entreprise_id = entreprises.secteur_activite_code == null
												? "N/A"
												: entreprises.secteur_activite_code;
										conventions_fact_tmp.objet_convention_id = ObjetConventionIdGenerator
												.getObjetConventionId(Var.normalizedObjetConvention);
										conventions_fact_tmp.evenement_convention_id = EvenementConventionIdGenerator
												.getEvenementConventionId(Var.normalizedEvenementConvention);
										conventions_fact_tmp.date_debut_convention = (DateTransformations
												.getAnnee(Var.date_debut) >= 1980
												&& DateTransformations.getAnnee(Var.date_debut) <= 2100)
														? Var.date_debut
														: TalendDate.parseDate("dd-MM-yyyy", "01-01-2000");
										conventions_fact_tmp.date_fin_convention = (DateTransformations
												.getAnnee(Var.date_fin) >= 1980
												&& DateTransformations.getAnnee(Var.date_fin) <= 2100) ? Var.date_fin
														: TalendDate.parseDate("dd-MM-yyyy", "31-12-2099");
										conventions_fact_tmp.date_signature_convention = (DateTransformations
												.getAnnee(Var.date_signature) >= 1980
												&& DateTransformations.getAnnee(Var.date_signature) <= 2100)
														? Var.date_signature
														: TalendDate.parseDate("dd-MM-yyyy", "01-01-2000");
										conventions_fact_tmp.montant_convention = Var.isConvMontantNumeric
												? Math.round(Float.parseFloat(conventions.conv_montant_ttc))
												: 0;
										conventions_fact_tmp.duree_convention = (DateTransformations
												.getAnnee(Var.date_fin) >= 1980
												&& DateTransformations.getAnnee(Var.date_debut) >= 1980
												&& DateTransformations.getAnnee(Var.date_fin) <= 2100
												&& DateTransformations.getAnnee(Var.date_debut) <= 2100)
														? (int) TalendDate.diffDate(Var.date_fin, Var.date_debut, "dd")
														: 0;
										conventions_fact_tmp.composite_key = MyStringRoutine.concat(
												conventions.entreprise_identifiant, conventions.ligne_identifiant,
												conventions.conv_date_signature);
										conventions_fact = conventions_fact_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_2 = false;

									tos_count_tMap_2++;

									/**
									 * [tMap_2 main ] stop
									 */

									/**
									 * [tMap_2 process_data_begin ] start
									 */

									currentComponent = "tMap_2";

									/**
									 * [tMap_2 process_data_begin ] stop
									 */
// Start of branch "conventions_fact"
									if (conventions_fact != null) {

										/**
										 * [tUniqRow_1 main ] start
										 */

										currentComponent = "tUniqRow_1";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "conventions_fact");
										}

										row1 = null;
										if (conventions_fact.composite_key == null) {
											finder_tUniqRow_1.composite_key = null;
										} else {
											finder_tUniqRow_1.composite_key = conventions_fact.composite_key
													.toLowerCase();
										}
										finder_tUniqRow_1.hashCodeDirty = true;
										if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
											KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

											if (conventions_fact.composite_key == null) {
												new_tUniqRow_1.composite_key = null;
											} else {
												new_tUniqRow_1.composite_key = conventions_fact.composite_key
														.toLowerCase();
											}

											keystUniqRow_1.add(new_tUniqRow_1);
											if (row1 == null) {

												row1 = new row1Struct();
											}
											row1.ligne_id = conventions_fact.ligne_id;
											row1.entreprise_id = conventions_fact.entreprise_id;
											row1.beneficiaire_id = conventions_fact.beneficiaire_id;
											row1.categorie_beneficiaire_id = conventions_fact.categorie_beneficiaire_id;
											row1.qualite_beneficiaire_id = conventions_fact.qualite_beneficiaire_id;
											row1.titre_beneficiaire_id = conventions_fact.titre_beneficiaire_id;
											row1.adresse_beneficiaire_id = conventions_fact.adresse_beneficiaire_id;
											row1.adresse_entreprise_id = conventions_fact.adresse_entreprise_id;
											row1.specialite_beneficiaire_id = conventions_fact.specialite_beneficiaire_id;
											row1.secteur_activite_entreprise_id = conventions_fact.secteur_activite_entreprise_id;
											row1.objet_convention_id = conventions_fact.objet_convention_id;
											row1.evenement_convention_id = conventions_fact.evenement_convention_id;
											row1.date_debut_convention = conventions_fact.date_debut_convention;
											row1.date_fin_convention = conventions_fact.date_fin_convention;
											row1.date_signature_convention = conventions_fact.date_signature_convention;
											row1.montant_convention = conventions_fact.montant_convention;
											row1.duree_convention = conventions_fact.duree_convention;
											row1.composite_key = conventions_fact.composite_key;
											nb_uniques_tUniqRow_1++;
										} else {
											nb_duplicates_tUniqRow_1++;
										}

										tos_count_tUniqRow_1++;

										/**
										 * [tUniqRow_1 main ] stop
										 */

										/**
										 * [tUniqRow_1 process_data_begin ] start
										 */

										currentComponent = "tUniqRow_1";

										/**
										 * [tUniqRow_1 process_data_begin ] stop
										 */
// Start of branch "row1"
										if (row1 != null) {

											/**
											 * [tMap_1 main ] start
											 */

											currentComponent = "tMap_1";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
											}

											boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

											// ###############################
											// # Input tables (lookups)
											boolean rejectedInnerJoin_tMap_1 = false;
											boolean mainRowRejected_tMap_1 = false;

											// ###############################
											{ // start of Var scope

												// ###############################
												// # Vars tables

												Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
												// ###############################
												// # Output tables

												conventions_uniques = null;

// # Output table : 'conventions_uniques'
												conventions_uniques_tmp.ligne_id = row1.ligne_id;
												conventions_uniques_tmp.entreprise_id = row1.entreprise_id;
												conventions_uniques_tmp.beneficiaire_id = row1.beneficiaire_id;
												conventions_uniques_tmp.categorie_beneficiaire_id = row1.categorie_beneficiaire_id;
												conventions_uniques_tmp.qualite_beneficiaire_id = row1.qualite_beneficiaire_id;
												conventions_uniques_tmp.titre_beneficiaire_id = row1.titre_beneficiaire_id;
												conventions_uniques_tmp.adresse_beneficiaire_id = row1.adresse_beneficiaire_id;
												conventions_uniques_tmp.adresse_entreprise_id = row1.adresse_entreprise_id;
												conventions_uniques_tmp.specialite_beneficiaire_id = row1.specialite_beneficiaire_id;
												conventions_uniques_tmp.secteur_activite_entreprise_id = row1.secteur_activite_entreprise_id;
												conventions_uniques_tmp.objet_convention_id = row1.objet_convention_id;
												conventions_uniques_tmp.evenement_convention_id = row1.evenement_convention_id;
												conventions_uniques_tmp.date_debut_convention = row1.date_debut_convention;
												conventions_uniques_tmp.date_fin_convention = row1.date_fin_convention;
												conventions_uniques_tmp.date_signature_convention = row1.date_signature_convention;
												conventions_uniques_tmp.montant_convention = row1.montant_convention;
												conventions_uniques_tmp.duree_convention = row1.duree_convention;
												conventions_uniques = conventions_uniques_tmp;
// ###############################

											} // end of Var scope

											rejectedInnerJoin_tMap_1 = false;

											tos_count_tMap_1++;

											/**
											 * [tMap_1 main ] stop
											 */

											/**
											 * [tMap_1 process_data_begin ] start
											 */

											currentComponent = "tMap_1";

											/**
											 * [tMap_1 process_data_begin ] stop
											 */
// Start of branch "conventions_uniques"
											if (conventions_uniques != null) {

												/**
												 * [tDBOutput_2 main ] start
												 */

												currentComponent = "tDBOutput_2";

												if (execStat) {
													runStat.updateStatOnConnection(iterateId, 1, 1,
															"conventions_uniques");
												}

												whetherReject_tDBOutput_2 = false;
												if (conventions_uniques.ligne_id == null) {
													pstmt_tDBOutput_2.setNull(1, java.sql.Types.VARCHAR);
												} else {
													pstmt_tDBOutput_2.setString(1, conventions_uniques.ligne_id);
												}

												if (conventions_uniques.entreprise_id == null) {
													pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
												} else {
													pstmt_tDBOutput_2.setString(2, conventions_uniques.entreprise_id);
												}

												if (conventions_uniques.beneficiaire_id == null) {
													pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
												} else {
													pstmt_tDBOutput_2.setString(3, conventions_uniques.beneficiaire_id);
												}

												if (conventions_uniques.categorie_beneficiaire_id == null) {
													pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
												} else {
													pstmt_tDBOutput_2.setString(4,
															conventions_uniques.categorie_beneficiaire_id);
												}

												if (conventions_uniques.qualite_beneficiaire_id == null) {
													pstmt_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
												} else {
													pstmt_tDBOutput_2.setString(5,
															conventions_uniques.qualite_beneficiaire_id);
												}

												if (conventions_uniques.titre_beneficiaire_id == null) {
													pstmt_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
												} else {
													pstmt_tDBOutput_2.setString(6,
															conventions_uniques.titre_beneficiaire_id);
												}

												if (conventions_uniques.adresse_beneficiaire_id == null) {
													pstmt_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
												} else {
													pstmt_tDBOutput_2.setString(7,
															conventions_uniques.adresse_beneficiaire_id);
												}

												if (conventions_uniques.adresse_entreprise_id == null) {
													pstmt_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
												} else {
													pstmt_tDBOutput_2.setString(8,
															conventions_uniques.adresse_entreprise_id);
												}

												if (conventions_uniques.specialite_beneficiaire_id == null) {
													pstmt_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
												} else {
													pstmt_tDBOutput_2.setString(9,
															conventions_uniques.specialite_beneficiaire_id);
												}

												if (conventions_uniques.secteur_activite_entreprise_id == null) {
													pstmt_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
												} else {
													pstmt_tDBOutput_2.setString(10,
															conventions_uniques.secteur_activite_entreprise_id);
												}

												pstmt_tDBOutput_2.setInt(11, conventions_uniques.objet_convention_id);

												pstmt_tDBOutput_2.setInt(12,
														conventions_uniques.evenement_convention_id);

												if (conventions_uniques.date_debut_convention != null) {
													date_tDBOutput_2 = conventions_uniques.date_debut_convention
															.getTime();
													if (date_tDBOutput_2 < year1_tDBOutput_2
															|| date_tDBOutput_2 >= year10000_tDBOutput_2) {
														pstmt_tDBOutput_2.setString(13, "0000-00-00 00:00:00");
													} else {
														pstmt_tDBOutput_2.setTimestamp(13,
																new java.sql.Timestamp(date_tDBOutput_2));
													}
												} else {
													pstmt_tDBOutput_2.setNull(13, java.sql.Types.DATE);
												}

												if (conventions_uniques.date_fin_convention != null) {
													date_tDBOutput_2 = conventions_uniques.date_fin_convention
															.getTime();
													if (date_tDBOutput_2 < year1_tDBOutput_2
															|| date_tDBOutput_2 >= year10000_tDBOutput_2) {
														pstmt_tDBOutput_2.setString(14, "0000-00-00 00:00:00");
													} else {
														pstmt_tDBOutput_2.setTimestamp(14,
																new java.sql.Timestamp(date_tDBOutput_2));
													}
												} else {
													pstmt_tDBOutput_2.setNull(14, java.sql.Types.DATE);
												}

												if (conventions_uniques.date_signature_convention != null) {
													date_tDBOutput_2 = conventions_uniques.date_signature_convention
															.getTime();
													if (date_tDBOutput_2 < year1_tDBOutput_2
															|| date_tDBOutput_2 >= year10000_tDBOutput_2) {
														pstmt_tDBOutput_2.setString(15, "0000-00-00 00:00:00");
													} else {
														pstmt_tDBOutput_2.setTimestamp(15,
																new java.sql.Timestamp(date_tDBOutput_2));
													}
												} else {
													pstmt_tDBOutput_2.setNull(15, java.sql.Types.DATE);
												}

												pstmt_tDBOutput_2.setInt(16, conventions_uniques.montant_convention);

												pstmt_tDBOutput_2.setInt(17, conventions_uniques.duree_convention);

												pstmt_tDBOutput_2.addBatch();
												nb_line_tDBOutput_2++;

												batchSizeCounter_tDBOutput_2++;
												if (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2) {
													try {
														int countSum_tDBOutput_2 = 0;
														for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
																.executeBatch()) {
															countSum_tDBOutput_2 += (countEach_tDBOutput_2 == java.sql.Statement.EXECUTE_FAILED
																	? 0
																	: 1);
														}
														insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
													} catch (java.sql.BatchUpdateException e) {
														int countSum_tDBOutput_2 = 0;
														for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
															countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																	: countEach_tDBOutput_2);
														}
														insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
														System.err.println(e.getMessage());
													}

													batchSizeCounter_tDBOutput_2 = 0;
												}
												commitCounter_tDBOutput_2++;

												if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {

													try {
														int countSum_tDBOutput_2 = 0;
														for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2
																.executeBatch()) {
															countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : 1);
														}
														insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
													} catch (java.sql.BatchUpdateException e) {
														int countSum_tDBOutput_2 = 0;
														for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
															countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																	: countEach_tDBOutput_2);
														}
														insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
														System.err.println(e.getMessage());

													}
													conn_tDBOutput_2.commit();
													commitCounter_tDBOutput_2 = 0;

												}

												tos_count_tDBOutput_2++;

												/**
												 * [tDBOutput_2 main ] stop
												 */

												/**
												 * [tDBOutput_2 process_data_begin ] start
												 */

												currentComponent = "tDBOutput_2";

												/**
												 * [tDBOutput_2 process_data_begin ] stop
												 */

												/**
												 * [tDBOutput_2 process_data_end ] start
												 */

												currentComponent = "tDBOutput_2";

												/**
												 * [tDBOutput_2 process_data_end ] stop
												 */

											} // End of branch "conventions_uniques"

											/**
											 * [tMap_1 process_data_end ] start
											 */

											currentComponent = "tMap_1";

											/**
											 * [tMap_1 process_data_end ] stop
											 */

										} // End of branch "row1"

										/**
										 * [tUniqRow_1 process_data_end ] start
										 */

										currentComponent = "tUniqRow_1";

										/**
										 * [tUniqRow_1 process_data_end ] stop
										 */

									} // End of branch "conventions_fact"

								} // close loop of lookup 'entreprises' // G_TM_M_043

								/**
								 * [tMap_2 process_data_end ] start
								 */

								currentComponent = "tMap_2";

								/**
								 * [tMap_2 process_data_end ] stop
								 */

							} // End of branch "conventions"

							/**
							 * [tFilterRow_1 process_data_end ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/BI/transparence-sante/data/data.gouv/conventions.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_entreprises != null) {
					tHash_Lookup_entreprises.endGet();
				}
				globalMap.remove("tHash_Lookup_entreprises");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "conventions");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "conventions_fact");
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (batchSizeCounter_tDBOutput_2 != 0) {
						int countSum_tDBOutput_2 = 0;

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_2 = 0;

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");

				}
				resourceMap.put("statementClosed_tDBOutput_2", true);
				if (commitCounter_tDBOutput_2 > 0) {

					conn_tDBOutput_2.commit();

				}

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "conventions_uniques");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_entreprises");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class entreprisesStruct implements routines.system.IPersistableRow<entreprisesStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_convention_fact = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[0];

		public String identifiant;

		public String getIdentifiant() {
			return this.identifiant;
		}

		public String pays_code;

		public String getPays_code() {
			return this.pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String secteur_activite_code;

		public String getSecteur_activite_code() {
			return this.secteur_activite_code;
		}

		public String secteur;

		public String getSecteur() {
			return this.secteur;
		}

		public String denomination_sociale;

		public String getDenomination_sociale() {
			return this.denomination_sociale;
		}

		public String adresse_1;

		public String getAdresse_1() {
			return this.adresse_1;
		}

		public String adresse_2;

		public String getAdresse_2() {
			return this.adresse_2;
		}

		public String adresse_3;

		public String getAdresse_3() {
			return this.adresse_3;
		}

		public String adresse_4;

		public String getAdresse_4() {
			return this.adresse_4;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_convention_fact) {

				try {

					int length = 0;

					this.identifiant = readString(dis);

					this.pays_code = readString(dis);

					this.pays = readString(dis);

					this.secteur_activite_code = readString(dis);

					this.secteur = readString(dis);

					this.denomination_sociale = readString(dis);

					this.adresse_1 = readString(dis);

					this.adresse_2 = readString(dis);

					this.adresse_3 = readString(dis);

					this.adresse_4 = readString(dis);

					this.code_postal = readString(dis);

					this.ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.identifiant, dos);

				// String

				writeString(this.pays_code, dos);

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.secteur_activite_code, dos);

				// String

				writeString(this.secteur, dos);

				// String

				writeString(this.denomination_sociale, dos);

				// String

				writeString(this.adresse_1, dos);

				// String

				writeString(this.adresse_2, dos);

				// String

				writeString(this.adresse_3, dos);

				// String

				writeString(this.adresse_4, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("identifiant=" + identifiant);
			sb.append(",pays_code=" + pays_code);
			sb.append(",pays=" + pays);
			sb.append(",secteur_activite_code=" + secteur_activite_code);
			sb.append(",secteur=" + secteur);
			sb.append(",denomination_sociale=" + denomination_sociale);
			sb.append(",adresse_1=" + adresse_1);
			sb.append(",adresse_2=" + adresse_2);
			sb.append(",adresse_3=" + adresse_3);
			sb.append(",adresse_4=" + adresse_4);
			sb.append(",code_postal=" + code_postal);
			sb.append(",ville=" + ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(entreprisesStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_convention_fact = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[0];

		public String identifiant;

		public String getIdentifiant() {
			return this.identifiant;
		}

		public String pays_code;

		public String getPays_code() {
			return this.pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String secteur_activite_code;

		public String getSecteur_activite_code() {
			return this.secteur_activite_code;
		}

		public String secteur;

		public String getSecteur() {
			return this.secteur;
		}

		public String denomination_sociale;

		public String getDenomination_sociale() {
			return this.denomination_sociale;
		}

		public String adresse_1;

		public String getAdresse_1() {
			return this.adresse_1;
		}

		public String adresse_2;

		public String getAdresse_2() {
			return this.adresse_2;
		}

		public String adresse_3;

		public String getAdresse_3() {
			return this.adresse_3;
		}

		public String adresse_4;

		public String getAdresse_4() {
			return this.adresse_4;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_convention_fact, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_convention_fact) {

				try {

					int length = 0;

					this.identifiant = readString(dis);

					this.pays_code = readString(dis);

					this.pays = readString(dis);

					this.secteur_activite_code = readString(dis);

					this.secteur = readString(dis);

					this.denomination_sociale = readString(dis);

					this.adresse_1 = readString(dis);

					this.adresse_2 = readString(dis);

					this.adresse_3 = readString(dis);

					this.adresse_4 = readString(dis);

					this.code_postal = readString(dis);

					this.ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.identifiant, dos);

				// String

				writeString(this.pays_code, dos);

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.secteur_activite_code, dos);

				// String

				writeString(this.secteur, dos);

				// String

				writeString(this.denomination_sociale, dos);

				// String

				writeString(this.adresse_1, dos);

				// String

				writeString(this.adresse_2, dos);

				// String

				writeString(this.adresse_3, dos);

				// String

				writeString(this.adresse_4, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("identifiant=" + identifiant);
			sb.append(",pays_code=" + pays_code);
			sb.append(",pays=" + pays);
			sb.append(",secteur_activite_code=" + secteur_activite_code);
			sb.append(",secteur=" + secteur);
			sb.append(",denomination_sociale=" + denomination_sociale);
			sb.append(",adresse_1=" + adresse_1);
			sb.append(",adresse_2=" + adresse_2);
			sb.append(",adresse_3=" + adresse_3);
			sb.append(",adresse_4=" + adresse_4);
			sb.append(",code_postal=" + code_postal);
			sb.append(",ville=" + ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				entreprisesStruct entreprises = new entreprisesStruct();

				/**
				 * [tAdvancedHash_entreprises begin ] start
				 */

				ok_Hash.put("tAdvancedHash_entreprises", false);
				start_Hash.put("tAdvancedHash_entreprises", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_entreprises";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "entreprises");
				}

				int tos_count_tAdvancedHash_entreprises = 0;

				// connection name:entreprises
				// source node:tFilterRow_2 - inputs:(row3) outputs:(entreprises,entreprises) |
				// target node:tAdvancedHash_entreprises - inputs:(entreprises) outputs:()
				// linked node: tMap_2 - inputs:(conventions,entreprises)
				// outputs:(conventions_fact)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_entreprises = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<entreprisesStruct> tHash_Lookup_entreprises = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<entreprisesStruct>getLookup(matchingModeEnum_entreprises);

				globalMap.put("tHash_Lookup_entreprises", tHash_Lookup_entreprises);

				/**
				 * [tAdvancedHash_entreprises begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tFilterRow_2 = 0;

				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try {

					Object filename_tFileInputDelimited_4 = "C:/BI/transparence-sante/data/data.gouv/entreprises.csv";
					if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
						if (footer_value_tFileInputDelimited_4 > 0 || random_value_tFileInputDelimited_4 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
								"C:/BI/transparence-sante/data/data.gouv/entreprises.csv", "UTF-8", ",", "\n", false, 1,
								0, limit_tFileInputDelimited_4, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_4 != null && fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();

						row3 = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						row3 = new row3Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_4 = 0;

							columnIndexWithD_tFileInputDelimited_4 = 0;

							row3.identifiant = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 1;

							row3.pays_code = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 2;

							row3.pays = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 3;

							row3.secteur_activite_code = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 4;

							row3.secteur = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 5;

							row3.denomination_sociale = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 6;

							row3.adresse_1 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 7;

							row3.adresse_2 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 8;

							row3.adresse_3 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 9;

							row3.adresse_4 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 10;

							row3.code_postal = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 11;

							row3.ville = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);

							if (rowstate_tFileInputDelimited_4.getException() != null) {
								throw rowstate_tFileInputDelimited_4.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */

						/**
						 * [tFileInputDelimited_4 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_begin ] stop
						 */
// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tFilterRow_2 main ] start
							 */

							currentComponent = "tFilterRow_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
							}

							entreprises = null;
							entreprises = null;
							Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
							ope_tFilterRow_2.matches((// code sample : use row3 to define the condition.
// row3.columnName1.equals("foo") ||!(row3.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
							row3.pays_code != null && row3.code_postal != null
									&& !row3.code_postal.replaceAll("[^0-9]", "").isEmpty()
									&& !row3.pays_code.replaceAll("[^a-zA-Z\\-]", "").isEmpty()),
									"advanced condition failed");

							if (ope_tFilterRow_2.getMatchFlag()) {
								if (entreprises == null) {
									entreprises = new entreprisesStruct();
								}
								entreprises.identifiant = row3.identifiant;
								entreprises.pays_code = row3.pays_code;
								entreprises.pays = row3.pays;
								entreprises.secteur_activite_code = row3.secteur_activite_code;
								entreprises.secteur = row3.secteur;
								entreprises.denomination_sociale = row3.denomination_sociale;
								entreprises.adresse_1 = row3.adresse_1;
								entreprises.adresse_2 = row3.adresse_2;
								entreprises.adresse_3 = row3.adresse_3;
								entreprises.adresse_4 = row3.adresse_4;
								entreprises.code_postal = row3.code_postal;
								entreprises.ville = row3.ville;
								if (entreprises == null) {
									entreprises = new entreprisesStruct();
								}
								entreprises.identifiant = row3.identifiant;
								entreprises.pays_code = row3.pays_code;
								entreprises.pays = row3.pays;
								entreprises.secteur_activite_code = row3.secteur_activite_code;
								entreprises.secteur = row3.secteur;
								entreprises.denomination_sociale = row3.denomination_sociale;
								entreprises.adresse_1 = row3.adresse_1;
								entreprises.adresse_2 = row3.adresse_2;
								entreprises.adresse_3 = row3.adresse_3;
								entreprises.adresse_4 = row3.adresse_4;
								entreprises.code_postal = row3.code_postal;
								entreprises.ville = row3.ville;
								nb_line_ok_tFilterRow_2++;
							} else {
								nb_line_reject_tFilterRow_2++;
							}

							nb_line_tFilterRow_2++;

							tos_count_tFilterRow_2++;

							/**
							 * [tFilterRow_2 main ] stop
							 */

							/**
							 * [tFilterRow_2 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_2";

							/**
							 * [tFilterRow_2 process_data_begin ] stop
							 */
// Start of branch "entreprises"
							if (entreprises != null) {

								/**
								 * [tAdvancedHash_entreprises main ] start
								 */

								currentComponent = "tAdvancedHash_entreprises";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "entreprises");
								}

								entreprisesStruct entreprises_HashRow = new entreprisesStruct();

								entreprises_HashRow.identifiant = entreprises.identifiant;

								entreprises_HashRow.pays_code = entreprises.pays_code;

								entreprises_HashRow.pays = entreprises.pays;

								entreprises_HashRow.secteur_activite_code = entreprises.secteur_activite_code;

								entreprises_HashRow.secteur = entreprises.secteur;

								entreprises_HashRow.denomination_sociale = entreprises.denomination_sociale;

								entreprises_HashRow.adresse_1 = entreprises.adresse_1;

								entreprises_HashRow.adresse_2 = entreprises.adresse_2;

								entreprises_HashRow.adresse_3 = entreprises.adresse_3;

								entreprises_HashRow.adresse_4 = entreprises.adresse_4;

								entreprises_HashRow.code_postal = entreprises.code_postal;

								entreprises_HashRow.ville = entreprises.ville;

								tHash_Lookup_entreprises.put(entreprises_HashRow);

								tos_count_tAdvancedHash_entreprises++;

								/**
								 * [tAdvancedHash_entreprises main ] stop
								 */

								/**
								 * [tAdvancedHash_entreprises process_data_begin ] start
								 */

								currentComponent = "tAdvancedHash_entreprises";

								/**
								 * [tAdvancedHash_entreprises process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_entreprises process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_entreprises";

								/**
								 * [tAdvancedHash_entreprises process_data_end ] stop
								 */

							} // End of branch "entreprises"

							/**
							 * [tFilterRow_2 process_data_end ] start
							 */

							currentComponent = "tFilterRow_2";

							/**
							 * [tFilterRow_2 process_data_end ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_4 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

					}
				} finally {
					if (!((Object) ("C:/BI/transparence-sante/data/data.gouv/entreprises.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_4 != null) {
							fid_tFileInputDelimited_4.close();
						}
					}
					if (fid_tFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE", fid_tFileInputDelimited_4.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_entreprises end ] start
				 */

				currentComponent = "tAdvancedHash_entreprises";

				tHash_Lookup_entreprises.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "entreprises");
				}

				ok_Hash.put("tAdvancedHash_entreprises", true);
				end_Hash.put("tAdvancedHash_entreprises", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_entreprises end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_entreprises finally ] start
				 */

				currentComponent = "tAdvancedHash_entreprises";

				/**
				 * [tAdvancedHash_entreprises finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final convention_fact convention_factClass = new convention_fact();

		int exitCode = convention_factClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = convention_fact.class.getClassLoader().getResourceAsStream(
					"transparence_sante_bi/convention_fact_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = convention_fact.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : convention_fact");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 199764 characters generated by Talend Open Studio for Data Integration on the
 * 31 janvier 2021 18:36:34 CET
 ************************************************************************************************/