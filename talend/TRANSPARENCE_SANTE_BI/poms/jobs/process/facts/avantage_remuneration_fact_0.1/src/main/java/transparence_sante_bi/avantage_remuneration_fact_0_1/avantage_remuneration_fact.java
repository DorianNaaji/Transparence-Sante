// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package transparence_sante_bi.avantage_remuneration_fact_0_1;

import routines.Numeric;
import routines.DateTransformations;
import routines.DataOperation;
import routines.MyStringRoutine;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.NatureAvantageIdGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: avantage_remuneration_fact Purpose: Remplir la table des faits des
 * avantages et rémunérations<br>
 * Description: Beaucoup de lignes. (13 millions de lignes dans les csv) <br>
 * 
 * @author haytham.elghazel@univ-lyon1.fr
 * @version 7.3.1.20200219_1130
 * @status DEV
 */
public class avantage_remuneration_fact implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "avantage_remuneration_fact";
	private final String projectName = "TRANSPARENCE_SANTE_BI";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					avantage_remuneration_fact.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(avantage_remuneration_fact.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements routines.system.IPersistableComparableLookupRow<row1Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String identifiant;

		public String getIdentifiant() {
			return this.identifiant;
		}

		public String pays_code;

		public String getPays_code() {
			return this.pays_code;
		}

		public String secteur_activite_code;

		public String getSecteur_activite_code() {
			return this.secteur_activite_code;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.identifiant == null) ? 0 : this.identifiant.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.identifiant == null) {
				if (other.identifiant != null)
					return false;

			} else if (!this.identifiant.equals(other.identifiant))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.identifiant = this.identifiant;
			other.pays_code = this.pays_code;
			other.secteur_activite_code = this.secteur_activite_code;
			other.code_postal = this.code_postal;
			other.ville = this.ville;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.identifiant = this.identifiant;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact) {

				try {

					int length = 0;

					this.identifiant = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.identifiant, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.pays_code = readString(dis, ois);

				this.secteur_activite_code = readString(dis, ois);

				this.code_postal = readString(dis, ois);

				this.ville = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.pays_code, dos, oos);

				writeString(this.secteur_activite_code, dos, oos);

				writeString(this.code_postal, dos, oos);

				writeString(this.ville, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("identifiant=" + identifiant);
			sb.append(",pays_code=" + pays_code);
			sb.append(",secteur_activite_code=" + secteur_activite_code);
			sb.append(",code_postal=" + code_postal);
			sb.append(",ville=" + ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.identifiant, other.identifiant);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tAdvancedHash_row1 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row1", false);
				start_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tAdvancedHash_row1 = 0;

				// connection name:row1
				// source node:tFileInputDelimited_3 - inputs:(after_tFileInputDelimited_1)
				// outputs:(row1,row1) | target node:tAdvancedHash_row1 - inputs:(row1)
				// outputs:()
				// linked node: tMap_2 - inputs:(remunerations,row1) outputs:(remuneration_fact)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row1 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row1Struct>getLookup(matchingModeEnum_row1);

				globalMap.put("tHash_Lookup_row1", tHash_Lookup_row1);

				/**
				 * [tAdvancedHash_row1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /** Start field tFileInputDelimited_3:FILENAME */
						"C:/BI/transparence-sante/data/data.gouv/entreprises.csv"/**
																					 * End field
																					 * tFileInputDelimited_3:FILENAME
																					 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0], "UTF-8");
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_3)),
											"UTF-8")),
									fieldSeparator_tFileInputDelimited_3[0]);
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd("" + rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar('"');

						csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 1; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_3.readNext()) {

								totalLinetFileInputDelimited_3++;

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
											: totalLinetFileInputDelimited_3 - footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3
										? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0], "UTF-8");
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_3)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_3[0]);
							}
							csvReadertFileInputDelimited_3.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3.setLineEnd("" + rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar('"');

							csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 1; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_3 != 0 && csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {
						rowstate_tFileInputDelimited_3.reset();

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3.getValues();

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						row1 = null;

						row1 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row1 = new row1Struct();
						try {

							char fieldSeparator_tFileInputDelimited_3_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_3_ListType = ((String) ",").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_3.length == 1 && ("\015").equals(rowtFileInputDelimited_3[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row1.identifiant = null;

								row1.pays_code = null;

								row1.secteur_activite_code = null;

								row1.code_postal = null;

								row1.ville = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row1.identifiant = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row1.identifiant = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row1.pays_code = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row1.pays_code = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 2;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row1.secteur_activite_code = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row1.secteur_activite_code = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 3;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row1.code_postal = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row1.code_postal = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 4;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row1.ville = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row1.ville = null;

								}

							}

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tAdvancedHash_row1 main ] start
							 */

							currentComponent = "tAdvancedHash_row1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
							}

							row1Struct row1_HashRow = new row1Struct();

							row1_HashRow.identifiant = row1.identifiant;

							row1_HashRow.pays_code = row1.pays_code;

							row1_HashRow.secteur_activite_code = row1.secteur_activite_code;

							row1_HashRow.code_postal = row1.code_postal;

							row1_HashRow.ville = row1.ville;

							tHash_Lookup_row1.put(row1_HashRow);

							tos_count_tAdvancedHash_row1++;

							/**
							 * [tAdvancedHash_row1 main ] stop
							 */

							/**
							 * [tAdvancedHash_row1 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row1";

							/**
							 * [tAdvancedHash_row1 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row1 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row1";

							/**
							 * [tAdvancedHash_row1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", nb_line_tFileInputDelimited_3);
					}

				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row1 end ] start
				 */

				currentComponent = "tAdvancedHash_row1";

				tHash_Lookup_row1.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tAdvancedHash_row1", true);
				end_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row1 finally ] start
				 */

				currentComponent = "tAdvancedHash_row1";

				/**
				 * [tAdvancedHash_row1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String identifiant;

		public String getIdentifiant() {
			return this.identifiant;
		}

		public String pays_code;

		public String getPays_code() {
			return this.pays_code;
		}

		public String secteur_activite_code;

		public String getSecteur_activite_code() {
			return this.secteur_activite_code;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.entreprise_identifiant == null) ? 0 : this.entreprise_identifiant.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.entreprise_identifiant == null) {
				if (other.entreprise_identifiant != null)
					return false;

			} else if (!this.entreprise_identifiant.equals(other.entreprise_identifiant))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.entreprise_identifiant = this.entreprise_identifiant;
			other.identifiant = this.identifiant;
			other.pays_code = this.pays_code;
			other.secteur_activite_code = this.secteur_activite_code;
			other.code_postal = this.code_postal;
			other.ville = this.ville;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.entreprise_identifiant = this.entreprise_identifiant;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact) {

				try {

					int length = 0;

					this.entreprise_identifiant = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entreprise_identifiant, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.identifiant = readString(dis, ois);

				this.pays_code = readString(dis, ois);

				this.secteur_activite_code = readString(dis, ois);

				this.code_postal = readString(dis, ois);

				this.ville = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.identifiant, dos, oos);

				writeString(this.pays_code, dos, oos);

				writeString(this.secteur_activite_code, dos, oos);

				writeString(this.code_postal, dos, oos);

				writeString(this.ville, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",identifiant=" + identifiant);
			sb.append(",pays_code=" + pays_code);
			sb.append(",secteur_activite_code=" + secteur_activite_code);
			sb.append(",code_postal=" + code_postal);
			sb.append(",ville=" + ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.entreprise_identifiant, other.entreprise_identifiant);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tFileInputDelimited_4 - inputs:(after_tFileInputDelimited_5)
				// outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2)
				// outputs:()
				// linked node: tMap_1 - inputs:(row2,avantages) outputs:(avantage_fact)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct>getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_4 = 0;
				int footer_tFileInputDelimited_4 = 0;
				int totalLinetFileInputDelimited_4 = 0;
				int limittFileInputDelimited_4 = -1;
				int lastLinetFileInputDelimited_4 = -1;

				char fieldSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_4 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_4 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_4 = /** Start field tFileInputDelimited_4:FILENAME */
						"C:/BI/transparence-sante/data/data.gouv/entreprises.csv"/**
																					 * End field
																					 * tFileInputDelimited_4:FILENAME
																					 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_4 = null;

				try {

					String[] rowtFileInputDelimited_4 = null;
					int currentLinetFileInputDelimited_4 = 0;
					int outputLinetFileInputDelimited_4 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_4 = 0;
							if (footer_value_tFileInputDelimited_4 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_4,
									fieldSeparator_tFileInputDelimited_4[0], "UTF-8");
						} else {
							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_4)),
											"UTF-8")),
									fieldSeparator_tFileInputDelimited_4[0]);
						}

						csvReadertFileInputDelimited_4.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
							csvReadertFileInputDelimited_4.setLineEnd("" + rowSeparator_tFileInputDelimited_4[0]);

						csvReadertFileInputDelimited_4.setQuoteChar('"');

						csvReadertFileInputDelimited_4.setEscapeChar(csvReadertFileInputDelimited_4.getQuoteChar());

						if (footer_tFileInputDelimited_4 > 0) {
							for (totalLinetFileInputDelimited_4 = 0; totalLinetFileInputDelimited_4 < 1; totalLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
							csvReadertFileInputDelimited_4.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_4.readNext()) {

								totalLinetFileInputDelimited_4++;

							}
							int lastLineTemptFileInputDelimited_4 = totalLinetFileInputDelimited_4
									- footer_tFileInputDelimited_4 < 0 ? 0
											: totalLinetFileInputDelimited_4 - footer_tFileInputDelimited_4;
							if (lastLinetFileInputDelimited_4 > 0) {
								lastLinetFileInputDelimited_4 = lastLinetFileInputDelimited_4 < lastLineTemptFileInputDelimited_4
										? lastLinetFileInputDelimited_4
										: lastLineTemptFileInputDelimited_4;
							} else {
								lastLinetFileInputDelimited_4 = lastLineTemptFileInputDelimited_4;
							}

							csvReadertFileInputDelimited_4.close();
							if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_4,
										fieldSeparator_tFileInputDelimited_4[0], "UTF-8");
							} else {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_4)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_4[0]);
							}
							csvReadertFileInputDelimited_4.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
								csvReadertFileInputDelimited_4.setLineEnd("" + rowSeparator_tFileInputDelimited_4[0]);

							csvReadertFileInputDelimited_4.setQuoteChar('"');

							csvReadertFileInputDelimited_4.setEscapeChar(csvReadertFileInputDelimited_4.getQuoteChar());

						}

						if (limittFileInputDelimited_4 != 0) {
							for (currentLinetFileInputDelimited_4 = 0; currentLinetFileInputDelimited_4 < 1; currentLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
						}
						csvReadertFileInputDelimited_4.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_4 != 0 && csvReadertFileInputDelimited_4 != null
							&& csvReadertFileInputDelimited_4.readNext()) {
						rowstate_tFileInputDelimited_4.reset();

						rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4.getValues();

						currentLinetFileInputDelimited_4++;

						if (lastLinetFileInputDelimited_4 > -1
								&& currentLinetFileInputDelimited_4 > lastLinetFileInputDelimited_4) {
							break;
						}
						outputLinetFileInputDelimited_4++;
						if (limittFileInputDelimited_4 > 0
								&& outputLinetFileInputDelimited_4 > limittFileInputDelimited_4) {
							break;
						}

						row2 = null;

						row2 = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						row2 = new row2Struct();
						try {

							char fieldSeparator_tFileInputDelimited_4_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_4_ListType = ((String) ",").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_4.length == 1 && ("\015").equals(rowtFileInputDelimited_4[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row2.entreprise_identifiant = null;

								row2.identifiant = null;

								row2.pays_code = null;

								row2.secteur_activite_code = null;

								row2.code_postal = null;

								row2.ville = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_4 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_4 = 0;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row2.entreprise_identifiant = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									row2.entreprise_identifiant = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 1;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row2.identifiant = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									row2.identifiant = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 2;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row2.pays_code = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									row2.pays_code = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 3;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row2.secteur_activite_code = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									row2.secteur_activite_code = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 4;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row2.code_postal = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									row2.code_postal = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 5;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row2.ville = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									row2.ville = null;

								}

							}

							if (rowstate_tFileInputDelimited_4.getException() != null) {
								throw rowstate_tFileInputDelimited_4.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */

						/**
						 * [tFileInputDelimited_4 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tAdvancedHash_row2 main ] start
							 */

							currentComponent = "tAdvancedHash_row2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
							}

							row2Struct row2_HashRow = new row2Struct();

							row2_HashRow.entreprise_identifiant = row2.entreprise_identifiant;

							row2_HashRow.identifiant = row2.identifiant;

							row2_HashRow.pays_code = row2.pays_code;

							row2_HashRow.secteur_activite_code = row2.secteur_activite_code;

							row2_HashRow.code_postal = row2.code_postal;

							row2_HashRow.ville = row2.ville;

							tHash_Lookup_row2.put(row2_HashRow);

							tos_count_tAdvancedHash_row2++;

							/**
							 * [tAdvancedHash_row2 main ] stop
							 */

							/**
							 * [tAdvancedHash_row2 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row2";

							/**
							 * [tAdvancedHash_row2 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row2 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row2";

							/**
							 * [tAdvancedHash_row2 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_4 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						nb_line_tFileInputDelimited_4++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_4 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_4 != null) {
							csvReadertFileInputDelimited_4.close();
						}
					}
					if (csvReadertFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE", nb_line_tFileInputDelimited_4);
					}

				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ligne_id;

		public String getLigne_id() {
			return this.ligne_id;
		}

		public String entreprise_id;

		public String getEntreprise_id() {
			return this.entreprise_id;
		}

		public String beneficiaire_id;

		public String getBeneficiaire_id() {
			return this.beneficiaire_id;
		}

		public String categorie_beneficiaire_id;

		public String getCategorie_beneficiaire_id() {
			return this.categorie_beneficiaire_id;
		}

		public String qualite_beneficiaire_id;

		public String getQualite_beneficiaire_id() {
			return this.qualite_beneficiaire_id;
		}

		public String titre_beneficiaire_id;

		public String getTitre_beneficiaire_id() {
			return this.titre_beneficiaire_id;
		}

		public String adresse_beneficiaire_id;

		public String getAdresse_beneficiaire_id() {
			return this.adresse_beneficiaire_id;
		}

		public String adresse_entreprise_id;

		public String getAdresse_entreprise_id() {
			return this.adresse_entreprise_id;
		}

		public String specialite_beneficiaire_id;

		public String getSpecialite_beneficiaire_id() {
			return this.specialite_beneficiaire_id;
		}

		public String secteur_activite_entreprise_id;

		public String getSecteur_activite_entreprise_id() {
			return this.secteur_activite_entreprise_id;
		}

		public int type_avantage_id;

		public int getType_avantage_id() {
			return this.type_avantage_id;
		}

		public java.util.Date date_id;

		public java.util.Date getDate_id() {
			return this.date_id;
		}

		public boolean is_avantage;

		public boolean getIs_avantage() {
			return this.is_avantage;
		}

		public BigDecimal montant_ttc;

		public BigDecimal getMontant_ttc() {
			return this.montant_ttc;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ligne_id == null) ? 0 : this.ligne_id.hashCode());

				result = prime * result + ((this.entreprise_id == null) ? 0 : this.entreprise_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.ligne_id == null) {
				if (other.ligne_id != null)
					return false;

			} else if (!this.ligne_id.equals(other.ligne_id))

				return false;

			if (this.entreprise_id == null) {
				if (other.entreprise_id != null)
					return false;

			} else if (!this.entreprise_id.equals(other.entreprise_id))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.ligne_id = this.ligne_id;
			other.entreprise_id = this.entreprise_id;
			other.beneficiaire_id = this.beneficiaire_id;
			other.categorie_beneficiaire_id = this.categorie_beneficiaire_id;
			other.qualite_beneficiaire_id = this.qualite_beneficiaire_id;
			other.titre_beneficiaire_id = this.titre_beneficiaire_id;
			other.adresse_beneficiaire_id = this.adresse_beneficiaire_id;
			other.adresse_entreprise_id = this.adresse_entreprise_id;
			other.specialite_beneficiaire_id = this.specialite_beneficiaire_id;
			other.secteur_activite_entreprise_id = this.secteur_activite_entreprise_id;
			other.type_avantage_id = this.type_avantage_id;
			other.date_id = this.date_id;
			other.is_avantage = this.is_avantage;
			other.montant_ttc = this.montant_ttc;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.ligne_id = this.ligne_id;
			other.entreprise_id = this.entreprise_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact) {

				try {

					int length = 0;

					this.ligne_id = readString(dis);

					this.entreprise_id = readString(dis);

					this.beneficiaire_id = readString(dis);

					this.categorie_beneficiaire_id = readString(dis);

					this.qualite_beneficiaire_id = readString(dis);

					this.titre_beneficiaire_id = readString(dis);

					this.adresse_beneficiaire_id = readString(dis);

					this.adresse_entreprise_id = readString(dis);

					this.specialite_beneficiaire_id = readString(dis);

					this.secteur_activite_entreprise_id = readString(dis);

					this.type_avantage_id = dis.readInt();

					this.date_id = readDate(dis);

					this.is_avantage = dis.readBoolean();

					this.montant_ttc = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ligne_id, dos);

				// String

				writeString(this.entreprise_id, dos);

				// String

				writeString(this.beneficiaire_id, dos);

				// String

				writeString(this.categorie_beneficiaire_id, dos);

				// String

				writeString(this.qualite_beneficiaire_id, dos);

				// String

				writeString(this.titre_beneficiaire_id, dos);

				// String

				writeString(this.adresse_beneficiaire_id, dos);

				// String

				writeString(this.adresse_entreprise_id, dos);

				// String

				writeString(this.specialite_beneficiaire_id, dos);

				// String

				writeString(this.secteur_activite_entreprise_id, dos);

				// int

				dos.writeInt(this.type_avantage_id);

				// java.util.Date

				writeDate(this.date_id, dos);

				// boolean

				dos.writeBoolean(this.is_avantage);

				// BigDecimal

				dos.writeObject(this.montant_ttc);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ligne_id=" + ligne_id);
			sb.append(",entreprise_id=" + entreprise_id);
			sb.append(",beneficiaire_id=" + beneficiaire_id);
			sb.append(",categorie_beneficiaire_id=" + categorie_beneficiaire_id);
			sb.append(",qualite_beneficiaire_id=" + qualite_beneficiaire_id);
			sb.append(",titre_beneficiaire_id=" + titre_beneficiaire_id);
			sb.append(",adresse_beneficiaire_id=" + adresse_beneficiaire_id);
			sb.append(",adresse_entreprise_id=" + adresse_entreprise_id);
			sb.append(",specialite_beneficiaire_id=" + specialite_beneficiaire_id);
			sb.append(",secteur_activite_entreprise_id=" + secteur_activite_entreprise_id);
			sb.append(",type_avantage_id=" + String.valueOf(type_avantage_id));
			sb.append(",date_id=" + String.valueOf(date_id));
			sb.append(",is_avantage=" + String.valueOf(is_avantage));
			sb.append(",montant_ttc=" + String.valueOf(montant_ttc));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ligne_id, other.ligne_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.entreprise_id, other.entreprise_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ligne_id;

		public String getLigne_id() {
			return this.ligne_id;
		}

		public String entreprise_id;

		public String getEntreprise_id() {
			return this.entreprise_id;
		}

		public String beneficiaire_id;

		public String getBeneficiaire_id() {
			return this.beneficiaire_id;
		}

		public String categorie_beneficiaire_id;

		public String getCategorie_beneficiaire_id() {
			return this.categorie_beneficiaire_id;
		}

		public String qualite_beneficiaire_id;

		public String getQualite_beneficiaire_id() {
			return this.qualite_beneficiaire_id;
		}

		public String titre_beneficiaire_id;

		public String getTitre_beneficiaire_id() {
			return this.titre_beneficiaire_id;
		}

		public String adresse_beneficiaire_id;

		public String getAdresse_beneficiaire_id() {
			return this.adresse_beneficiaire_id;
		}

		public String adresse_entreprise_id;

		public String getAdresse_entreprise_id() {
			return this.adresse_entreprise_id;
		}

		public String specialite_beneficiaire_id;

		public String getSpecialite_beneficiaire_id() {
			return this.specialite_beneficiaire_id;
		}

		public String secteur_activite_entreprise_id;

		public String getSecteur_activite_entreprise_id() {
			return this.secteur_activite_entreprise_id;
		}

		public int type_avantage_id;

		public int getType_avantage_id() {
			return this.type_avantage_id;
		}

		public java.util.Date date_id;

		public java.util.Date getDate_id() {
			return this.date_id;
		}

		public boolean is_avantage;

		public boolean getIs_avantage() {
			return this.is_avantage;
		}

		public BigDecimal montant_ttc;

		public BigDecimal getMontant_ttc() {
			return this.montant_ttc;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ligne_id == null) ? 0 : this.ligne_id.hashCode());

				result = prime * result + ((this.entreprise_id == null) ? 0 : this.entreprise_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.ligne_id == null) {
				if (other.ligne_id != null)
					return false;

			} else if (!this.ligne_id.equals(other.ligne_id))

				return false;

			if (this.entreprise_id == null) {
				if (other.entreprise_id != null)
					return false;

			} else if (!this.entreprise_id.equals(other.entreprise_id))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.ligne_id = this.ligne_id;
			other.entreprise_id = this.entreprise_id;
			other.beneficiaire_id = this.beneficiaire_id;
			other.categorie_beneficiaire_id = this.categorie_beneficiaire_id;
			other.qualite_beneficiaire_id = this.qualite_beneficiaire_id;
			other.titre_beneficiaire_id = this.titre_beneficiaire_id;
			other.adresse_beneficiaire_id = this.adresse_beneficiaire_id;
			other.adresse_entreprise_id = this.adresse_entreprise_id;
			other.specialite_beneficiaire_id = this.specialite_beneficiaire_id;
			other.secteur_activite_entreprise_id = this.secteur_activite_entreprise_id;
			other.type_avantage_id = this.type_avantage_id;
			other.date_id = this.date_id;
			other.is_avantage = this.is_avantage;
			other.montant_ttc = this.montant_ttc;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.ligne_id = this.ligne_id;
			other.entreprise_id = this.entreprise_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact) {

				try {

					int length = 0;

					this.ligne_id = readString(dis);

					this.entreprise_id = readString(dis);

					this.beneficiaire_id = readString(dis);

					this.categorie_beneficiaire_id = readString(dis);

					this.qualite_beneficiaire_id = readString(dis);

					this.titre_beneficiaire_id = readString(dis);

					this.adresse_beneficiaire_id = readString(dis);

					this.adresse_entreprise_id = readString(dis);

					this.specialite_beneficiaire_id = readString(dis);

					this.secteur_activite_entreprise_id = readString(dis);

					this.type_avantage_id = dis.readInt();

					this.date_id = readDate(dis);

					this.is_avantage = dis.readBoolean();

					this.montant_ttc = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ligne_id, dos);

				// String

				writeString(this.entreprise_id, dos);

				// String

				writeString(this.beneficiaire_id, dos);

				// String

				writeString(this.categorie_beneficiaire_id, dos);

				// String

				writeString(this.qualite_beneficiaire_id, dos);

				// String

				writeString(this.titre_beneficiaire_id, dos);

				// String

				writeString(this.adresse_beneficiaire_id, dos);

				// String

				writeString(this.adresse_entreprise_id, dos);

				// String

				writeString(this.specialite_beneficiaire_id, dos);

				// String

				writeString(this.secteur_activite_entreprise_id, dos);

				// int

				dos.writeInt(this.type_avantage_id);

				// java.util.Date

				writeDate(this.date_id, dos);

				// boolean

				dos.writeBoolean(this.is_avantage);

				// BigDecimal

				dos.writeObject(this.montant_ttc);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ligne_id=" + ligne_id);
			sb.append(",entreprise_id=" + entreprise_id);
			sb.append(",beneficiaire_id=" + beneficiaire_id);
			sb.append(",categorie_beneficiaire_id=" + categorie_beneficiaire_id);
			sb.append(",qualite_beneficiaire_id=" + qualite_beneficiaire_id);
			sb.append(",titre_beneficiaire_id=" + titre_beneficiaire_id);
			sb.append(",adresse_beneficiaire_id=" + adresse_beneficiaire_id);
			sb.append(",adresse_entreprise_id=" + adresse_entreprise_id);
			sb.append(",specialite_beneficiaire_id=" + specialite_beneficiaire_id);
			sb.append(",secteur_activite_entreprise_id=" + secteur_activite_entreprise_id);
			sb.append(",type_avantage_id=" + String.valueOf(type_avantage_id));
			sb.append(",date_id=" + String.valueOf(date_id));
			sb.append(",is_avantage=" + String.valueOf(is_avantage));
			sb.append(",montant_ttc=" + String.valueOf(montant_ttc));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ligne_id, other.ligne_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.entreprise_id, other.entreprise_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class avantage_factStruct implements routines.system.IPersistableRow<avantage_factStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ligne_id;

		public String getLigne_id() {
			return this.ligne_id;
		}

		public String entreprise_id;

		public String getEntreprise_id() {
			return this.entreprise_id;
		}

		public String beneficiaire_id;

		public String getBeneficiaire_id() {
			return this.beneficiaire_id;
		}

		public String categorie_beneficiaire_id;

		public String getCategorie_beneficiaire_id() {
			return this.categorie_beneficiaire_id;
		}

		public String qualite_beneficiaire_id;

		public String getQualite_beneficiaire_id() {
			return this.qualite_beneficiaire_id;
		}

		public String titre_beneficiaire_id;

		public String getTitre_beneficiaire_id() {
			return this.titre_beneficiaire_id;
		}

		public String adresse_beneficiaire_id;

		public String getAdresse_beneficiaire_id() {
			return this.adresse_beneficiaire_id;
		}

		public String adresse_entreprise_id;

		public String getAdresse_entreprise_id() {
			return this.adresse_entreprise_id;
		}

		public String specialite_beneficiaire_id;

		public String getSpecialite_beneficiaire_id() {
			return this.specialite_beneficiaire_id;
		}

		public String secteur_activite_entreprise_id;

		public String getSecteur_activite_entreprise_id() {
			return this.secteur_activite_entreprise_id;
		}

		public int type_avantage_id;

		public int getType_avantage_id() {
			return this.type_avantage_id;
		}

		public java.util.Date date_id;

		public java.util.Date getDate_id() {
			return this.date_id;
		}

		public boolean is_avantage;

		public boolean getIs_avantage() {
			return this.is_avantage;
		}

		public BigDecimal montant_ttc;

		public BigDecimal getMontant_ttc() {
			return this.montant_ttc;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ligne_id == null) ? 0 : this.ligne_id.hashCode());

				result = prime * result + ((this.entreprise_id == null) ? 0 : this.entreprise_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final avantage_factStruct other = (avantage_factStruct) obj;

			if (this.ligne_id == null) {
				if (other.ligne_id != null)
					return false;

			} else if (!this.ligne_id.equals(other.ligne_id))

				return false;

			if (this.entreprise_id == null) {
				if (other.entreprise_id != null)
					return false;

			} else if (!this.entreprise_id.equals(other.entreprise_id))

				return false;

			return true;
		}

		public void copyDataTo(avantage_factStruct other) {

			other.ligne_id = this.ligne_id;
			other.entreprise_id = this.entreprise_id;
			other.beneficiaire_id = this.beneficiaire_id;
			other.categorie_beneficiaire_id = this.categorie_beneficiaire_id;
			other.qualite_beneficiaire_id = this.qualite_beneficiaire_id;
			other.titre_beneficiaire_id = this.titre_beneficiaire_id;
			other.adresse_beneficiaire_id = this.adresse_beneficiaire_id;
			other.adresse_entreprise_id = this.adresse_entreprise_id;
			other.specialite_beneficiaire_id = this.specialite_beneficiaire_id;
			other.secteur_activite_entreprise_id = this.secteur_activite_entreprise_id;
			other.type_avantage_id = this.type_avantage_id;
			other.date_id = this.date_id;
			other.is_avantage = this.is_avantage;
			other.montant_ttc = this.montant_ttc;

		}

		public void copyKeysDataTo(avantage_factStruct other) {

			other.ligne_id = this.ligne_id;
			other.entreprise_id = this.entreprise_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact) {

				try {

					int length = 0;

					this.ligne_id = readString(dis);

					this.entreprise_id = readString(dis);

					this.beneficiaire_id = readString(dis);

					this.categorie_beneficiaire_id = readString(dis);

					this.qualite_beneficiaire_id = readString(dis);

					this.titre_beneficiaire_id = readString(dis);

					this.adresse_beneficiaire_id = readString(dis);

					this.adresse_entreprise_id = readString(dis);

					this.specialite_beneficiaire_id = readString(dis);

					this.secteur_activite_entreprise_id = readString(dis);

					this.type_avantage_id = dis.readInt();

					this.date_id = readDate(dis);

					this.is_avantage = dis.readBoolean();

					this.montant_ttc = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ligne_id, dos);

				// String

				writeString(this.entreprise_id, dos);

				// String

				writeString(this.beneficiaire_id, dos);

				// String

				writeString(this.categorie_beneficiaire_id, dos);

				// String

				writeString(this.qualite_beneficiaire_id, dos);

				// String

				writeString(this.titre_beneficiaire_id, dos);

				// String

				writeString(this.adresse_beneficiaire_id, dos);

				// String

				writeString(this.adresse_entreprise_id, dos);

				// String

				writeString(this.specialite_beneficiaire_id, dos);

				// String

				writeString(this.secteur_activite_entreprise_id, dos);

				// int

				dos.writeInt(this.type_avantage_id);

				// java.util.Date

				writeDate(this.date_id, dos);

				// boolean

				dos.writeBoolean(this.is_avantage);

				// BigDecimal

				dos.writeObject(this.montant_ttc);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ligne_id=" + ligne_id);
			sb.append(",entreprise_id=" + entreprise_id);
			sb.append(",beneficiaire_id=" + beneficiaire_id);
			sb.append(",categorie_beneficiaire_id=" + categorie_beneficiaire_id);
			sb.append(",qualite_beneficiaire_id=" + qualite_beneficiaire_id);
			sb.append(",titre_beneficiaire_id=" + titre_beneficiaire_id);
			sb.append(",adresse_beneficiaire_id=" + adresse_beneficiaire_id);
			sb.append(",adresse_entreprise_id=" + adresse_entreprise_id);
			sb.append(",specialite_beneficiaire_id=" + specialite_beneficiaire_id);
			sb.append(",secteur_activite_entreprise_id=" + secteur_activite_entreprise_id);
			sb.append(",type_avantage_id=" + String.valueOf(type_avantage_id));
			sb.append(",date_id=" + String.valueOf(date_id));
			sb.append(",is_avantage=" + String.valueOf(is_avantage));
			sb.append(",montant_ttc=" + String.valueOf(montant_ttc));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(avantage_factStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ligne_id, other.ligne_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.entreprise_id, other.entreprise_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class avantagesStruct implements routines.system.IPersistableRow<avantagesStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[0];

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String ligne_identifiant;

		public String getLigne_identifiant() {
			return this.ligne_identifiant;
		}

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String benef_qualite_code;

		public String getBenef_qualite_code() {
			return this.benef_qualite_code;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_ville;

		public String getBenef_ville() {
			return this.benef_ville;
		}

		public String benef_pays_code;

		public String getBenef_pays_code() {
			return this.benef_pays_code;
		}

		public String benef_titre_code;

		public String getBenef_titre_code() {
			return this.benef_titre_code;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String avant_date_signature;

		public String getAvant_date_signature() {
			return this.avant_date_signature;
		}

		public Integer avant_montant_ttc;

		public Integer getAvant_montant_ttc() {
			return this.avant_montant_ttc;
		}

		public String avant_nature;

		public String getAvant_nature() {
			return this.avant_nature;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact) {

				try {

					int length = 0;

					this.entreprise_identifiant = readString(dis);

					this.ligne_identifiant = readString(dis);

					this.benef_categorie_code = readString(dis);

					this.benef_qualite_code = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_ville = readString(dis);

					this.benef_pays_code = readString(dis);

					this.benef_titre_code = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.avant_date_signature = readString(dis);

					this.avant_montant_ttc = readInteger(dis);

					this.avant_nature = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entreprise_identifiant, dos);

				// String

				writeString(this.ligne_identifiant, dos);

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.benef_qualite_code, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_ville, dos);

				// String

				writeString(this.benef_pays_code, dos);

				// String

				writeString(this.benef_titre_code, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.avant_date_signature, dos);

				// Integer

				writeInteger(this.avant_montant_ttc, dos);

				// String

				writeString(this.avant_nature, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",ligne_identifiant=" + ligne_identifiant);
			sb.append(",benef_categorie_code=" + benef_categorie_code);
			sb.append(",benef_qualite_code=" + benef_qualite_code);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_ville=" + benef_ville);
			sb.append(",benef_pays_code=" + benef_pays_code);
			sb.append(",benef_titre_code=" + benef_titre_code);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",avant_date_signature=" + avant_date_signature);
			sb.append(",avant_montant_ttc=" + String.valueOf(avant_montant_ttc));
			sb.append(",avant_nature=" + avant_nature);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(avantagesStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_5Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_5Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[0];

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String ligne_identifiant;

		public String getLigne_identifiant() {
			return this.ligne_identifiant;
		}

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String benef_qualite_code;

		public String getBenef_qualite_code() {
			return this.benef_qualite_code;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_ville;

		public String getBenef_ville() {
			return this.benef_ville;
		}

		public String benef_pays_code;

		public String getBenef_pays_code() {
			return this.benef_pays_code;
		}

		public String benef_titre_code;

		public String getBenef_titre_code() {
			return this.benef_titre_code;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String avant_date_signature;

		public String getAvant_date_signature() {
			return this.avant_date_signature;
		}

		public Integer avant_montant_ttc;

		public Integer getAvant_montant_ttc() {
			return this.avant_montant_ttc;
		}

		public String avant_nature;

		public String getAvant_nature() {
			return this.avant_nature;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact) {

				try {

					int length = 0;

					this.entreprise_identifiant = readString(dis);

					this.ligne_identifiant = readString(dis);

					this.benef_categorie_code = readString(dis);

					this.benef_qualite_code = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_ville = readString(dis);

					this.benef_pays_code = readString(dis);

					this.benef_titre_code = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.avant_date_signature = readString(dis);

					this.avant_montant_ttc = readInteger(dis);

					this.avant_nature = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entreprise_identifiant, dos);

				// String

				writeString(this.ligne_identifiant, dos);

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.benef_qualite_code, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_ville, dos);

				// String

				writeString(this.benef_pays_code, dos);

				// String

				writeString(this.benef_titre_code, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.avant_date_signature, dos);

				// Integer

				writeInteger(this.avant_montant_ttc, dos);

				// String

				writeString(this.avant_nature, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",ligne_identifiant=" + ligne_identifiant);
			sb.append(",benef_categorie_code=" + benef_categorie_code);
			sb.append(",benef_qualite_code=" + benef_qualite_code);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_ville=" + benef_ville);
			sb.append(",benef_pays_code=" + benef_pays_code);
			sb.append(",benef_titre_code=" + benef_titre_code);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",avant_date_signature=" + avant_date_signature);
			sb.append(",avant_montant_ttc=" + String.valueOf(avant_montant_ttc));
			sb.append(",avant_nature=" + avant_nature);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class remuneration_factStruct implements routines.system.IPersistableRow<remuneration_factStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ligne_id;

		public String getLigne_id() {
			return this.ligne_id;
		}

		public String entreprise_id;

		public String getEntreprise_id() {
			return this.entreprise_id;
		}

		public String beneficiaire_id;

		public String getBeneficiaire_id() {
			return this.beneficiaire_id;
		}

		public String categorie_beneficiaire_id;

		public String getCategorie_beneficiaire_id() {
			return this.categorie_beneficiaire_id;
		}

		public String qualite_beneficiaire_id;

		public String getQualite_beneficiaire_id() {
			return this.qualite_beneficiaire_id;
		}

		public String titre_beneficiaire_id;

		public String getTitre_beneficiaire_id() {
			return this.titre_beneficiaire_id;
		}

		public String adresse_beneficiaire_id;

		public String getAdresse_beneficiaire_id() {
			return this.adresse_beneficiaire_id;
		}

		public String adresse_entreprise_id;

		public String getAdresse_entreprise_id() {
			return this.adresse_entreprise_id;
		}

		public String specialite_beneficiaire_id;

		public String getSpecialite_beneficiaire_id() {
			return this.specialite_beneficiaire_id;
		}

		public String secteur_activite_entreprise_id;

		public String getSecteur_activite_entreprise_id() {
			return this.secteur_activite_entreprise_id;
		}

		public int type_avantage_id;

		public int getType_avantage_id() {
			return this.type_avantage_id;
		}

		public java.util.Date date_id;

		public java.util.Date getDate_id() {
			return this.date_id;
		}

		public boolean is_avantage;

		public boolean getIs_avantage() {
			return this.is_avantage;
		}

		public BigDecimal montant_ttc;

		public BigDecimal getMontant_ttc() {
			return this.montant_ttc;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ligne_id == null) ? 0 : this.ligne_id.hashCode());

				result = prime * result + ((this.entreprise_id == null) ? 0 : this.entreprise_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final remuneration_factStruct other = (remuneration_factStruct) obj;

			if (this.ligne_id == null) {
				if (other.ligne_id != null)
					return false;

			} else if (!this.ligne_id.equals(other.ligne_id))

				return false;

			if (this.entreprise_id == null) {
				if (other.entreprise_id != null)
					return false;

			} else if (!this.entreprise_id.equals(other.entreprise_id))

				return false;

			return true;
		}

		public void copyDataTo(remuneration_factStruct other) {

			other.ligne_id = this.ligne_id;
			other.entreprise_id = this.entreprise_id;
			other.beneficiaire_id = this.beneficiaire_id;
			other.categorie_beneficiaire_id = this.categorie_beneficiaire_id;
			other.qualite_beneficiaire_id = this.qualite_beneficiaire_id;
			other.titre_beneficiaire_id = this.titre_beneficiaire_id;
			other.adresse_beneficiaire_id = this.adresse_beneficiaire_id;
			other.adresse_entreprise_id = this.adresse_entreprise_id;
			other.specialite_beneficiaire_id = this.specialite_beneficiaire_id;
			other.secteur_activite_entreprise_id = this.secteur_activite_entreprise_id;
			other.type_avantage_id = this.type_avantage_id;
			other.date_id = this.date_id;
			other.is_avantage = this.is_avantage;
			other.montant_ttc = this.montant_ttc;

		}

		public void copyKeysDataTo(remuneration_factStruct other) {

			other.ligne_id = this.ligne_id;
			other.entreprise_id = this.entreprise_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact) {

				try {

					int length = 0;

					this.ligne_id = readString(dis);

					this.entreprise_id = readString(dis);

					this.beneficiaire_id = readString(dis);

					this.categorie_beneficiaire_id = readString(dis);

					this.qualite_beneficiaire_id = readString(dis);

					this.titre_beneficiaire_id = readString(dis);

					this.adresse_beneficiaire_id = readString(dis);

					this.adresse_entreprise_id = readString(dis);

					this.specialite_beneficiaire_id = readString(dis);

					this.secteur_activite_entreprise_id = readString(dis);

					this.type_avantage_id = dis.readInt();

					this.date_id = readDate(dis);

					this.is_avantage = dis.readBoolean();

					this.montant_ttc = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ligne_id, dos);

				// String

				writeString(this.entreprise_id, dos);

				// String

				writeString(this.beneficiaire_id, dos);

				// String

				writeString(this.categorie_beneficiaire_id, dos);

				// String

				writeString(this.qualite_beneficiaire_id, dos);

				// String

				writeString(this.titre_beneficiaire_id, dos);

				// String

				writeString(this.adresse_beneficiaire_id, dos);

				// String

				writeString(this.adresse_entreprise_id, dos);

				// String

				writeString(this.specialite_beneficiaire_id, dos);

				// String

				writeString(this.secteur_activite_entreprise_id, dos);

				// int

				dos.writeInt(this.type_avantage_id);

				// java.util.Date

				writeDate(this.date_id, dos);

				// boolean

				dos.writeBoolean(this.is_avantage);

				// BigDecimal

				dos.writeObject(this.montant_ttc);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ligne_id=" + ligne_id);
			sb.append(",entreprise_id=" + entreprise_id);
			sb.append(",beneficiaire_id=" + beneficiaire_id);
			sb.append(",categorie_beneficiaire_id=" + categorie_beneficiaire_id);
			sb.append(",qualite_beneficiaire_id=" + qualite_beneficiaire_id);
			sb.append(",titre_beneficiaire_id=" + titre_beneficiaire_id);
			sb.append(",adresse_beneficiaire_id=" + adresse_beneficiaire_id);
			sb.append(",adresse_entreprise_id=" + adresse_entreprise_id);
			sb.append(",specialite_beneficiaire_id=" + specialite_beneficiaire_id);
			sb.append(",secteur_activite_entreprise_id=" + secteur_activite_entreprise_id);
			sb.append(",type_avantage_id=" + String.valueOf(type_avantage_id));
			sb.append(",date_id=" + String.valueOf(date_id));
			sb.append(",is_avantage=" + String.valueOf(is_avantage));
			sb.append(",montant_ttc=" + String.valueOf(montant_ttc));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(remuneration_factStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ligne_id, other.ligne_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.entreprise_id, other.entreprise_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class remunerationsStruct implements routines.system.IPersistableRow<remunerationsStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[0];

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String ligne_identifiant;

		public String getLigne_identifiant() {
			return this.ligne_identifiant;
		}

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String benef_qualite_code;

		public String getBenef_qualite_code() {
			return this.benef_qualite_code;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_ville;

		public String getBenef_ville() {
			return this.benef_ville;
		}

		public String benef_pays_code;

		public String getBenef_pays_code() {
			return this.benef_pays_code;
		}

		public String benef_titre_code;

		public String getBenef_titre_code() {
			return this.benef_titre_code;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String remu_date;

		public String getRemu_date() {
			return this.remu_date;
		}

		public Integer remu_montant_ttc;

		public Integer getRemu_montant_ttc() {
			return this.remu_montant_ttc;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact) {

				try {

					int length = 0;

					this.entreprise_identifiant = readString(dis);

					this.ligne_identifiant = readString(dis);

					this.benef_categorie_code = readString(dis);

					this.benef_qualite_code = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_ville = readString(dis);

					this.benef_pays_code = readString(dis);

					this.benef_titre_code = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.remu_date = readString(dis);

					this.remu_montant_ttc = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entreprise_identifiant, dos);

				// String

				writeString(this.ligne_identifiant, dos);

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.benef_qualite_code, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_ville, dos);

				// String

				writeString(this.benef_pays_code, dos);

				// String

				writeString(this.benef_titre_code, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.remu_date, dos);

				// Integer

				writeInteger(this.remu_montant_ttc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",ligne_identifiant=" + ligne_identifiant);
			sb.append(",benef_categorie_code=" + benef_categorie_code);
			sb.append(",benef_qualite_code=" + benef_qualite_code);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_ville=" + benef_ville);
			sb.append(",benef_pays_code=" + benef_pays_code);
			sb.append(",benef_titre_code=" + benef_titre_code);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",remu_date=" + remu_date);
			sb.append(",remu_montant_ttc=" + String.valueOf(remu_montant_ttc));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(remunerationsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[0];

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String ligne_identifiant;

		public String getLigne_identifiant() {
			return this.ligne_identifiant;
		}

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String benef_qualite_code;

		public String getBenef_qualite_code() {
			return this.benef_qualite_code;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_ville;

		public String getBenef_ville() {
			return this.benef_ville;
		}

		public String benef_pays_code;

		public String getBenef_pays_code() {
			return this.benef_pays_code;
		}

		public String benef_titre_code;

		public String getBenef_titre_code() {
			return this.benef_titre_code;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String remu_date;

		public String getRemu_date() {
			return this.remu_date;
		}

		public Integer remu_montant_ttc;

		public Integer getRemu_montant_ttc() {
			return this.remu_montant_ttc;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_avantage_remuneration_fact) {

				try {

					int length = 0;

					this.entreprise_identifiant = readString(dis);

					this.ligne_identifiant = readString(dis);

					this.benef_categorie_code = readString(dis);

					this.benef_qualite_code = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_ville = readString(dis);

					this.benef_pays_code = readString(dis);

					this.benef_titre_code = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.remu_date = readString(dis);

					this.remu_montant_ttc = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entreprise_identifiant, dos);

				// String

				writeString(this.ligne_identifiant, dos);

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.benef_qualite_code, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_ville, dos);

				// String

				writeString(this.benef_pays_code, dos);

				// String

				writeString(this.benef_titre_code, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.remu_date, dos);

				// Integer

				writeInteger(this.remu_montant_ttc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",ligne_identifiant=" + ligne_identifiant);
			sb.append(",benef_categorie_code=" + benef_categorie_code);
			sb.append(",benef_qualite_code=" + benef_qualite_code);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_ville=" + benef_ville);
			sb.append(",benef_pays_code=" + benef_pays_code);
			sb.append(",benef_titre_code=" + benef_titre_code);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",remu_date=" + remu_date);
			sb.append(",remu_montant_ttc=" + String.valueOf(remu_montant_ttc));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_4Process(globalMap);
				tFileInputDelimited_3Process(globalMap);

				avantagesStruct avantages = new avantagesStruct();
				avantage_factStruct avantage_fact = new avantage_factStruct();

				remunerationsStruct remunerations = new remunerationsStruct();
				remuneration_factStruct remuneration_fact = new remuneration_factStruct();

				row3Struct row3 = new row3Struct();
				row4Struct row4 = new row4Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;

				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "avantage_remuneration_fact";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbProperties_tDBOutput_1 = "noDatetimeStringSync=true";
				String url_tDBOutput_1 = null;
				if (dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
					url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "transparence_sante_bi" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_1.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "transparence_sante_bi" + "?"
							+ properties_tDBOutput_1;
				}
				String driverClass_tDBOutput_1 = "com.mysql.jdbc.Driver";

				String dbUser_tDBOutput_1 = "root";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:LBvHXMtfyb5vdHU8wi10hHyzLAWexgKhBdvE5g==");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				java.lang.Class.forName(driverClass_tDBOutput_1);

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;

				try (java.sql.Statement stmtClear_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtClear_tDBOutput_1.executeUpdate("DELETE FROM `" + tableName_tDBOutput_1 + "`");
				}

				String insert_tDBOutput_1 = "INSERT INTO `" + "avantage_remuneration_fact"
						+ "` (`ligne_id`,`entreprise_id`,`beneficiaire_id`,`categorie_beneficiaire_id`,`qualite_beneficiaire_id`,`titre_beneficiaire_id`,`adresse_beneficiaire_id`,`adresse_entreprise_id`,`specialite_beneficiaire_id`,`secteur_activite_entreprise_id`,`type_avantage_id`,`date_id`,`is_avantage`,`montant_ttc`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_1 = 100;
				int batchSizeCounter_tDBOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tUnite_2 begin ] start
				 */

				ok_Hash.put("tUnite_2", false);
				start_Hash.put("tUnite_2", System.currentTimeMillis());

				currentComponent = "tUnite_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "remuneration_fact", "avantage_fact");
				}

				int tos_count_tUnite_2 = 0;

				int nb_line_tUnite_2 = 0;

				/**
				 * [tUnite_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "avantages");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
					java.util.Date date;
					String normalizedNatureAvantage;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				avantage_factStruct avantage_fact_tmp = new avantage_factStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_5", false);
				start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_5";

				int tos_count_tFileInputDelimited_5 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_5 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
				int limit_tFileInputDelimited_5 = -1;
				try {

					Object filename_tFileInputDelimited_5 = "C:/BI/transparence-sante/data/min/avantages_top10000.csv";
					if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = -1;
						if (footer_value_tFileInputDelimited_5 > 0 || random_value_tFileInputDelimited_5 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(
								"C:/BI/transparence-sante/data/min/avantages_top10000.csv", "UTF-8", ";", "\n", false,
								1, 0, limit_tFileInputDelimited_5, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_5 != null && fid_tFileInputDelimited_5.nextRecord()) {
						rowstate_tFileInputDelimited_5.reset();

						avantages = null;

						boolean whetherReject_tFileInputDelimited_5 = false;
						avantages = new avantagesStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_5 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_5 = 0;

							avantages.entreprise_identifiant = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 1;

							avantages.ligne_identifiant = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 2;

							avantages.benef_categorie_code = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 3;

							avantages.benef_qualite_code = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 4;

							avantages.benef_codepostal = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 5;

							avantages.benef_ville = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 6;

							avantages.benef_pays_code = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 7;

							avantages.benef_titre_code = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 8;

							avantages.benef_specialite_code = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 9;

							avantages.benef_identifiant_valeur = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 10;

							avantages.avant_date_signature = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							columnIndexWithD_tFileInputDelimited_5 = 11;

							temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
							if (temp.length() > 0) {

								try {

									avantages.avant_montant_ttc = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_5) {
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"avant_montant_ttc", "avantages", temp, ex_tFileInputDelimited_5),
											ex_tFileInputDelimited_5));
								}

							} else {

								avantages.avant_montant_ttc = null;

							}

							columnIndexWithD_tFileInputDelimited_5 = 12;

							avantages.avant_nature = fid_tFileInputDelimited_5
									.get(columnIndexWithD_tFileInputDelimited_5);

							if (rowstate_tFileInputDelimited_5.getException() != null) {
								throw rowstate_tFileInputDelimited_5.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_5 = true;

							System.err.println(e.getMessage());
							avantages = null;

						}

						/**
						 * [tFileInputDelimited_5 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_5 main ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						tos_count_tFileInputDelimited_5++;

						/**
						 * [tFileInputDelimited_5 main ] stop
						 */

						/**
						 * [tFileInputDelimited_5 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						/**
						 * [tFileInputDelimited_5 process_data_begin ] stop
						 */
// Start of branch "avantages"
						if (avantages != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "avantages");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row2"
							///////////////////////////////////////////////

							boolean forceLooprow2 = false;

							row2Struct row2ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								row2HashKey.entreprise_identifiant = avantages.entreprise_identifiant;

								row2HashKey.hashCodeDirty = true;

								tHash_Lookup_row2.lookup(row2HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2'
								// and it contains more one result from keys : row2.entreprise_identifiant = '"
								// + row2HashKey.entreprise_identifiant + "'");
							} // G 071

							row2Struct row2 = null;

							row2Struct fromLookup_row2 = null;
							row2 = row2Default;

							if (tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) { // G 099

								fromLookup_row2 = tHash_Lookup_row2.next();

							} // G 099

							if (fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;
								Var.date = avantages.avant_date_signature != null && MyStringRoutine
										.isDate(avantages.avant_date_signature.replaceAll("[^0-9\\/\\-]", "")) ?

												TalendDate.parseDate("dd-MM-yyyy",
														(avantages.avant_date_signature.replaceAll("[^0-9\\/\\-]", ""))
																.replace("/", "-"))
												:
// if date string is null or empty, default date
												TalendDate.parseDate("dd-MM-yyyy", "01-01-2000");
								Var.normalizedNatureAvantage = NatureAvantageIdGenerator
										.normalizeNatureAvantage(avantages.avant_nature);// ###############################
								// ###############################
								// # Output tables

								avantage_fact = null;

// # Output table : 'avantage_fact'
								avantage_fact_tmp.ligne_id = avantages.ligne_identifiant;
								avantage_fact_tmp.entreprise_id = avantages.entreprise_identifiant;
								avantage_fact_tmp.beneficiaire_id = avantages.benef_identifiant_valeur.isEmpty()
										|| (avantages.benef_identifiant_valeur.replaceAll("[^a-zA-Z0-9]", "")).isEmpty()
												? "N/A"
												: avantages.benef_identifiant_valeur.replaceAll("[^a-zA-Z0-9]", "");
								avantage_fact_tmp.categorie_beneficiaire_id = avantages.benef_categorie_code.equals("")
										? "N/A"
										: avantages.benef_categorie_code;
								avantage_fact_tmp.qualite_beneficiaire_id = avantages.benef_qualite_code.equals("")
										? "N/A"
										: avantages.benef_qualite_code;
								avantage_fact_tmp.titre_beneficiaire_id = avantages.benef_titre_code.equals("") ? "N/A"
										: avantages.benef_titre_code;
								avantage_fact_tmp.adresse_beneficiaire_id = (avantages.benef_pays_code
										.replaceAll("[^A-Za-z0-9]", "") + avantages.benef_codepostal
										+ avantages.benef_ville.replaceAll("[^A-Za-z0-9]", "")).isEmpty()
												? "N/A"
												: avantages.benef_pays_code.replaceAll("[^A-Za-z0-9]", "")
														+ avantages.benef_codepostal
														+ avantages.benef_ville.replaceAll("[^A-Za-z0-9]", "");
								avantage_fact_tmp.adresse_entreprise_id = (row2.pays_code.replaceAll("[^A-Za-z0-9]", "")
										+ row2.code_postal + row2.ville.replaceAll("[^A-Za-z0-9]", "")).isEmpty()
												? "N/A"
												: row2.pays_code.replaceAll("[^A-Za-z0-9]", "") + row2.code_postal
														+ row2.ville.replaceAll("[^A-Za-z0-9]", "");
								avantage_fact_tmp.specialite_beneficiaire_id = avantages.benef_specialite_code
										.equals("") ? "N/A" : avantages.benef_specialite_code;
								avantage_fact_tmp.secteur_activite_entreprise_id = row2.secteur_activite_code;
								avantage_fact_tmp.type_avantage_id = NatureAvantageIdGenerator
										.getNatureAvantageId(Var.normalizedNatureAvantage);
								avantage_fact_tmp.date_id = (DateTransformations.getAnnee(Var.date) >= 1980
										& DateTransformations.getAnnee(Var.date) <= 2100) ? Var.date
												: TalendDate.parseDate("dd-MM-yyyy", "01-01-2000");
								avantage_fact_tmp.is_avantage = true;
								avantage_fact_tmp.montant_ttc = avantages.avant_montant_ttc != null
										? new BigDecimal(avantages.avant_montant_ttc)
										: BigDecimal.ZERO;
								avantage_fact = avantage_fact_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "avantage_fact"
							if (avantage_fact != null) {

								/**
								 * [tUnite_2 main ] start
								 */

								currentComponent = "tUnite_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "avantage_fact");
								}

//////////

// for output
								row3 = new row3Struct();

								row3.ligne_id = avantage_fact.ligne_id;
								row3.entreprise_id = avantage_fact.entreprise_id;
								row3.beneficiaire_id = avantage_fact.beneficiaire_id;
								row3.categorie_beneficiaire_id = avantage_fact.categorie_beneficiaire_id;
								row3.qualite_beneficiaire_id = avantage_fact.qualite_beneficiaire_id;
								row3.titre_beneficiaire_id = avantage_fact.titre_beneficiaire_id;
								row3.adresse_beneficiaire_id = avantage_fact.adresse_beneficiaire_id;
								row3.adresse_entreprise_id = avantage_fact.adresse_entreprise_id;
								row3.specialite_beneficiaire_id = avantage_fact.specialite_beneficiaire_id;
								row3.secteur_activite_entreprise_id = avantage_fact.secteur_activite_entreprise_id;
								row3.type_avantage_id = avantage_fact.type_avantage_id;
								row3.date_id = avantage_fact.date_id;
								row3.is_avantage = avantage_fact.is_avantage;
								row3.montant_ttc = avantage_fact.montant_ttc;

								nb_line_tUnite_2++;

//////////

								tos_count_tUnite_2++;

								/**
								 * [tUnite_2 main ] stop
								 */

								/**
								 * [tUnite_2 process_data_begin ] start
								 */

								currentComponent = "tUnite_2";

								/**
								 * [tUnite_2 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_1 main ] start
								 */

								currentComponent = "tDBOutput_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
								}

								row4 = null;
								whetherReject_tDBOutput_1 = false;
								if (row3.ligne_id == null) {
									pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(1, row3.ligne_id);
								}

								if (row3.entreprise_id == null) {
									pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(2, row3.entreprise_id);
								}

								if (row3.beneficiaire_id == null) {
									pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(3, row3.beneficiaire_id);
								}

								if (row3.categorie_beneficiaire_id == null) {
									pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(4, row3.categorie_beneficiaire_id);
								}

								if (row3.qualite_beneficiaire_id == null) {
									pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(5, row3.qualite_beneficiaire_id);
								}

								if (row3.titre_beneficiaire_id == null) {
									pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(6, row3.titre_beneficiaire_id);
								}

								if (row3.adresse_beneficiaire_id == null) {
									pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(7, row3.adresse_beneficiaire_id);
								}

								if (row3.adresse_entreprise_id == null) {
									pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(8, row3.adresse_entreprise_id);
								}

								if (row3.specialite_beneficiaire_id == null) {
									pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(9, row3.specialite_beneficiaire_id);
								}

								if (row3.secteur_activite_entreprise_id == null) {
									pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(10, row3.secteur_activite_entreprise_id);
								}

								pstmt_tDBOutput_1.setInt(11, row3.type_avantage_id);

								if (row3.date_id != null) {
									date_tDBOutput_1 = row3.date_id.getTime();
									if (date_tDBOutput_1 < year1_tDBOutput_1
											|| date_tDBOutput_1 >= year10000_tDBOutput_1) {
										pstmt_tDBOutput_1.setString(12, "0000-00-00 00:00:00");
									} else {
										pstmt_tDBOutput_1.setTimestamp(12, new java.sql.Timestamp(date_tDBOutput_1));
									}
								} else {
									pstmt_tDBOutput_1.setNull(12, java.sql.Types.DATE);
								}

								pstmt_tDBOutput_1.setBoolean(13, row3.is_avantage);

								pstmt_tDBOutput_1.setBigDecimal(14, row3.montant_ttc);

								pstmt_tDBOutput_1.addBatch();
								nb_line_tDBOutput_1++;

								batchSizeCounter_tDBOutput_1++;
								if (!whetherReject_tDBOutput_1) {
									row4 = new row4Struct();
									row4.ligne_id = row3.ligne_id;
									row4.entreprise_id = row3.entreprise_id;
									row4.beneficiaire_id = row3.beneficiaire_id;
									row4.categorie_beneficiaire_id = row3.categorie_beneficiaire_id;
									row4.qualite_beneficiaire_id = row3.qualite_beneficiaire_id;
									row4.titre_beneficiaire_id = row3.titre_beneficiaire_id;
									row4.adresse_beneficiaire_id = row3.adresse_beneficiaire_id;
									row4.adresse_entreprise_id = row3.adresse_entreprise_id;
									row4.specialite_beneficiaire_id = row3.specialite_beneficiaire_id;
									row4.secteur_activite_entreprise_id = row3.secteur_activite_entreprise_id;
									row4.type_avantage_id = row3.type_avantage_id;
									row4.date_id = row3.date_id;
									row4.is_avantage = row3.is_avantage;
									row4.montant_ttc = row3.montant_ttc;
								}
								if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
									try {
										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED
													? 0
													: 1);
										}
										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
									} catch (java.sql.BatchUpdateException e) {
										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}
										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
										System.err.println(e.getMessage());
									}

									batchSizeCounter_tDBOutput_1 = 0;
								}
								commitCounter_tDBOutput_1++;

								if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

									try {
										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
										}
										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
									} catch (java.sql.BatchUpdateException e) {
										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}
										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
										System.err.println(e.getMessage());

									}
									conn_tDBOutput_1.commit();
									commitCounter_tDBOutput_1 = 0;

								}

								tos_count_tDBOutput_1++;

								/**
								 * [tDBOutput_1 main ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_begin ] stop
								 */
// Start of branch "row4"
								if (row4 != null) {

									/**
									 * [tLogRow_1 main ] start
									 */

									currentComponent = "tLogRow_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
									}

///////////////////////		

									strBuffer_tLogRow_1 = new StringBuilder();

									if (row4.ligne_id != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row4.ligne_id));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row4.entreprise_id != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row4.entreprise_id));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row4.beneficiaire_id != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row4.beneficiaire_id));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row4.categorie_beneficiaire_id != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row4.categorie_beneficiaire_id));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row4.qualite_beneficiaire_id != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row4.qualite_beneficiaire_id));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row4.titre_beneficiaire_id != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row4.titre_beneficiaire_id));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row4.adresse_beneficiaire_id != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row4.adresse_beneficiaire_id));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row4.adresse_entreprise_id != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row4.adresse_entreprise_id));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row4.specialite_beneficiaire_id != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row4.specialite_beneficiaire_id));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row4.secteur_activite_entreprise_id != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row4.secteur_activite_entreprise_id));

									} //

									strBuffer_tLogRow_1.append("|");

									strBuffer_tLogRow_1.append(String.valueOf(row4.type_avantage_id));

									strBuffer_tLogRow_1.append("|");

									if (row4.date_id != null) { //

										strBuffer_tLogRow_1
												.append(FormatterUtils.format_Date(row4.date_id, "dd-MM-yyyy"));

									} //

									strBuffer_tLogRow_1.append("|");

									strBuffer_tLogRow_1.append(String.valueOf(row4.is_avantage));

									strBuffer_tLogRow_1.append("|");

									if (row4.montant_ttc != null) { //

										strBuffer_tLogRow_1.append(row4.montant_ttc
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									if (globalMap.get("tLogRow_CONSOLE") != null) {
										consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
									} else {
										consoleOut_tLogRow_1 = new java.io.PrintStream(
												new java.io.BufferedOutputStream(System.out));
										globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
									}
									consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
									consoleOut_tLogRow_1.flush();
									nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

									tos_count_tLogRow_1++;

									/**
									 * [tLogRow_1 main ] stop
									 */

									/**
									 * [tLogRow_1 process_data_begin ] start
									 */

									currentComponent = "tLogRow_1";

									/**
									 * [tLogRow_1 process_data_begin ] stop
									 */

									/**
									 * [tLogRow_1 process_data_end ] start
									 */

									currentComponent = "tLogRow_1";

									/**
									 * [tLogRow_1 process_data_end ] stop
									 */

								} // End of branch "row4"

								/**
								 * [tDBOutput_1 process_data_end ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_end ] stop
								 */

								/**
								 * [tUnite_2 process_data_end ] start
								 */

								currentComponent = "tUnite_2";

								/**
								 * [tUnite_2 process_data_end ] stop
								 */

							} // End of branch "avantage_fact"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "avantages"

						/**
						 * [tFileInputDelimited_5 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						/**
						 * [tFileInputDelimited_5 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_5 end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

					}
				} finally {
					if (!((Object) ("C:/BI/transparence-sante/data/min/avantages_top10000.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_5 != null) {
							fid_tFileInputDelimited_5.close();
						}
					}
					if (fid_tFileInputDelimited_5 != null) {
						globalMap.put("tFileInputDelimited_5_NB_LINE", fid_tFileInputDelimited_5.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_5", true);
				end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_5 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "avantages");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "remunerations");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) globalMap
						.get("tHash_Lookup_row1"));

				row1Struct row1HashKey = new row1Struct();
				row1Struct row1Default = new row1Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
					java.util.Date date;
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				remuneration_factStruct remuneration_fact_tmp = new remuneration_factStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/BI/transparence-sante/data/min/remunerations_top10000.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/BI/transparence-sante/data/min/remunerations_top10000.csv", "UTF-8", ";", "\n",
								false, 1, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						remunerations = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						remunerations = new remunerationsStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							remunerations.entreprise_identifiant = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							remunerations.ligne_identifiant = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							remunerations.benef_categorie_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							remunerations.benef_qualite_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							remunerations.benef_codepostal = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							remunerations.benef_ville = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							remunerations.benef_pays_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							remunerations.benef_titre_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 8;

							remunerations.benef_specialite_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 9;

							remunerations.benef_identifiant_valeur = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 10;

							remunerations.remu_date = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 11;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									remunerations.remu_montant_ttc = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"remu_montant_ttc", "remunerations", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								remunerations.remu_montant_ttc = null;

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							remunerations = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "remunerations"
						if (remunerations != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "remunerations");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row1"
							///////////////////////////////////////////////

							boolean forceLooprow1 = false;

							row1Struct row1ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_2 = false;

								row1HashKey.identifiant = remunerations.entreprise_identifiant;

								row1HashKey.hashCodeDirty = true;

								tHash_Lookup_row1.lookup(row1HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row1 != null && tHash_Lookup_row1.getCount(row1HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row1'
								// and it contains more one result from keys : row1.identifiant = '" +
								// row1HashKey.identifiant + "'");
							} // G 071

							row1Struct row1 = null;

							row1Struct fromLookup_row1 = null;
							row1 = row1Default;

							if (tHash_Lookup_row1 != null && tHash_Lookup_row1.hasNext()) { // G 099

								fromLookup_row1 = tHash_Lookup_row1.next();

							} // G 099

							if (fromLookup_row1 != null) {
								row1 = fromLookup_row1;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;
								Var.date = remunerations.remu_date != null && MyStringRoutine
										.isDate(remunerations.remu_date.replaceAll("[^0-9\\-\\/]", "")) ?

												TalendDate.parseDate("dd-MM-yyyy",
														(remunerations.remu_date.replaceAll("[^0-9\\-\\/]", ""))
																.replace("/", "-"))
												:
// if date string is null or empty, default date
												TalendDate.parseDate("dd-MM-yyyy", "01-01-2000");// ###############################
								// ###############################
								// # Output tables

								remuneration_fact = null;

// # Output table : 'remuneration_fact'
								remuneration_fact_tmp.ligne_id = remunerations.ligne_identifiant;
								remuneration_fact_tmp.entreprise_id = remunerations.entreprise_identifiant;
								remuneration_fact_tmp.beneficiaire_id = remunerations.benef_identifiant_valeur.isEmpty()
										|| (remunerations.benef_identifiant_valeur.replaceAll("[^a-zA-Z0-9]", ""))
												.isEmpty() ? "N/A"
														: remunerations.benef_identifiant_valeur
																.replaceAll("[^A-Za-z0-9]", "");
								remuneration_fact_tmp.categorie_beneficiaire_id = remunerations.benef_categorie_code
										.equals("") ? "N/A" : remunerations.benef_categorie_code;
								remuneration_fact_tmp.qualite_beneficiaire_id = remunerations.benef_qualite_code
										.equals("") ? "N/A" : remunerations.benef_qualite_code;
								remuneration_fact_tmp.titre_beneficiaire_id = remunerations.benef_titre_code.equals("")
										? "N/A"
										: remunerations.benef_titre_code;
								remuneration_fact_tmp.adresse_beneficiaire_id = (remunerations.benef_pays_code
										.replaceAll("[^A-Za-z0-9]", "") + remunerations.benef_codepostal
										+ remunerations.benef_ville.replaceAll("[^A-Za-z0-9]", "")).isEmpty()
												? "N/A"
												: remunerations.benef_pays_code.replaceAll("[^A-Za-z0-9]", "")
														+ remunerations.benef_codepostal
														+ remunerations.benef_ville.replaceAll("[^A-Za-z0-9]", "");
								remuneration_fact_tmp.adresse_entreprise_id = (row1.pays_code.replaceAll("[^A-Za-z0-9]",
										"") + row1.code_postal + row1.ville.replaceAll("[^A-Za-z0-9]", "")).isEmpty()
												? "N/A"
												: row1.pays_code.replaceAll("[^A-Za-z0-9]", "") + row1.code_postal
														+ row1.ville.replaceAll("[^A-Za-z0-9]", "");
								remuneration_fact_tmp.specialite_beneficiaire_id = remunerations.benef_specialite_code == null
										|| remunerations.benef_specialite_code.equals("") ? "N/A"
												: remunerations.benef_specialite_code;
								remuneration_fact_tmp.secteur_activite_entreprise_id = row1.secteur_activite_code;
								remuneration_fact_tmp.type_avantage_id = // Il s'agit d'une rémunération
										NatureAvantageIdGenerator.getNatureAvantageId("INCONNU");
								remuneration_fact_tmp.date_id = (DateTransformations.getAnnee(Var.date) >= 1980
										& DateTransformations.getAnnee(Var.date) <= 2100) ? Var.date
												: TalendDate.parseDate("dd-MM-yyyy", "01-01-2000");
								remuneration_fact_tmp.is_avantage = false;
								remuneration_fact_tmp.montant_ttc = remunerations.remu_montant_ttc != null
										? new BigDecimal(remunerations.remu_montant_ttc)
										: BigDecimal.ZERO;
								remuneration_fact = remuneration_fact_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
// Start of branch "remuneration_fact"
							if (remuneration_fact != null) {

								/**
								 * [tUnite_2 main ] start
								 */

								currentComponent = "tUnite_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "remuneration_fact");
								}

//////////

// for output
								row3 = new row3Struct();

								row3.ligne_id = remuneration_fact.ligne_id;
								row3.entreprise_id = remuneration_fact.entreprise_id;
								row3.beneficiaire_id = remuneration_fact.beneficiaire_id;
								row3.categorie_beneficiaire_id = remuneration_fact.categorie_beneficiaire_id;
								row3.qualite_beneficiaire_id = remuneration_fact.qualite_beneficiaire_id;
								row3.titre_beneficiaire_id = remuneration_fact.titre_beneficiaire_id;
								row3.adresse_beneficiaire_id = remuneration_fact.adresse_beneficiaire_id;
								row3.adresse_entreprise_id = remuneration_fact.adresse_entreprise_id;
								row3.specialite_beneficiaire_id = remuneration_fact.specialite_beneficiaire_id;
								row3.secteur_activite_entreprise_id = remuneration_fact.secteur_activite_entreprise_id;
								row3.type_avantage_id = remuneration_fact.type_avantage_id;
								row3.date_id = remuneration_fact.date_id;
								row3.is_avantage = remuneration_fact.is_avantage;
								row3.montant_ttc = remuneration_fact.montant_ttc;

								nb_line_tUnite_2++;

//////////

								tos_count_tUnite_2++;

								/**
								 * [tUnite_2 main ] stop
								 */

								/**
								 * [tUnite_2 process_data_begin ] start
								 */

								currentComponent = "tUnite_2";

								/**
								 * [tUnite_2 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_1 main ] start
								 */

								currentComponent = "tDBOutput_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
								}

								row4 = null;
								whetherReject_tDBOutput_1 = false;
								if (row3.ligne_id == null) {
									pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(1, row3.ligne_id);
								}

								if (row3.entreprise_id == null) {
									pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(2, row3.entreprise_id);
								}

								if (row3.beneficiaire_id == null) {
									pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(3, row3.beneficiaire_id);
								}

								if (row3.categorie_beneficiaire_id == null) {
									pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(4, row3.categorie_beneficiaire_id);
								}

								if (row3.qualite_beneficiaire_id == null) {
									pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(5, row3.qualite_beneficiaire_id);
								}

								if (row3.titre_beneficiaire_id == null) {
									pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(6, row3.titre_beneficiaire_id);
								}

								if (row3.adresse_beneficiaire_id == null) {
									pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(7, row3.adresse_beneficiaire_id);
								}

								if (row3.adresse_entreprise_id == null) {
									pstmt_tDBOutput_1.setNull(8, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(8, row3.adresse_entreprise_id);
								}

								if (row3.specialite_beneficiaire_id == null) {
									pstmt_tDBOutput_1.setNull(9, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(9, row3.specialite_beneficiaire_id);
								}

								if (row3.secteur_activite_entreprise_id == null) {
									pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_1.setString(10, row3.secteur_activite_entreprise_id);
								}

								pstmt_tDBOutput_1.setInt(11, row3.type_avantage_id);

								if (row3.date_id != null) {
									date_tDBOutput_1 = row3.date_id.getTime();
									if (date_tDBOutput_1 < year1_tDBOutput_1
											|| date_tDBOutput_1 >= year10000_tDBOutput_1) {
										pstmt_tDBOutput_1.setString(12, "0000-00-00 00:00:00");
									} else {
										pstmt_tDBOutput_1.setTimestamp(12, new java.sql.Timestamp(date_tDBOutput_1));
									}
								} else {
									pstmt_tDBOutput_1.setNull(12, java.sql.Types.DATE);
								}

								pstmt_tDBOutput_1.setBoolean(13, row3.is_avantage);

								pstmt_tDBOutput_1.setBigDecimal(14, row3.montant_ttc);

								pstmt_tDBOutput_1.addBatch();
								nb_line_tDBOutput_1++;

								batchSizeCounter_tDBOutput_1++;
								if (!whetherReject_tDBOutput_1) {
									row4 = new row4Struct();
									row4.ligne_id = row3.ligne_id;
									row4.entreprise_id = row3.entreprise_id;
									row4.beneficiaire_id = row3.beneficiaire_id;
									row4.categorie_beneficiaire_id = row3.categorie_beneficiaire_id;
									row4.qualite_beneficiaire_id = row3.qualite_beneficiaire_id;
									row4.titre_beneficiaire_id = row3.titre_beneficiaire_id;
									row4.adresse_beneficiaire_id = row3.adresse_beneficiaire_id;
									row4.adresse_entreprise_id = row3.adresse_entreprise_id;
									row4.specialite_beneficiaire_id = row3.specialite_beneficiaire_id;
									row4.secteur_activite_entreprise_id = row3.secteur_activite_entreprise_id;
									row4.type_avantage_id = row3.type_avantage_id;
									row4.date_id = row3.date_id;
									row4.is_avantage = row3.is_avantage;
									row4.montant_ttc = row3.montant_ttc;
								}
								if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
									try {
										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED
													? 0
													: 1);
										}
										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
									} catch (java.sql.BatchUpdateException e) {
										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}
										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
										System.err.println(e.getMessage());
									}

									batchSizeCounter_tDBOutput_1 = 0;
								}
								commitCounter_tDBOutput_1++;

								if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

									try {
										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
										}
										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
									} catch (java.sql.BatchUpdateException e) {
										int countSum_tDBOutput_1 = 0;
										for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
											countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
													: countEach_tDBOutput_1);
										}
										insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
										System.err.println(e.getMessage());

									}
									conn_tDBOutput_1.commit();
									commitCounter_tDBOutput_1 = 0;

								}

								tos_count_tDBOutput_1++;

								/**
								 * [tDBOutput_1 main ] stop
								 */

								/**
								 * [tDBOutput_1 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_begin ] stop
								 */
// Start of branch "row4"
								if (row4 != null) {

									/**
									 * [tLogRow_1 main ] start
									 */

									currentComponent = "tLogRow_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
									}

///////////////////////		

									strBuffer_tLogRow_1 = new StringBuilder();

									if (row4.ligne_id != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row4.ligne_id));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row4.entreprise_id != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row4.entreprise_id));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row4.beneficiaire_id != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row4.beneficiaire_id));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row4.categorie_beneficiaire_id != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row4.categorie_beneficiaire_id));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row4.qualite_beneficiaire_id != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row4.qualite_beneficiaire_id));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row4.titre_beneficiaire_id != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row4.titre_beneficiaire_id));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row4.adresse_beneficiaire_id != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row4.adresse_beneficiaire_id));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row4.adresse_entreprise_id != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row4.adresse_entreprise_id));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row4.specialite_beneficiaire_id != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row4.specialite_beneficiaire_id));

									} //

									strBuffer_tLogRow_1.append("|");

									if (row4.secteur_activite_entreprise_id != null) { //

										strBuffer_tLogRow_1.append(String.valueOf(row4.secteur_activite_entreprise_id));

									} //

									strBuffer_tLogRow_1.append("|");

									strBuffer_tLogRow_1.append(String.valueOf(row4.type_avantage_id));

									strBuffer_tLogRow_1.append("|");

									if (row4.date_id != null) { //

										strBuffer_tLogRow_1
												.append(FormatterUtils.format_Date(row4.date_id, "dd-MM-yyyy"));

									} //

									strBuffer_tLogRow_1.append("|");

									strBuffer_tLogRow_1.append(String.valueOf(row4.is_avantage));

									strBuffer_tLogRow_1.append("|");

									if (row4.montant_ttc != null) { //

										strBuffer_tLogRow_1.append(row4.montant_ttc
												.setScale(0, java.math.RoundingMode.HALF_UP).toPlainString());

									} //

									if (globalMap.get("tLogRow_CONSOLE") != null) {
										consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
									} else {
										consoleOut_tLogRow_1 = new java.io.PrintStream(
												new java.io.BufferedOutputStream(System.out));
										globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
									}
									consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
									consoleOut_tLogRow_1.flush();
									nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

									tos_count_tLogRow_1++;

									/**
									 * [tLogRow_1 main ] stop
									 */

									/**
									 * [tLogRow_1 process_data_begin ] start
									 */

									currentComponent = "tLogRow_1";

									/**
									 * [tLogRow_1 process_data_begin ] stop
									 */

									/**
									 * [tLogRow_1 process_data_end ] start
									 */

									currentComponent = "tLogRow_1";

									/**
									 * [tLogRow_1 process_data_end ] stop
									 */

								} // End of branch "row4"

								/**
								 * [tDBOutput_1 process_data_end ] start
								 */

								currentComponent = "tDBOutput_1";

								/**
								 * [tDBOutput_1 process_data_end ] stop
								 */

								/**
								 * [tUnite_2 process_data_end ] start
								 */

								currentComponent = "tUnite_2";

								/**
								 * [tUnite_2 process_data_end ] stop
								 */

							} // End of branch "remuneration_fact"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "remunerations"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/BI/transparence-sante/data/min/remunerations_top10000.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row1 != null) {
					tHash_Lookup_row1.endGet();
				}
				globalMap.remove("tHash_Lookup_row1");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "remunerations");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tUnite_2 end ] start
				 */

				currentComponent = "tUnite_2";

				globalMap.put("tUnite_2_NB_LINE", nb_line_tUnite_2);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "remuneration_fact", "avantage_fact");
				}

				ok_Hash.put("tUnite_2", true);
				end_Hash.put("tUnite_2", System.currentTimeMillis());

				/**
				 * [tUnite_2 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (batchSizeCounter_tDBOutput_1 != 0) {
						int countSum_tDBOutput_1 = 0;

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_1 = 0;

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0) {

					conn_tDBOutput_1.commit();

				}

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row1");

			try {

				/**
				 * [tFileInputDelimited_5 finally ] start
				 */

				currentComponent = "tFileInputDelimited_5";

				/**
				 * [tFileInputDelimited_5 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tUnite_2 finally ] start
				 */

				currentComponent = "tUnite_2";

				/**
				 * [tUnite_2 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final avantage_remuneration_fact avantage_remuneration_factClass = new avantage_remuneration_fact();

		int exitCode = avantage_remuneration_factClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = avantage_remuneration_fact.class.getClassLoader().getResourceAsStream(
					"transparence_sante_bi/avantage_remuneration_fact_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = avantage_remuneration_fact.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_5) {
			globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_5.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : avantage_remuneration_fact");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 222333 characters generated by Talend Open Studio for Data Integration on the
 * 23 janvier 2021 19:25:29 CET
 ************************************************************************************************/