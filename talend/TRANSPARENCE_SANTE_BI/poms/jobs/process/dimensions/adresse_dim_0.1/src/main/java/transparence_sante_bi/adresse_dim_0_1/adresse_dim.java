// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package transparence_sante_bi.adresse_dim_0_1;

import routines.Numeric;
import routines.AdressesIdGenerator;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: adresse_dim Purpose: remplissage de la dimension des adresses<br>
 * Description: Rempli à partir de l'ensemble des fichiers csv fournis, afin
 * d'avoir toutes les adresses possibles enregistrées.
 * 
 * adresse_id doit être unique. Idée : CP + concaténation d'un autre champ.
 * 
 * attention aux doublons potentiels <br>
 * 
 * @author haytham.elghazel@univ-lyon1.fr
 * @version 7.3.1.20200219_1130
 * @status DEV
 */
public class adresse_dim implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "adresse_dim";
	private final String projectName = "TRANSPARENCE_SANTE_BI";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					adresse_dim.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(adresse_dim.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class adressesStruct implements routines.system.IPersistableRow<adressesStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String adresse_id;

		public String getAdresse_id() {
			return this.adresse_id;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String departement;

		public String getDepartement() {
			return this.departement;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public String pays_code;

		public String getPays_code() {
			return this.pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.adresse_id == null) ? 0 : this.adresse_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final adressesStruct other = (adressesStruct) obj;

			if (this.adresse_id == null) {
				if (other.adresse_id != null)
					return false;

			} else if (!this.adresse_id.equals(other.adresse_id))

				return false;

			return true;
		}

		public void copyDataTo(adressesStruct other) {

			other.adresse_id = this.adresse_id;
			other.ville = this.ville;
			other.code_postal = this.code_postal;
			other.departement = this.departement;
			other.region = this.region;
			other.pays_code = this.pays_code;
			other.pays = this.pays;

		}

		public void copyKeysDataTo(adressesStruct other) {

			other.adresse_id = this.adresse_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.adresse_id = readString(dis);

					this.ville = readString(dis);

					this.code_postal = readString(dis);

					this.departement = readString(dis);

					this.region = readString(dis);

					this.pays_code = readString(dis);

					this.pays = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.adresse_id, dos);

				// String

				writeString(this.ville, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.departement, dos);

				// String

				writeString(this.region, dos);

				// String

				writeString(this.pays_code, dos);

				// String

				writeString(this.pays, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("adresse_id=" + adresse_id);
			sb.append(",ville=" + ville);
			sb.append(",code_postal=" + code_postal);
			sb.append(",departement=" + departement);
			sb.append(",region=" + region);
			sb.append(",pays_code=" + pays_code);
			sb.append(",pays=" + pays);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(adressesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.adresse_id, other.adresse_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class adresses_uniqueStruct implements routines.system.IPersistableRow<adresses_uniqueStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];

		public String adresse_id;

		public String getAdresse_id() {
			return this.adresse_id;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String departement;

		public String getDepartement() {
			return this.departement;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public String pays_code;

		public String getPays_code() {
			return this.pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.adresse_id = readString(dis);

					this.ville = readString(dis);

					this.code_postal = readString(dis);

					this.departement = readString(dis);

					this.region = readString(dis);

					this.pays_code = readString(dis);

					this.pays = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.adresse_id, dos);

				// String

				writeString(this.ville, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.departement, dos);

				// String

				writeString(this.region, dos);

				// String

				writeString(this.pays_code, dos);

				// String

				writeString(this.pays, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("adresse_id=" + adresse_id);
			sb.append(",ville=" + ville);
			sb.append(",code_postal=" + code_postal);
			sb.append(",departement=" + departement);
			sb.append(",region=" + region);
			sb.append(",pays_code=" + pays_code);
			sb.append(",pays=" + pays);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(adresses_uniqueStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class adresses_normalizedStruct
			implements routines.system.IPersistableRow<adresses_normalizedStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String adresse_id;

		public String getAdresse_id() {
			return this.adresse_id;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String departement;

		public String getDepartement() {
			return this.departement;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public String pays_code;

		public String getPays_code() {
			return this.pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.adresse_id == null) ? 0 : this.adresse_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final adresses_normalizedStruct other = (adresses_normalizedStruct) obj;

			if (this.adresse_id == null) {
				if (other.adresse_id != null)
					return false;

			} else if (!this.adresse_id.equals(other.adresse_id))

				return false;

			return true;
		}

		public void copyDataTo(adresses_normalizedStruct other) {

			other.adresse_id = this.adresse_id;
			other.ville = this.ville;
			other.code_postal = this.code_postal;
			other.departement = this.departement;
			other.region = this.region;
			other.pays_code = this.pays_code;
			other.pays = this.pays;

		}

		public void copyKeysDataTo(adresses_normalizedStruct other) {

			other.adresse_id = this.adresse_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.adresse_id = readString(dis);

					this.ville = readString(dis);

					this.code_postal = readString(dis);

					this.departement = readString(dis);

					this.region = readString(dis);

					this.pays_code = readString(dis);

					this.pays = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.adresse_id, dos);

				// String

				writeString(this.ville, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.departement, dos);

				// String

				writeString(this.region, dos);

				// String

				writeString(this.pays_code, dos);

				// String

				writeString(this.pays, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("adresse_id=" + adresse_id);
			sb.append(",ville=" + ville);
			sb.append(",code_postal=" + code_postal);
			sb.append(",departement=" + departement);
			sb.append(",region=" + region);
			sb.append(",pays_code=" + pays_code);
			sb.append(",pays=" + pays);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(adresses_normalizedStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.adresse_id, other.adresse_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class mergedStruct implements routines.system.IPersistableRow<mergedStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];

		public String adresse_id;

		public String getAdresse_id() {
			return this.adresse_id;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String departement;

		public String getDepartement() {
			return this.departement;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public String pays_code;

		public String getPays_code() {
			return this.pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.adresse_id = readString(dis);

					this.ville = readString(dis);

					this.code_postal = readString(dis);

					this.departement = readString(dis);

					this.region = readString(dis);

					this.pays_code = readString(dis);

					this.pays = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.adresse_id, dos);

				// String

				writeString(this.ville, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.departement, dos);

				// String

				writeString(this.region, dos);

				// String

				writeString(this.pays_code, dos);

				// String

				writeString(this.pays, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("adresse_id=" + adresse_id);
			sb.append(",ville=" + ville);
			sb.append(",code_postal=" + code_postal);
			sb.append(",departement=" + departement);
			sb.append(",region=" + region);
			sb.append(",pays_code=" + pays_code);
			sb.append(",pays=" + pays);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mergedStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class remunerations_adressesStruct
			implements routines.system.IPersistableRow<remunerations_adressesStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String adresse_id;

		public String getAdresse_id() {
			return this.adresse_id;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String departement;

		public String getDepartement() {
			return this.departement;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public String pays_code;

		public String getPays_code() {
			return this.pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.adresse_id == null) ? 0 : this.adresse_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final remunerations_adressesStruct other = (remunerations_adressesStruct) obj;

			if (this.adresse_id == null) {
				if (other.adresse_id != null)
					return false;

			} else if (!this.adresse_id.equals(other.adresse_id))

				return false;

			return true;
		}

		public void copyDataTo(remunerations_adressesStruct other) {

			other.adresse_id = this.adresse_id;
			other.ville = this.ville;
			other.code_postal = this.code_postal;
			other.departement = this.departement;
			other.region = this.region;
			other.pays_code = this.pays_code;
			other.pays = this.pays;

		}

		public void copyKeysDataTo(remunerations_adressesStruct other) {

			other.adresse_id = this.adresse_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.adresse_id = readString(dis);

					this.ville = readString(dis);

					this.code_postal = readString(dis);

					this.departement = readString(dis);

					this.region = readString(dis);

					this.pays_code = readString(dis);

					this.pays = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.adresse_id, dos);

				// String

				writeString(this.ville, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.departement, dos);

				// String

				writeString(this.region, dos);

				// String

				writeString(this.pays_code, dos);

				// String

				writeString(this.pays, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("adresse_id=" + adresse_id);
			sb.append(",ville=" + ville);
			sb.append(",code_postal=" + code_postal);
			sb.append(",departement=" + departement);
			sb.append(",region=" + region);
			sb.append(",pays_code=" + pays_code);
			sb.append(",pays=" + pays);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(remunerations_adressesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.adresse_id, other.adresse_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class remunerations_rawStruct implements routines.system.IPersistableRow<remunerations_rawStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String denomination_sociale;

		public String getDenomination_sociale() {
			return this.denomination_sociale;
		}

		public String ligne_identifiant;

		public String getLigne_identifiant() {
			return this.ligne_identifiant;
		}

		public Character ligne_rectification;

		public Character getLigne_rectification() {
			return this.ligne_rectification;
		}

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String categorie;

		public String getCategorie() {
			return this.categorie;
		}

		public String benef_nom;

		public String getBenef_nom() {
			return this.benef_nom;
		}

		public String benef_prenom;

		public String getBenef_prenom() {
			return this.benef_prenom;
		}

		public String benef_qualite_code;

		public String getBenef_qualite_code() {
			return this.benef_qualite_code;
		}

		public String qualite;

		public String getQualite() {
			return this.qualite;
		}

		public String benef_adresse1;

		public String getBenef_adresse1() {
			return this.benef_adresse1;
		}

		public String benef_adresse2;

		public String getBenef_adresse2() {
			return this.benef_adresse2;
		}

		public String benef_adresse3;

		public String getBenef_adresse3() {
			return this.benef_adresse3;
		}

		public String benef_adresse4;

		public String getBenef_adresse4() {
			return this.benef_adresse4;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_ville;

		public String getBenef_ville() {
			return this.benef_ville;
		}

		public String benef_pays_code;

		public String getBenef_pays_code() {
			return this.benef_pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String benef_titre_code;

		public String getBenef_titre_code() {
			return this.benef_titre_code;
		}

		public String benef_titre_libelle;

		public String getBenef_titre_libelle() {
			return this.benef_titre_libelle;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_speicalite_libelle;

		public String getBenef_speicalite_libelle() {
			return this.benef_speicalite_libelle;
		}

		public String benef_identifiant_type_code;

		public String getBenef_identifiant_type_code() {
			return this.benef_identifiant_type_code;
		}

		public String identifiant_type;

		public String getIdentifiant_type() {
			return this.identifiant_type;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String benef_etablissement;

		public String getBenef_etablissement() {
			return this.benef_etablissement;
		}

		public String benef_etablissement_codepostal;

		public String getBenef_etablissement_codepostal() {
			return this.benef_etablissement_codepostal;
		}

		public String benef_etablissement_ville;

		public String getBenef_etablissement_ville() {
			return this.benef_etablissement_ville;
		}

		public String benef_denomination_sociale;

		public String getBenef_denomination_sociale() {
			return this.benef_denomination_sociale;
		}

		public String benef_objet_social;

		public String getBenef_objet_social() {
			return this.benef_objet_social;
		}

		public String ligne_type;

		public String getLigne_type() {
			return this.ligne_type;
		}

		public String remu_date;

		public String getRemu_date() {
			return this.remu_date;
		}

		public Integer remu_montant_ttc;

		public Integer getRemu_montant_ttc() {
			return this.remu_montant_ttc;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.entreprise_identifiant = readString(dis);

					this.denomination_sociale = readString(dis);

					this.ligne_identifiant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ligne_rectification = null;
					} else {
						this.ligne_rectification = dis.readChar();
					}

					this.benef_categorie_code = readString(dis);

					this.categorie = readString(dis);

					this.benef_nom = readString(dis);

					this.benef_prenom = readString(dis);

					this.benef_qualite_code = readString(dis);

					this.qualite = readString(dis);

					this.benef_adresse1 = readString(dis);

					this.benef_adresse2 = readString(dis);

					this.benef_adresse3 = readString(dis);

					this.benef_adresse4 = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_ville = readString(dis);

					this.benef_pays_code = readString(dis);

					this.pays = readString(dis);

					this.benef_titre_code = readString(dis);

					this.benef_titre_libelle = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_speicalite_libelle = readString(dis);

					this.benef_identifiant_type_code = readString(dis);

					this.identifiant_type = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.benef_etablissement = readString(dis);

					this.benef_etablissement_codepostal = readString(dis);

					this.benef_etablissement_ville = readString(dis);

					this.benef_denomination_sociale = readString(dis);

					this.benef_objet_social = readString(dis);

					this.ligne_type = readString(dis);

					this.remu_date = readString(dis);

					this.remu_montant_ttc = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entreprise_identifiant, dos);

				// String

				writeString(this.denomination_sociale, dos);

				// String

				writeString(this.ligne_identifiant, dos);

				// Character

				if (this.ligne_rectification == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.ligne_rectification);
				}

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.categorie, dos);

				// String

				writeString(this.benef_nom, dos);

				// String

				writeString(this.benef_prenom, dos);

				// String

				writeString(this.benef_qualite_code, dos);

				// String

				writeString(this.qualite, dos);

				// String

				writeString(this.benef_adresse1, dos);

				// String

				writeString(this.benef_adresse2, dos);

				// String

				writeString(this.benef_adresse3, dos);

				// String

				writeString(this.benef_adresse4, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_ville, dos);

				// String

				writeString(this.benef_pays_code, dos);

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.benef_titre_code, dos);

				// String

				writeString(this.benef_titre_libelle, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_speicalite_libelle, dos);

				// String

				writeString(this.benef_identifiant_type_code, dos);

				// String

				writeString(this.identifiant_type, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.benef_etablissement, dos);

				// String

				writeString(this.benef_etablissement_codepostal, dos);

				// String

				writeString(this.benef_etablissement_ville, dos);

				// String

				writeString(this.benef_denomination_sociale, dos);

				// String

				writeString(this.benef_objet_social, dos);

				// String

				writeString(this.ligne_type, dos);

				// String

				writeString(this.remu_date, dos);

				// Integer

				writeInteger(this.remu_montant_ttc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",denomination_sociale=" + denomination_sociale);
			sb.append(",ligne_identifiant=" + ligne_identifiant);
			sb.append(",ligne_rectification=" + String.valueOf(ligne_rectification));
			sb.append(",benef_categorie_code=" + benef_categorie_code);
			sb.append(",categorie=" + categorie);
			sb.append(",benef_nom=" + benef_nom);
			sb.append(",benef_prenom=" + benef_prenom);
			sb.append(",benef_qualite_code=" + benef_qualite_code);
			sb.append(",qualite=" + qualite);
			sb.append(",benef_adresse1=" + benef_adresse1);
			sb.append(",benef_adresse2=" + benef_adresse2);
			sb.append(",benef_adresse3=" + benef_adresse3);
			sb.append(",benef_adresse4=" + benef_adresse4);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_ville=" + benef_ville);
			sb.append(",benef_pays_code=" + benef_pays_code);
			sb.append(",pays=" + pays);
			sb.append(",benef_titre_code=" + benef_titre_code);
			sb.append(",benef_titre_libelle=" + benef_titre_libelle);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_speicalite_libelle=" + benef_speicalite_libelle);
			sb.append(",benef_identifiant_type_code=" + benef_identifiant_type_code);
			sb.append(",identifiant_type=" + identifiant_type);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",benef_etablissement=" + benef_etablissement);
			sb.append(",benef_etablissement_codepostal=" + benef_etablissement_codepostal);
			sb.append(",benef_etablissement_ville=" + benef_etablissement_ville);
			sb.append(",benef_denomination_sociale=" + benef_denomination_sociale);
			sb.append(",benef_objet_social=" + benef_objet_social);
			sb.append(",ligne_type=" + ligne_type);
			sb.append(",remu_date=" + remu_date);
			sb.append(",remu_montant_ttc=" + String.valueOf(remu_montant_ttc));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(remunerations_rawStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class avantages_adressesStruct implements routines.system.IPersistableRow<avantages_adressesStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String adresse_id;

		public String getAdresse_id() {
			return this.adresse_id;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String departement;

		public String getDepartement() {
			return this.departement;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public String pays_code;

		public String getPays_code() {
			return this.pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.adresse_id == null) ? 0 : this.adresse_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final avantages_adressesStruct other = (avantages_adressesStruct) obj;

			if (this.adresse_id == null) {
				if (other.adresse_id != null)
					return false;

			} else if (!this.adresse_id.equals(other.adresse_id))

				return false;

			return true;
		}

		public void copyDataTo(avantages_adressesStruct other) {

			other.adresse_id = this.adresse_id;
			other.ville = this.ville;
			other.code_postal = this.code_postal;
			other.departement = this.departement;
			other.region = this.region;
			other.pays_code = this.pays_code;
			other.pays = this.pays;

		}

		public void copyKeysDataTo(avantages_adressesStruct other) {

			other.adresse_id = this.adresse_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.adresse_id = readString(dis);

					this.ville = readString(dis);

					this.code_postal = readString(dis);

					this.departement = readString(dis);

					this.region = readString(dis);

					this.pays_code = readString(dis);

					this.pays = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.adresse_id, dos);

				// String

				writeString(this.ville, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.departement, dos);

				// String

				writeString(this.region, dos);

				// String

				writeString(this.pays_code, dos);

				// String

				writeString(this.pays, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("adresse_id=" + adresse_id);
			sb.append(",ville=" + ville);
			sb.append(",code_postal=" + code_postal);
			sb.append(",departement=" + departement);
			sb.append(",region=" + region);
			sb.append(",pays_code=" + pays_code);
			sb.append(",pays=" + pays);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(avantages_adressesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.adresse_id, other.adresse_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class avantages_rawStruct implements routines.system.IPersistableRow<avantages_rawStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String denomination_sociale;

		public String getDenomination_sociale() {
			return this.denomination_sociale;
		}

		public String ligne_identifiant;

		public String getLigne_identifiant() {
			return this.ligne_identifiant;
		}

		public Character ligne_rectification;

		public Character getLigne_rectification() {
			return this.ligne_rectification;
		}

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String categorie;

		public String getCategorie() {
			return this.categorie;
		}

		public String benef_nom;

		public String getBenef_nom() {
			return this.benef_nom;
		}

		public String benef_prenom;

		public String getBenef_prenom() {
			return this.benef_prenom;
		}

		public String benef_qualite_code;

		public String getBenef_qualite_code() {
			return this.benef_qualite_code;
		}

		public String qualite;

		public String getQualite() {
			return this.qualite;
		}

		public String benef_adresse1;

		public String getBenef_adresse1() {
			return this.benef_adresse1;
		}

		public String benef_adresse2;

		public String getBenef_adresse2() {
			return this.benef_adresse2;
		}

		public String benef_adresse3;

		public String getBenef_adresse3() {
			return this.benef_adresse3;
		}

		public String benef_adresse4;

		public String getBenef_adresse4() {
			return this.benef_adresse4;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_ville;

		public String getBenef_ville() {
			return this.benef_ville;
		}

		public String benef_pays_code;

		public String getBenef_pays_code() {
			return this.benef_pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String benef_titre_code;

		public String getBenef_titre_code() {
			return this.benef_titre_code;
		}

		public String benef_titre_libelle;

		public String getBenef_titre_libelle() {
			return this.benef_titre_libelle;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_speicalite_libelle;

		public String getBenef_speicalite_libelle() {
			return this.benef_speicalite_libelle;
		}

		public String benef_identifiant_type_code;

		public String getBenef_identifiant_type_code() {
			return this.benef_identifiant_type_code;
		}

		public String identifiant_type;

		public String getIdentifiant_type() {
			return this.identifiant_type;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String benef_etablissement;

		public String getBenef_etablissement() {
			return this.benef_etablissement;
		}

		public String benef_etablissement_codepostal;

		public String getBenef_etablissement_codepostal() {
			return this.benef_etablissement_codepostal;
		}

		public String benef_etablissement_ville;

		public String getBenef_etablissement_ville() {
			return this.benef_etablissement_ville;
		}

		public String benef_denomination_sociale;

		public String getBenef_denomination_sociale() {
			return this.benef_denomination_sociale;
		}

		public String benef_objet_social;

		public String getBenef_objet_social() {
			return this.benef_objet_social;
		}

		public String ligne_type;

		public String getLigne_type() {
			return this.ligne_type;
		}

		public String avant_date_signature;

		public String getAvant_date_signature() {
			return this.avant_date_signature;
		}

		public Integer avant_montant_ttc;

		public Integer getAvant_montant_ttc() {
			return this.avant_montant_ttc;
		}

		public String avant_nature;

		public String getAvant_nature() {
			return this.avant_nature;
		}

		public String avant_convention_lie;

		public String getAvant_convention_lie() {
			return this.avant_convention_lie;
		}

		public String semestre;

		public String getSemestre() {
			return this.semestre;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.entreprise_identifiant = readString(dis);

					this.denomination_sociale = readString(dis);

					this.ligne_identifiant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ligne_rectification = null;
					} else {
						this.ligne_rectification = dis.readChar();
					}

					this.benef_categorie_code = readString(dis);

					this.categorie = readString(dis);

					this.benef_nom = readString(dis);

					this.benef_prenom = readString(dis);

					this.benef_qualite_code = readString(dis);

					this.qualite = readString(dis);

					this.benef_adresse1 = readString(dis);

					this.benef_adresse2 = readString(dis);

					this.benef_adresse3 = readString(dis);

					this.benef_adresse4 = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_ville = readString(dis);

					this.benef_pays_code = readString(dis);

					this.pays = readString(dis);

					this.benef_titre_code = readString(dis);

					this.benef_titre_libelle = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_speicalite_libelle = readString(dis);

					this.benef_identifiant_type_code = readString(dis);

					this.identifiant_type = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.benef_etablissement = readString(dis);

					this.benef_etablissement_codepostal = readString(dis);

					this.benef_etablissement_ville = readString(dis);

					this.benef_denomination_sociale = readString(dis);

					this.benef_objet_social = readString(dis);

					this.ligne_type = readString(dis);

					this.avant_date_signature = readString(dis);

					this.avant_montant_ttc = readInteger(dis);

					this.avant_nature = readString(dis);

					this.avant_convention_lie = readString(dis);

					this.semestre = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entreprise_identifiant, dos);

				// String

				writeString(this.denomination_sociale, dos);

				// String

				writeString(this.ligne_identifiant, dos);

				// Character

				if (this.ligne_rectification == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.ligne_rectification);
				}

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.categorie, dos);

				// String

				writeString(this.benef_nom, dos);

				// String

				writeString(this.benef_prenom, dos);

				// String

				writeString(this.benef_qualite_code, dos);

				// String

				writeString(this.qualite, dos);

				// String

				writeString(this.benef_adresse1, dos);

				// String

				writeString(this.benef_adresse2, dos);

				// String

				writeString(this.benef_adresse3, dos);

				// String

				writeString(this.benef_adresse4, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_ville, dos);

				// String

				writeString(this.benef_pays_code, dos);

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.benef_titre_code, dos);

				// String

				writeString(this.benef_titre_libelle, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_speicalite_libelle, dos);

				// String

				writeString(this.benef_identifiant_type_code, dos);

				// String

				writeString(this.identifiant_type, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.benef_etablissement, dos);

				// String

				writeString(this.benef_etablissement_codepostal, dos);

				// String

				writeString(this.benef_etablissement_ville, dos);

				// String

				writeString(this.benef_denomination_sociale, dos);

				// String

				writeString(this.benef_objet_social, dos);

				// String

				writeString(this.ligne_type, dos);

				// String

				writeString(this.avant_date_signature, dos);

				// Integer

				writeInteger(this.avant_montant_ttc, dos);

				// String

				writeString(this.avant_nature, dos);

				// String

				writeString(this.avant_convention_lie, dos);

				// String

				writeString(this.semestre, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",denomination_sociale=" + denomination_sociale);
			sb.append(",ligne_identifiant=" + ligne_identifiant);
			sb.append(",ligne_rectification=" + String.valueOf(ligne_rectification));
			sb.append(",benef_categorie_code=" + benef_categorie_code);
			sb.append(",categorie=" + categorie);
			sb.append(",benef_nom=" + benef_nom);
			sb.append(",benef_prenom=" + benef_prenom);
			sb.append(",benef_qualite_code=" + benef_qualite_code);
			sb.append(",qualite=" + qualite);
			sb.append(",benef_adresse1=" + benef_adresse1);
			sb.append(",benef_adresse2=" + benef_adresse2);
			sb.append(",benef_adresse3=" + benef_adresse3);
			sb.append(",benef_adresse4=" + benef_adresse4);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_ville=" + benef_ville);
			sb.append(",benef_pays_code=" + benef_pays_code);
			sb.append(",pays=" + pays);
			sb.append(",benef_titre_code=" + benef_titre_code);
			sb.append(",benef_titre_libelle=" + benef_titre_libelle);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_speicalite_libelle=" + benef_speicalite_libelle);
			sb.append(",benef_identifiant_type_code=" + benef_identifiant_type_code);
			sb.append(",identifiant_type=" + identifiant_type);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",benef_etablissement=" + benef_etablissement);
			sb.append(",benef_etablissement_codepostal=" + benef_etablissement_codepostal);
			sb.append(",benef_etablissement_ville=" + benef_etablissement_ville);
			sb.append(",benef_denomination_sociale=" + benef_denomination_sociale);
			sb.append(",benef_objet_social=" + benef_objet_social);
			sb.append(",ligne_type=" + ligne_type);
			sb.append(",avant_date_signature=" + avant_date_signature);
			sb.append(",avant_montant_ttc=" + String.valueOf(avant_montant_ttc));
			sb.append(",avant_nature=" + avant_nature);
			sb.append(",avant_convention_lie=" + avant_convention_lie);
			sb.append(",semestre=" + semestre);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(avantages_rawStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class conventions_adressesStruct
			implements routines.system.IPersistableRow<conventions_adressesStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String adresse_id;

		public String getAdresse_id() {
			return this.adresse_id;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String departement;

		public String getDepartement() {
			return this.departement;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public String pays_code;

		public String getPays_code() {
			return this.pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.adresse_id == null) ? 0 : this.adresse_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final conventions_adressesStruct other = (conventions_adressesStruct) obj;

			if (this.adresse_id == null) {
				if (other.adresse_id != null)
					return false;

			} else if (!this.adresse_id.equals(other.adresse_id))

				return false;

			return true;
		}

		public void copyDataTo(conventions_adressesStruct other) {

			other.adresse_id = this.adresse_id;
			other.ville = this.ville;
			other.code_postal = this.code_postal;
			other.departement = this.departement;
			other.region = this.region;
			other.pays_code = this.pays_code;
			other.pays = this.pays;

		}

		public void copyKeysDataTo(conventions_adressesStruct other) {

			other.adresse_id = this.adresse_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.adresse_id = readString(dis);

					this.ville = readString(dis);

					this.code_postal = readString(dis);

					this.departement = readString(dis);

					this.region = readString(dis);

					this.pays_code = readString(dis);

					this.pays = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.adresse_id, dos);

				// String

				writeString(this.ville, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.departement, dos);

				// String

				writeString(this.region, dos);

				// String

				writeString(this.pays_code, dos);

				// String

				writeString(this.pays, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("adresse_id=" + adresse_id);
			sb.append(",ville=" + ville);
			sb.append(",code_postal=" + code_postal);
			sb.append(",departement=" + departement);
			sb.append(",region=" + region);
			sb.append(",pays_code=" + pays_code);
			sb.append(",pays=" + pays);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(conventions_adressesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.adresse_id, other.adresse_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class conventions_rawStruct implements routines.system.IPersistableRow<conventions_rawStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String denomination_sociale;

		public String getDenomination_sociale() {
			return this.denomination_sociale;
		}

		public String ligne_identifiant;

		public String getLigne_identifiant() {
			return this.ligne_identifiant;
		}

		public Character ligne_rectification;

		public Character getLigne_rectification() {
			return this.ligne_rectification;
		}

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String categorie;

		public String getCategorie() {
			return this.categorie;
		}

		public String benef_nom;

		public String getBenef_nom() {
			return this.benef_nom;
		}

		public String benef_prenom;

		public String getBenef_prenom() {
			return this.benef_prenom;
		}

		public String benef_qualite_code;

		public String getBenef_qualite_code() {
			return this.benef_qualite_code;
		}

		public String qualite;

		public String getQualite() {
			return this.qualite;
		}

		public String benef_adresse1;

		public String getBenef_adresse1() {
			return this.benef_adresse1;
		}

		public String benef_adresse2;

		public String getBenef_adresse2() {
			return this.benef_adresse2;
		}

		public String benef_adresse3;

		public String getBenef_adresse3() {
			return this.benef_adresse3;
		}

		public String benef_adresse4;

		public String getBenef_adresse4() {
			return this.benef_adresse4;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_ville;

		public String getBenef_ville() {
			return this.benef_ville;
		}

		public String benef_pays_code;

		public String getBenef_pays_code() {
			return this.benef_pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String benef_titre_code;

		public String getBenef_titre_code() {
			return this.benef_titre_code;
		}

		public String benef_titre_libelle;

		public String getBenef_titre_libelle() {
			return this.benef_titre_libelle;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_speicalite_libelle;

		public String getBenef_speicalite_libelle() {
			return this.benef_speicalite_libelle;
		}

		public String benef_identifiant_type_code;

		public String getBenef_identifiant_type_code() {
			return this.benef_identifiant_type_code;
		}

		public String identifiant_type;

		public String getIdentifiant_type() {
			return this.identifiant_type;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String benef_etablissement;

		public String getBenef_etablissement() {
			return this.benef_etablissement;
		}

		public String benef_etablissement_codepostal;

		public String getBenef_etablissement_codepostal() {
			return this.benef_etablissement_codepostal;
		}

		public String benef_etablissement_ville;

		public String getBenef_etablissement_ville() {
			return this.benef_etablissement_ville;
		}

		public String benef_denomination_sociale;

		public String getBenef_denomination_sociale() {
			return this.benef_denomination_sociale;
		}

		public String benef_objet_social;

		public String getBenef_objet_social() {
			return this.benef_objet_social;
		}

		public String ligne_type;

		public String getLigne_type() {
			return this.ligne_type;
		}

		public String conv_date_signature;

		public String getConv_date_signature() {
			return this.conv_date_signature;
		}

		public String conv_objet;

		public String getConv_objet() {
			return this.conv_objet;
		}

		public String conv_objet_autre;

		public String getConv_objet_autre() {
			return this.conv_objet_autre;
		}

		public String conv_date_debut;

		public String getConv_date_debut() {
			return this.conv_date_debut;
		}

		public String conv_date_fin;

		public String getConv_date_fin() {
			return this.conv_date_fin;
		}

		public String conv_montant_ttc;

		public String getConv_montant_ttc() {
			return this.conv_montant_ttc;
		}

		public String conv_manifestation_date;

		public String getConv_manifestation_date() {
			return this.conv_manifestation_date;
		}

		public String conv_manifestation_nom;

		public String getConv_manifestation_nom() {
			return this.conv_manifestation_nom;
		}

		public String conv_manifestation_lieu;

		public String getConv_manifestation_lieu() {
			return this.conv_manifestation_lieu;
		}

		public String conv_manifestation_organisateur;

		public String getConv_manifestation_organisateur() {
			return this.conv_manifestation_organisateur;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.entreprise_identifiant = readString(dis);

					this.denomination_sociale = readString(dis);

					this.ligne_identifiant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ligne_rectification = null;
					} else {
						this.ligne_rectification = dis.readChar();
					}

					this.benef_categorie_code = readString(dis);

					this.categorie = readString(dis);

					this.benef_nom = readString(dis);

					this.benef_prenom = readString(dis);

					this.benef_qualite_code = readString(dis);

					this.qualite = readString(dis);

					this.benef_adresse1 = readString(dis);

					this.benef_adresse2 = readString(dis);

					this.benef_adresse3 = readString(dis);

					this.benef_adresse4 = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_ville = readString(dis);

					this.benef_pays_code = readString(dis);

					this.pays = readString(dis);

					this.benef_titre_code = readString(dis);

					this.benef_titre_libelle = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_speicalite_libelle = readString(dis);

					this.benef_identifiant_type_code = readString(dis);

					this.identifiant_type = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.benef_etablissement = readString(dis);

					this.benef_etablissement_codepostal = readString(dis);

					this.benef_etablissement_ville = readString(dis);

					this.benef_denomination_sociale = readString(dis);

					this.benef_objet_social = readString(dis);

					this.ligne_type = readString(dis);

					this.conv_date_signature = readString(dis);

					this.conv_objet = readString(dis);

					this.conv_objet_autre = readString(dis);

					this.conv_date_debut = readString(dis);

					this.conv_date_fin = readString(dis);

					this.conv_montant_ttc = readString(dis);

					this.conv_manifestation_date = readString(dis);

					this.conv_manifestation_nom = readString(dis);

					this.conv_manifestation_lieu = readString(dis);

					this.conv_manifestation_organisateur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entreprise_identifiant, dos);

				// String

				writeString(this.denomination_sociale, dos);

				// String

				writeString(this.ligne_identifiant, dos);

				// Character

				if (this.ligne_rectification == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.ligne_rectification);
				}

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.categorie, dos);

				// String

				writeString(this.benef_nom, dos);

				// String

				writeString(this.benef_prenom, dos);

				// String

				writeString(this.benef_qualite_code, dos);

				// String

				writeString(this.qualite, dos);

				// String

				writeString(this.benef_adresse1, dos);

				// String

				writeString(this.benef_adresse2, dos);

				// String

				writeString(this.benef_adresse3, dos);

				// String

				writeString(this.benef_adresse4, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_ville, dos);

				// String

				writeString(this.benef_pays_code, dos);

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.benef_titre_code, dos);

				// String

				writeString(this.benef_titre_libelle, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_speicalite_libelle, dos);

				// String

				writeString(this.benef_identifiant_type_code, dos);

				// String

				writeString(this.identifiant_type, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.benef_etablissement, dos);

				// String

				writeString(this.benef_etablissement_codepostal, dos);

				// String

				writeString(this.benef_etablissement_ville, dos);

				// String

				writeString(this.benef_denomination_sociale, dos);

				// String

				writeString(this.benef_objet_social, dos);

				// String

				writeString(this.ligne_type, dos);

				// String

				writeString(this.conv_date_signature, dos);

				// String

				writeString(this.conv_objet, dos);

				// String

				writeString(this.conv_objet_autre, dos);

				// String

				writeString(this.conv_date_debut, dos);

				// String

				writeString(this.conv_date_fin, dos);

				// String

				writeString(this.conv_montant_ttc, dos);

				// String

				writeString(this.conv_manifestation_date, dos);

				// String

				writeString(this.conv_manifestation_nom, dos);

				// String

				writeString(this.conv_manifestation_lieu, dos);

				// String

				writeString(this.conv_manifestation_organisateur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",denomination_sociale=" + denomination_sociale);
			sb.append(",ligne_identifiant=" + ligne_identifiant);
			sb.append(",ligne_rectification=" + String.valueOf(ligne_rectification));
			sb.append(",benef_categorie_code=" + benef_categorie_code);
			sb.append(",categorie=" + categorie);
			sb.append(",benef_nom=" + benef_nom);
			sb.append(",benef_prenom=" + benef_prenom);
			sb.append(",benef_qualite_code=" + benef_qualite_code);
			sb.append(",qualite=" + qualite);
			sb.append(",benef_adresse1=" + benef_adresse1);
			sb.append(",benef_adresse2=" + benef_adresse2);
			sb.append(",benef_adresse3=" + benef_adresse3);
			sb.append(",benef_adresse4=" + benef_adresse4);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_ville=" + benef_ville);
			sb.append(",benef_pays_code=" + benef_pays_code);
			sb.append(",pays=" + pays);
			sb.append(",benef_titre_code=" + benef_titre_code);
			sb.append(",benef_titre_libelle=" + benef_titre_libelle);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_speicalite_libelle=" + benef_speicalite_libelle);
			sb.append(",benef_identifiant_type_code=" + benef_identifiant_type_code);
			sb.append(",identifiant_type=" + identifiant_type);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",benef_etablissement=" + benef_etablissement);
			sb.append(",benef_etablissement_codepostal=" + benef_etablissement_codepostal);
			sb.append(",benef_etablissement_ville=" + benef_etablissement_ville);
			sb.append(",benef_denomination_sociale=" + benef_denomination_sociale);
			sb.append(",benef_objet_social=" + benef_objet_social);
			sb.append(",ligne_type=" + ligne_type);
			sb.append(",conv_date_signature=" + conv_date_signature);
			sb.append(",conv_objet=" + conv_objet);
			sb.append(",conv_objet_autre=" + conv_objet_autre);
			sb.append(",conv_date_debut=" + conv_date_debut);
			sb.append(",conv_date_fin=" + conv_date_fin);
			sb.append(",conv_montant_ttc=" + conv_montant_ttc);
			sb.append(",conv_manifestation_date=" + conv_manifestation_date);
			sb.append(",conv_manifestation_nom=" + conv_manifestation_nom);
			sb.append(",conv_manifestation_lieu=" + conv_manifestation_lieu);
			sb.append(",conv_manifestation_organisateur=" + conv_manifestation_organisateur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(conventions_rawStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class entreprises_adressesStruct
			implements routines.system.IPersistableRow<entreprises_adressesStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String adresse_id;

		public String getAdresse_id() {
			return this.adresse_id;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String departement;

		public String getDepartement() {
			return this.departement;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public String pays_code;

		public String getPays_code() {
			return this.pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.adresse_id == null) ? 0 : this.adresse_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final entreprises_adressesStruct other = (entreprises_adressesStruct) obj;

			if (this.adresse_id == null) {
				if (other.adresse_id != null)
					return false;

			} else if (!this.adresse_id.equals(other.adresse_id))

				return false;

			return true;
		}

		public void copyDataTo(entreprises_adressesStruct other) {

			other.adresse_id = this.adresse_id;
			other.ville = this.ville;
			other.code_postal = this.code_postal;
			other.departement = this.departement;
			other.region = this.region;
			other.pays_code = this.pays_code;
			other.pays = this.pays;

		}

		public void copyKeysDataTo(entreprises_adressesStruct other) {

			other.adresse_id = this.adresse_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.adresse_id = readString(dis);

					this.ville = readString(dis);

					this.code_postal = readString(dis);

					this.departement = readString(dis);

					this.region = readString(dis);

					this.pays_code = readString(dis);

					this.pays = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.adresse_id, dos);

				// String

				writeString(this.ville, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.departement, dos);

				// String

				writeString(this.region, dos);

				// String

				writeString(this.pays_code, dos);

				// String

				writeString(this.pays, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("adresse_id=" + adresse_id);
			sb.append(",ville=" + ville);
			sb.append(",code_postal=" + code_postal);
			sb.append(",departement=" + departement);
			sb.append(",region=" + region);
			sb.append(",pays_code=" + pays_code);
			sb.append(",pays=" + pays);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(entreprises_adressesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.adresse_id, other.adresse_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class entreprises_rawStruct implements routines.system.IPersistableRow<entreprises_rawStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];

		public String identifiant;

		public String getIdentifiant() {
			return this.identifiant;
		}

		public String pays_code;

		public String getPays_code() {
			return this.pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String secteur_activite_code;

		public String getSecteur_activite_code() {
			return this.secteur_activite_code;
		}

		public String secteur;

		public String getSecteur() {
			return this.secteur;
		}

		public String denomination_sociale;

		public String getDenomination_sociale() {
			return this.denomination_sociale;
		}

		public String adresse_1;

		public String getAdresse_1() {
			return this.adresse_1;
		}

		public String adresse_2;

		public String getAdresse_2() {
			return this.adresse_2;
		}

		public String adresse_3;

		public String getAdresse_3() {
			return this.adresse_3;
		}

		public String adresse_4;

		public String getAdresse_4() {
			return this.adresse_4;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.identifiant = readString(dis);

					this.pays_code = readString(dis);

					this.pays = readString(dis);

					this.secteur_activite_code = readString(dis);

					this.secteur = readString(dis);

					this.denomination_sociale = readString(dis);

					this.adresse_1 = readString(dis);

					this.adresse_2 = readString(dis);

					this.adresse_3 = readString(dis);

					this.adresse_4 = readString(dis);

					this.code_postal = readString(dis);

					this.ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.identifiant, dos);

				// String

				writeString(this.pays_code, dos);

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.secteur_activite_code, dos);

				// String

				writeString(this.secteur, dos);

				// String

				writeString(this.denomination_sociale, dos);

				// String

				writeString(this.adresse_1, dos);

				// String

				writeString(this.adresse_2, dos);

				// String

				writeString(this.adresse_3, dos);

				// String

				writeString(this.adresse_4, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("identifiant=" + identifiant);
			sb.append(",pays_code=" + pays_code);
			sb.append(",pays=" + pays);
			sb.append(",secteur_activite_code=" + secteur_activite_code);
			sb.append(",secteur=" + secteur);
			sb.append(",denomination_sociale=" + denomination_sociale);
			sb.append(",adresse_1=" + adresse_1);
			sb.append(",adresse_2=" + adresse_2);
			sb.append(",adresse_3=" + adresse_3);
			sb.append(",adresse_4=" + adresse_4);
			sb.append(",code_postal=" + code_postal);
			sb.append(",ville=" + ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(entreprises_rawStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				remunerations_rawStruct remunerations_raw = new remunerations_rawStruct();
				remunerations_adressesStruct remunerations_adresses = new remunerations_adressesStruct();

				entreprises_rawStruct entreprises_raw = new entreprises_rawStruct();
				entreprises_adressesStruct entreprises_adresses = new entreprises_adressesStruct();

				conventions_rawStruct conventions_raw = new conventions_rawStruct();
				conventions_adressesStruct conventions_adresses = new conventions_adressesStruct();

				avantages_rawStruct avantages_raw = new avantages_rawStruct();
				avantages_adressesStruct avantages_adresses = new avantages_adressesStruct();

				mergedStruct merged = new mergedStruct();
				adresses_normalizedStruct adresses_normalized = new adresses_normalizedStruct();
				adresses_uniqueStruct adresses_unique = new adresses_uniqueStruct();
				adressesStruct adresses = new adressesStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "adresses");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;

				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "adresse_dim";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbProperties_tDBOutput_1 = "noDatetimeStringSync=true";
				String url_tDBOutput_1 = null;
				if (dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
					url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "transparence_sante_bi" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_1.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "transparence_sante_bi" + "?"
							+ properties_tDBOutput_1;
				}
				String driverClass_tDBOutput_1 = "com.mysql.jdbc.Driver";

				String dbUser_tDBOutput_1 = "root";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:mnpCOpFgwyqQkJQzRMSHSfrUHXN4eqIsE4fmwQ==");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				java.lang.Class.forName(driverClass_tDBOutput_1);

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;

				try (java.sql.Statement stmtClear_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtClear_tDBOutput_1.executeUpdate("DELETE FROM `" + tableName_tDBOutput_1 + "`");
				}

				String insert_tDBOutput_1 = "INSERT INTO `" + "adresse_dim"
						+ "` (`adresse_id`,`ville`,`code_postal`,`departement`,`region`,`pays_code`,`pays`) VALUES (?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_1 = 100;
				int batchSizeCounter_tDBOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "adresses_unique");
				}

				int tos_count_tMap_6 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
				adressesStruct adresses_tmp = new adressesStruct();
// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "adresses_normalized");
				}

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String adresse_id;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.adresse_id == null) ? 0 : this.adresse_id.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.adresse_id == null) {
							if (other.adresse_id != null)
								return false;

						} else if (!this.adresse_id.equals(other.adresse_id))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tMap_8 begin ] start
				 */

				ok_Hash.put("tMap_8", false);
				start_Hash.put("tMap_8", System.currentTimeMillis());

				currentComponent = "tMap_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "merged");
				}

				int tos_count_tMap_8 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_8__Struct {
				}
				Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
				adresses_normalizedStruct adresses_normalized_tmp = new adresses_normalizedStruct();
// ###############################

				/**
				 * [tMap_8 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "conventions_adresses",
							"avantages_adresses", "remunerations_adresses", "entreprises_adresses");
				}

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "remunerations_raw");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
					String adresse_id;
					String ville;
					String code_postal;
					String initialized_field;
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				remunerations_adressesStruct remunerations_adresses_tmp = new remunerations_adressesStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_4 = 0;
				int footer_tFileInputDelimited_4 = 0;
				int totalLinetFileInputDelimited_4 = 0;
				int limittFileInputDelimited_4 = -1;
				int lastLinetFileInputDelimited_4 = -1;

				char fieldSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_4 = ((String) ";").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_4 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_4 = /** Start field tFileInputDelimited_4:FILENAME */
						"C:/BI/transparence-sante/data/data.gouv/remunerations.csv"/**
																					 * End field
																					 * tFileInputDelimited_4:FILENAME
																					 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_4 = null;

				try {

					String[] rowtFileInputDelimited_4 = null;
					int currentLinetFileInputDelimited_4 = 0;
					int outputLinetFileInputDelimited_4 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_4 = 0;
							if (footer_value_tFileInputDelimited_4 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_4,
									fieldSeparator_tFileInputDelimited_4[0], "UTF-8");
						} else {
							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_4)),
											"UTF-8")),
									fieldSeparator_tFileInputDelimited_4[0]);
						}

						csvReadertFileInputDelimited_4.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
							csvReadertFileInputDelimited_4.setLineEnd("" + rowSeparator_tFileInputDelimited_4[0]);

						csvReadertFileInputDelimited_4.setQuoteChar('"');

						csvReadertFileInputDelimited_4.setEscapeChar(csvReadertFileInputDelimited_4.getQuoteChar());

						if (footer_tFileInputDelimited_4 > 0) {
							for (totalLinetFileInputDelimited_4 = 0; totalLinetFileInputDelimited_4 < 1; totalLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
							csvReadertFileInputDelimited_4.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_4.readNext()) {

								totalLinetFileInputDelimited_4++;

							}
							int lastLineTemptFileInputDelimited_4 = totalLinetFileInputDelimited_4
									- footer_tFileInputDelimited_4 < 0 ? 0
											: totalLinetFileInputDelimited_4 - footer_tFileInputDelimited_4;
							if (lastLinetFileInputDelimited_4 > 0) {
								lastLinetFileInputDelimited_4 = lastLinetFileInputDelimited_4 < lastLineTemptFileInputDelimited_4
										? lastLinetFileInputDelimited_4
										: lastLineTemptFileInputDelimited_4;
							} else {
								lastLinetFileInputDelimited_4 = lastLineTemptFileInputDelimited_4;
							}

							csvReadertFileInputDelimited_4.close();
							if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_4,
										fieldSeparator_tFileInputDelimited_4[0], "UTF-8");
							} else {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_4)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_4[0]);
							}
							csvReadertFileInputDelimited_4.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
								csvReadertFileInputDelimited_4.setLineEnd("" + rowSeparator_tFileInputDelimited_4[0]);

							csvReadertFileInputDelimited_4.setQuoteChar('"');

							csvReadertFileInputDelimited_4.setEscapeChar(csvReadertFileInputDelimited_4.getQuoteChar());

						}

						if (limittFileInputDelimited_4 != 0) {
							for (currentLinetFileInputDelimited_4 = 0; currentLinetFileInputDelimited_4 < 1; currentLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
						}
						csvReadertFileInputDelimited_4.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_4 != 0 && csvReadertFileInputDelimited_4 != null
							&& csvReadertFileInputDelimited_4.readNext()) {
						rowstate_tFileInputDelimited_4.reset();

						rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4.getValues();

						currentLinetFileInputDelimited_4++;

						if (lastLinetFileInputDelimited_4 > -1
								&& currentLinetFileInputDelimited_4 > lastLinetFileInputDelimited_4) {
							break;
						}
						outputLinetFileInputDelimited_4++;
						if (limittFileInputDelimited_4 > 0
								&& outputLinetFileInputDelimited_4 > limittFileInputDelimited_4) {
							break;
						}

						remunerations_raw = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						remunerations_raw = new remunerations_rawStruct();
						try {

							char fieldSeparator_tFileInputDelimited_4_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_4_ListType = ((String) ";").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_4.length == 1 && ("\015").equals(rowtFileInputDelimited_4[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								remunerations_raw.entreprise_identifiant = null;

								remunerations_raw.denomination_sociale = null;

								remunerations_raw.ligne_identifiant = null;

								remunerations_raw.ligne_rectification = null;

								remunerations_raw.benef_categorie_code = null;

								remunerations_raw.categorie = null;

								remunerations_raw.benef_nom = null;

								remunerations_raw.benef_prenom = null;

								remunerations_raw.benef_qualite_code = null;

								remunerations_raw.qualite = null;

								remunerations_raw.benef_adresse1 = null;

								remunerations_raw.benef_adresse2 = null;

								remunerations_raw.benef_adresse3 = null;

								remunerations_raw.benef_adresse4 = null;

								remunerations_raw.benef_codepostal = null;

								remunerations_raw.benef_ville = null;

								remunerations_raw.benef_pays_code = null;

								remunerations_raw.pays = null;

								remunerations_raw.benef_titre_code = null;

								remunerations_raw.benef_titre_libelle = null;

								remunerations_raw.benef_specialite_code = null;

								remunerations_raw.benef_speicalite_libelle = null;

								remunerations_raw.benef_identifiant_type_code = null;

								remunerations_raw.identifiant_type = null;

								remunerations_raw.benef_identifiant_valeur = null;

								remunerations_raw.benef_etablissement = null;

								remunerations_raw.benef_etablissement_codepostal = null;

								remunerations_raw.benef_etablissement_ville = null;

								remunerations_raw.benef_denomination_sociale = null;

								remunerations_raw.benef_objet_social = null;

								remunerations_raw.ligne_type = null;

								remunerations_raw.remu_date = null;

								remunerations_raw.remu_montant_ttc = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_4 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_4 = 0;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.entreprise_identifiant = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.entreprise_identifiant = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 1;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.denomination_sociale = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.denomination_sociale = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 2;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.ligne_identifiant = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.ligne_identifiant = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 3;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4].length() > 0) {
										try {

											remunerations_raw.ligne_rectification = ParserUtils.parseTo_Character(
													rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);

										} catch (java.lang.Exception ex_tFileInputDelimited_4) {
											rowstate_tFileInputDelimited_4.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"ligne_rectification", "remunerations_raw",
															rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4],
															ex_tFileInputDelimited_4),
													ex_tFileInputDelimited_4));
										}
									} else {

										remunerations_raw.ligne_rectification = null;

									}

								} else {

									remunerations_raw.ligne_rectification = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 4;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.benef_categorie_code = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.benef_categorie_code = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 5;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.categorie = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.categorie = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 6;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.benef_nom = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.benef_nom = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 7;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.benef_prenom = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.benef_prenom = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 8;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.benef_qualite_code = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.benef_qualite_code = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 9;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.qualite = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.qualite = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 10;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.benef_adresse1 = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.benef_adresse1 = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 11;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.benef_adresse2 = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.benef_adresse2 = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 12;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.benef_adresse3 = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.benef_adresse3 = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 13;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.benef_adresse4 = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.benef_adresse4 = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 14;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.benef_codepostal = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.benef_codepostal = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 15;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.benef_ville = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.benef_ville = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 16;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.benef_pays_code = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.benef_pays_code = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 17;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.pays = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.pays = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 18;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.benef_titre_code = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.benef_titre_code = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 19;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.benef_titre_libelle = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.benef_titre_libelle = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 20;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.benef_specialite_code = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.benef_specialite_code = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 21;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.benef_speicalite_libelle = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.benef_speicalite_libelle = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 22;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.benef_identifiant_type_code = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.benef_identifiant_type_code = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 23;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.identifiant_type = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.identifiant_type = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 24;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.benef_identifiant_valeur = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.benef_identifiant_valeur = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 25;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.benef_etablissement = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.benef_etablissement = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 26;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.benef_etablissement_codepostal = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.benef_etablissement_codepostal = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 27;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.benef_etablissement_ville = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.benef_etablissement_ville = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 28;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.benef_denomination_sociale = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.benef_denomination_sociale = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 29;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.benef_objet_social = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.benef_objet_social = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 30;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.ligne_type = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.ligne_type = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 31;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									remunerations_raw.remu_date = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {

									remunerations_raw.remu_date = null;

								}

								columnIndexWithD_tFileInputDelimited_4 = 32;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									if (rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4].length() > 0) {
										try {

											remunerations_raw.remu_montant_ttc = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4]);

										} catch (java.lang.Exception ex_tFileInputDelimited_4) {
											rowstate_tFileInputDelimited_4.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"remu_montant_ttc", "remunerations_raw",
															rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4],
															ex_tFileInputDelimited_4),
													ex_tFileInputDelimited_4));
										}
									} else {

										remunerations_raw.remu_montant_ttc = null;

									}

								} else {

									remunerations_raw.remu_montant_ttc = null;

								}

							}

							if (rowstate_tFileInputDelimited_4.getException() != null) {
								throw rowstate_tFileInputDelimited_4.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							remunerations_raw = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */

						/**
						 * [tFileInputDelimited_4 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_begin ] stop
						 */
// Start of branch "remunerations_raw"
						if (remunerations_raw != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "remunerations_raw");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;
								Var.adresse_id = null;
								Var.ville = null;
								Var.code_postal = null;
								Var.initialized_field = null;// ###############################
								// ###############################
								// # Output tables

								remunerations_adresses = null;

// # Output table : 'remunerations_adresses'
								remunerations_adresses_tmp.adresse_id = Var.adresse_id;
								remunerations_adresses_tmp.ville = Var.ville;
								remunerations_adresses_tmp.code_postal = Var.code_postal;
								remunerations_adresses_tmp.departement = Var.initialized_field;
								remunerations_adresses_tmp.region = Var.initialized_field;
								remunerations_adresses_tmp.pays_code = remunerations_raw.benef_pays_code;
								remunerations_adresses_tmp.pays = remunerations_raw.pays;
								remunerations_adresses = remunerations_adresses_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
// Start of branch "remunerations_adresses"
							if (remunerations_adresses != null) {

								/**
								 * [tUnite_1 main ] start
								 */

								currentComponent = "tUnite_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "remunerations_adresses");
								}

//////////

// for output
								merged = new mergedStruct();

								merged.adresse_id = remunerations_adresses.adresse_id;
								merged.ville = remunerations_adresses.ville;
								merged.code_postal = remunerations_adresses.code_postal;
								merged.departement = remunerations_adresses.departement;
								merged.region = remunerations_adresses.region;
								merged.pays_code = remunerations_adresses.pays_code;
								merged.pays = remunerations_adresses.pays;

								nb_line_tUnite_1++;

//////////

								tos_count_tUnite_1++;

								/**
								 * [tUnite_1 main ] stop
								 */

								/**
								 * [tUnite_1 process_data_begin ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_begin ] stop
								 */

								/**
								 * [tMap_8 main ] start
								 */

								currentComponent = "tMap_8";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "merged");
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_8 = false;
								boolean mainRowRejected_tMap_8 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
									// ###############################
									// # Output tables

									adresses_normalized = null;

// # Output table : 'adresses_normalized'
									adresses_normalized_tmp.adresse_id = AdressesIdGenerator
											.reNormalizedId(merged.adresse_id);
									adresses_normalized_tmp.ville = merged.ville;
									adresses_normalized_tmp.code_postal = merged.code_postal;
									adresses_normalized_tmp.departement = merged.departement;
									adresses_normalized_tmp.region = merged.region;
									adresses_normalized_tmp.pays_code = merged.pays_code;
									adresses_normalized_tmp.pays = merged.pays;
									adresses_normalized = adresses_normalized_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_8 = false;

								tos_count_tMap_8++;

								/**
								 * [tMap_8 main ] stop
								 */

								/**
								 * [tMap_8 process_data_begin ] start
								 */

								currentComponent = "tMap_8";

								/**
								 * [tMap_8 process_data_begin ] stop
								 */
// Start of branch "adresses_normalized"
								if (adresses_normalized != null) {

									/**
									 * [tUniqRow_1 main ] start
									 */

									currentComponent = "tUniqRow_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "adresses_normalized");
									}

									adresses_unique = null;
									if (adresses_normalized.adresse_id == null) {
										finder_tUniqRow_1.adresse_id = null;
									} else {
										finder_tUniqRow_1.adresse_id = adresses_normalized.adresse_id.toLowerCase();
									}
									finder_tUniqRow_1.hashCodeDirty = true;
									if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
										KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

										if (adresses_normalized.adresse_id == null) {
											new_tUniqRow_1.adresse_id = null;
										} else {
											new_tUniqRow_1.adresse_id = adresses_normalized.adresse_id.toLowerCase();
										}

										keystUniqRow_1.add(new_tUniqRow_1);
										if (adresses_unique == null) {

											adresses_unique = new adresses_uniqueStruct();
										}
										adresses_unique.adresse_id = adresses_normalized.adresse_id;
										adresses_unique.ville = adresses_normalized.ville;
										adresses_unique.code_postal = adresses_normalized.code_postal;
										adresses_unique.departement = adresses_normalized.departement;
										adresses_unique.region = adresses_normalized.region;
										adresses_unique.pays_code = adresses_normalized.pays_code;
										adresses_unique.pays = adresses_normalized.pays;
										nb_uniques_tUniqRow_1++;
									} else {
										nb_duplicates_tUniqRow_1++;
									}

									tos_count_tUniqRow_1++;

									/**
									 * [tUniqRow_1 main ] stop
									 */

									/**
									 * [tUniqRow_1 process_data_begin ] start
									 */

									currentComponent = "tUniqRow_1";

									/**
									 * [tUniqRow_1 process_data_begin ] stop
									 */
// Start of branch "adresses_unique"
									if (adresses_unique != null) {

										/**
										 * [tMap_6 main ] start
										 */

										currentComponent = "tMap_6";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "adresses_unique");
										}

										boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_6 = false;
										boolean mainRowRejected_tMap_6 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
											// ###############################
											// # Output tables

											adresses = null;

// # Output table : 'adresses'
											adresses_tmp.adresse_id = adresses_unique.adresse_id;
											adresses_tmp.ville = adresses_unique.ville;
											adresses_tmp.code_postal = adresses_unique.code_postal;
											adresses_tmp.departement = "N/A";
											adresses_tmp.region = "N/A";
											adresses_tmp.pays_code = adresses_unique.adresse_id.equals("INCONNU")
													? "N/A"
													: adresses_unique.pays_code.equals("") ? "[FR]"
															: adresses_unique.pays_code;
											adresses_tmp.pays = !adresses_unique.pays.equals("") ? adresses_unique.pays
													: "FRANCE";
											adresses = adresses_tmp;
// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_6 = false;

										tos_count_tMap_6++;

										/**
										 * [tMap_6 main ] stop
										 */

										/**
										 * [tMap_6 process_data_begin ] start
										 */

										currentComponent = "tMap_6";

										/**
										 * [tMap_6 process_data_begin ] stop
										 */
// Start of branch "adresses"
										if (adresses != null) {

											/**
											 * [tDBOutput_1 main ] start
											 */

											currentComponent = "tDBOutput_1";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1, "adresses");
											}

											whetherReject_tDBOutput_1 = false;
											if (adresses.adresse_id == null) {
												pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(1, adresses.adresse_id);
											}

											if (adresses.ville == null) {
												pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(2, adresses.ville);
											}

											if (adresses.code_postal == null) {
												pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(3, adresses.code_postal);
											}

											if (adresses.departement == null) {
												pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(4, adresses.departement);
											}

											if (adresses.region == null) {
												pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(5, adresses.region);
											}

											if (adresses.pays_code == null) {
												pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(6, adresses.pays_code);
											}

											if (adresses.pays == null) {
												pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(7, adresses.pays);
											}

											pstmt_tDBOutput_1.addBatch();
											nb_line_tDBOutput_1++;

											batchSizeCounter_tDBOutput_1++;
											if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
												try {
													int countSum_tDBOutput_1 = 0;
													for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
														countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED
																? 0
																: 1);
													}
													insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_1 = 0;
													for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
														countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
																: countEach_tDBOutput_1);
													}
													insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
													System.err.println(e.getMessage());
												}

												batchSizeCounter_tDBOutput_1 = 0;
											}
											commitCounter_tDBOutput_1++;

											if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

												try {
													int countSum_tDBOutput_1 = 0;
													for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
														countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
													}
													insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_1 = 0;
													for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
														countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
																: countEach_tDBOutput_1);
													}
													insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
													System.err.println(e.getMessage());

												}
												conn_tDBOutput_1.commit();
												commitCounter_tDBOutput_1 = 0;

											}

											tos_count_tDBOutput_1++;

											/**
											 * [tDBOutput_1 main ] stop
											 */

											/**
											 * [tDBOutput_1 process_data_begin ] start
											 */

											currentComponent = "tDBOutput_1";

											/**
											 * [tDBOutput_1 process_data_begin ] stop
											 */

											/**
											 * [tDBOutput_1 process_data_end ] start
											 */

											currentComponent = "tDBOutput_1";

											/**
											 * [tDBOutput_1 process_data_end ] stop
											 */

										} // End of branch "adresses"

										/**
										 * [tMap_6 process_data_end ] start
										 */

										currentComponent = "tMap_6";

										/**
										 * [tMap_6 process_data_end ] stop
										 */

									} // End of branch "adresses_unique"

									/**
									 * [tUniqRow_1 process_data_end ] start
									 */

									currentComponent = "tUniqRow_1";

									/**
									 * [tUniqRow_1 process_data_end ] stop
									 */

								} // End of branch "adresses_normalized"

								/**
								 * [tMap_8 process_data_end ] start
								 */

								currentComponent = "tMap_8";

								/**
								 * [tMap_8 process_data_end ] stop
								 */

								/**
								 * [tUnite_1 process_data_end ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_end ] stop
								 */

							} // End of branch "remunerations_adresses"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "remunerations_raw"

						/**
						 * [tFileInputDelimited_4 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						/**
						 * [tFileInputDelimited_4 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						nb_line_tFileInputDelimited_4++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_4 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_4 != null) {
							csvReadertFileInputDelimited_4.close();
						}
					}
					if (csvReadertFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE", nb_line_tFileInputDelimited_4);
					}

				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "remunerations_raw");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "entreprises_raw");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
					String adresse_id;
					String ville;
					String code_postal;
					String initialized_field;
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				entreprises_adressesStruct entreprises_adresses_tmp = new entreprises_adressesStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /** Start field tFileInputDelimited_3:FILENAME */
						"C:/BI/transparence-sante/data/data.gouv/entreprises.csv"/**
																					 * End field
																					 * tFileInputDelimited_3:FILENAME
																					 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0], "UTF-8");
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_3)),
											"UTF-8")),
									fieldSeparator_tFileInputDelimited_3[0]);
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd("" + rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar('"');

						csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 1; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_3.readNext()) {

								totalLinetFileInputDelimited_3++;

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
											: totalLinetFileInputDelimited_3 - footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3
										? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0], "UTF-8");
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_3)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_3[0]);
							}
							csvReadertFileInputDelimited_3.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3.setLineEnd("" + rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar('"');

							csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 1; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_3 != 0 && csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {
						rowstate_tFileInputDelimited_3.reset();

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3.getValues();

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						entreprises_raw = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						entreprises_raw = new entreprises_rawStruct();
						try {

							char fieldSeparator_tFileInputDelimited_3_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_3_ListType = ((String) ",").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_3.length == 1 && ("\015").equals(rowtFileInputDelimited_3[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								entreprises_raw.identifiant = null;

								entreprises_raw.pays_code = null;

								entreprises_raw.pays = null;

								entreprises_raw.secteur_activite_code = null;

								entreprises_raw.secteur = null;

								entreprises_raw.denomination_sociale = null;

								entreprises_raw.adresse_1 = null;

								entreprises_raw.adresse_2 = null;

								entreprises_raw.adresse_3 = null;

								entreprises_raw.adresse_4 = null;

								entreprises_raw.code_postal = null;

								entreprises_raw.ville = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									entreprises_raw.identifiant = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									entreprises_raw.identifiant = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									entreprises_raw.pays_code = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									entreprises_raw.pays_code = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 2;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									entreprises_raw.pays = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									entreprises_raw.pays = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 3;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									entreprises_raw.secteur_activite_code = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									entreprises_raw.secteur_activite_code = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 4;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									entreprises_raw.secteur = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									entreprises_raw.secteur = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 5;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									entreprises_raw.denomination_sociale = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									entreprises_raw.denomination_sociale = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 6;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									entreprises_raw.adresse_1 = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									entreprises_raw.adresse_1 = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 7;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									entreprises_raw.adresse_2 = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									entreprises_raw.adresse_2 = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 8;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									entreprises_raw.adresse_3 = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									entreprises_raw.adresse_3 = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 9;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									entreprises_raw.adresse_4 = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									entreprises_raw.adresse_4 = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 10;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									entreprises_raw.code_postal = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									entreprises_raw.code_postal = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 11;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									entreprises_raw.ville = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									entreprises_raw.ville = null;

								}

							}

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							entreprises_raw = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "entreprises_raw"
						if (entreprises_raw != null) {

							/**
							 * [tMap_3 main ] start
							 */

							currentComponent = "tMap_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "entreprises_raw");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_3 = false;
							boolean mainRowRejected_tMap_3 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_3__Struct Var = Var__tMap_3;
								Var.adresse_id = AdressesIdGenerator.generateAdresseIdFromCodePostalAndVille(
										entreprises_raw.code_postal, entreprises_raw.ville, "", "");
								Var.ville = AdressesIdGenerator.getVilleFromNormalizedId(Var.adresse_id);
								Var.code_postal = AdressesIdGenerator.getCodePostalFromNormalizedId(Var.adresse_id);
								Var.initialized_field = AdressesIdGenerator
										.initialize_Region_Departement_Pays_PaysCode(Var.adresse_id);// ###############################
								// ###############################
								// # Output tables

								entreprises_adresses = null;

// # Output table : 'entreprises_adresses'
								entreprises_adresses_tmp.adresse_id = Var.adresse_id;
								entreprises_adresses_tmp.ville = Var.ville;
								entreprises_adresses_tmp.code_postal = Var.code_postal;
								entreprises_adresses_tmp.departement = Var.initialized_field;
								entreprises_adresses_tmp.region = Var.initialized_field;
								entreprises_adresses_tmp.pays_code = entreprises_raw.pays_code;
								entreprises_adresses_tmp.pays = entreprises_raw.pays;
								entreprises_adresses = entreprises_adresses_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_3 = false;

							tos_count_tMap_3++;

							/**
							 * [tMap_3 main ] stop
							 */

							/**
							 * [tMap_3 process_data_begin ] start
							 */

							currentComponent = "tMap_3";

							/**
							 * [tMap_3 process_data_begin ] stop
							 */
// Start of branch "entreprises_adresses"
							if (entreprises_adresses != null) {

								/**
								 * [tUnite_1 main ] start
								 */

								currentComponent = "tUnite_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "entreprises_adresses");
								}

//////////

// for output
								merged = new mergedStruct();

								merged.adresse_id = entreprises_adresses.adresse_id;
								merged.ville = entreprises_adresses.ville;
								merged.code_postal = entreprises_adresses.code_postal;
								merged.departement = entreprises_adresses.departement;
								merged.region = entreprises_adresses.region;
								merged.pays_code = entreprises_adresses.pays_code;
								merged.pays = entreprises_adresses.pays;

								nb_line_tUnite_1++;

//////////

								tos_count_tUnite_1++;

								/**
								 * [tUnite_1 main ] stop
								 */

								/**
								 * [tUnite_1 process_data_begin ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_begin ] stop
								 */

								/**
								 * [tMap_8 main ] start
								 */

								currentComponent = "tMap_8";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "merged");
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_8 = false;
								boolean mainRowRejected_tMap_8 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
									// ###############################
									// # Output tables

									adresses_normalized = null;

// # Output table : 'adresses_normalized'
									adresses_normalized_tmp.adresse_id = AdressesIdGenerator
											.reNormalizedId(merged.adresse_id);
									adresses_normalized_tmp.ville = merged.ville;
									adresses_normalized_tmp.code_postal = merged.code_postal;
									adresses_normalized_tmp.departement = merged.departement;
									adresses_normalized_tmp.region = merged.region;
									adresses_normalized_tmp.pays_code = merged.pays_code;
									adresses_normalized_tmp.pays = merged.pays;
									adresses_normalized = adresses_normalized_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_8 = false;

								tos_count_tMap_8++;

								/**
								 * [tMap_8 main ] stop
								 */

								/**
								 * [tMap_8 process_data_begin ] start
								 */

								currentComponent = "tMap_8";

								/**
								 * [tMap_8 process_data_begin ] stop
								 */
// Start of branch "adresses_normalized"
								if (adresses_normalized != null) {

									/**
									 * [tUniqRow_1 main ] start
									 */

									currentComponent = "tUniqRow_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "adresses_normalized");
									}

									adresses_unique = null;
									if (adresses_normalized.adresse_id == null) {
										finder_tUniqRow_1.adresse_id = null;
									} else {
										finder_tUniqRow_1.adresse_id = adresses_normalized.adresse_id.toLowerCase();
									}
									finder_tUniqRow_1.hashCodeDirty = true;
									if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
										KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

										if (adresses_normalized.adresse_id == null) {
											new_tUniqRow_1.adresse_id = null;
										} else {
											new_tUniqRow_1.adresse_id = adresses_normalized.adresse_id.toLowerCase();
										}

										keystUniqRow_1.add(new_tUniqRow_1);
										if (adresses_unique == null) {

											adresses_unique = new adresses_uniqueStruct();
										}
										adresses_unique.adresse_id = adresses_normalized.adresse_id;
										adresses_unique.ville = adresses_normalized.ville;
										adresses_unique.code_postal = adresses_normalized.code_postal;
										adresses_unique.departement = adresses_normalized.departement;
										adresses_unique.region = adresses_normalized.region;
										adresses_unique.pays_code = adresses_normalized.pays_code;
										adresses_unique.pays = adresses_normalized.pays;
										nb_uniques_tUniqRow_1++;
									} else {
										nb_duplicates_tUniqRow_1++;
									}

									tos_count_tUniqRow_1++;

									/**
									 * [tUniqRow_1 main ] stop
									 */

									/**
									 * [tUniqRow_1 process_data_begin ] start
									 */

									currentComponent = "tUniqRow_1";

									/**
									 * [tUniqRow_1 process_data_begin ] stop
									 */
// Start of branch "adresses_unique"
									if (adresses_unique != null) {

										/**
										 * [tMap_6 main ] start
										 */

										currentComponent = "tMap_6";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "adresses_unique");
										}

										boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_6 = false;
										boolean mainRowRejected_tMap_6 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
											// ###############################
											// # Output tables

											adresses = null;

// # Output table : 'adresses'
											adresses_tmp.adresse_id = adresses_unique.adresse_id;
											adresses_tmp.ville = adresses_unique.ville;
											adresses_tmp.code_postal = adresses_unique.code_postal;
											adresses_tmp.departement = "N/A";
											adresses_tmp.region = "N/A";
											adresses_tmp.pays_code = adresses_unique.adresse_id.equals("INCONNU")
													? "N/A"
													: adresses_unique.pays_code.equals("") ? "[FR]"
															: adresses_unique.pays_code;
											adresses_tmp.pays = !adresses_unique.pays.equals("") ? adresses_unique.pays
													: "FRANCE";
											adresses = adresses_tmp;
// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_6 = false;

										tos_count_tMap_6++;

										/**
										 * [tMap_6 main ] stop
										 */

										/**
										 * [tMap_6 process_data_begin ] start
										 */

										currentComponent = "tMap_6";

										/**
										 * [tMap_6 process_data_begin ] stop
										 */
// Start of branch "adresses"
										if (adresses != null) {

											/**
											 * [tDBOutput_1 main ] start
											 */

											currentComponent = "tDBOutput_1";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1, "adresses");
											}

											whetherReject_tDBOutput_1 = false;
											if (adresses.adresse_id == null) {
												pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(1, adresses.adresse_id);
											}

											if (adresses.ville == null) {
												pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(2, adresses.ville);
											}

											if (adresses.code_postal == null) {
												pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(3, adresses.code_postal);
											}

											if (adresses.departement == null) {
												pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(4, adresses.departement);
											}

											if (adresses.region == null) {
												pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(5, adresses.region);
											}

											if (adresses.pays_code == null) {
												pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(6, adresses.pays_code);
											}

											if (adresses.pays == null) {
												pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(7, adresses.pays);
											}

											pstmt_tDBOutput_1.addBatch();
											nb_line_tDBOutput_1++;

											batchSizeCounter_tDBOutput_1++;
											if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
												try {
													int countSum_tDBOutput_1 = 0;
													for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
														countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED
																? 0
																: 1);
													}
													insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_1 = 0;
													for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
														countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
																: countEach_tDBOutput_1);
													}
													insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
													System.err.println(e.getMessage());
												}

												batchSizeCounter_tDBOutput_1 = 0;
											}
											commitCounter_tDBOutput_1++;

											if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

												try {
													int countSum_tDBOutput_1 = 0;
													for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
														countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
													}
													insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_1 = 0;
													for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
														countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
																: countEach_tDBOutput_1);
													}
													insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
													System.err.println(e.getMessage());

												}
												conn_tDBOutput_1.commit();
												commitCounter_tDBOutput_1 = 0;

											}

											tos_count_tDBOutput_1++;

											/**
											 * [tDBOutput_1 main ] stop
											 */

											/**
											 * [tDBOutput_1 process_data_begin ] start
											 */

											currentComponent = "tDBOutput_1";

											/**
											 * [tDBOutput_1 process_data_begin ] stop
											 */

											/**
											 * [tDBOutput_1 process_data_end ] start
											 */

											currentComponent = "tDBOutput_1";

											/**
											 * [tDBOutput_1 process_data_end ] stop
											 */

										} // End of branch "adresses"

										/**
										 * [tMap_6 process_data_end ] start
										 */

										currentComponent = "tMap_6";

										/**
										 * [tMap_6 process_data_end ] stop
										 */

									} // End of branch "adresses_unique"

									/**
									 * [tUniqRow_1 process_data_end ] start
									 */

									currentComponent = "tUniqRow_1";

									/**
									 * [tUniqRow_1 process_data_end ] stop
									 */

								} // End of branch "adresses_normalized"

								/**
								 * [tMap_8 process_data_end ] start
								 */

								currentComponent = "tMap_8";

								/**
								 * [tMap_8 process_data_end ] stop
								 */

								/**
								 * [tUnite_1 process_data_end ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_end ] stop
								 */

							} // End of branch "entreprises_adresses"

							/**
							 * [tMap_3 process_data_end ] start
							 */

							currentComponent = "tMap_3";

							/**
							 * [tMap_3 process_data_end ] stop
							 */

						} // End of branch "entreprises_raw"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", nb_line_tFileInputDelimited_3);
					}

				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "entreprises_raw");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "conventions_raw");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
					String adresse_id;
					String ville;
					String code_postal;
					String initialized_field;
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				conventions_adressesStruct conventions_adresses_tmp = new conventions_adressesStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) ";").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /** Start field tFileInputDelimited_2:FILENAME */
						"C:/BI/transparence-sante/data/data.gouv/conventions.csv"/**
																					 * End field
																					 * tFileInputDelimited_2:FILENAME
																					 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0], "UTF-8");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),
											"UTF-8")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd("" + rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('"');

						csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_2.readNext()) {

								totalLinetFileInputDelimited_2++;

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
											: totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2
										? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0], "UTF-8");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2.setLineEnd("" + rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('"');

							csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 1; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_2 != 0 && csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {
						rowstate_tFileInputDelimited_2.reset();

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2.getValues();

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						conventions_raw = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						conventions_raw = new conventions_rawStruct();
						try {

							char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_2_ListType = ((String) ";").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								conventions_raw.entreprise_identifiant = null;

								conventions_raw.denomination_sociale = null;

								conventions_raw.ligne_identifiant = null;

								conventions_raw.ligne_rectification = null;

								conventions_raw.benef_categorie_code = null;

								conventions_raw.categorie = null;

								conventions_raw.benef_nom = null;

								conventions_raw.benef_prenom = null;

								conventions_raw.benef_qualite_code = null;

								conventions_raw.qualite = null;

								conventions_raw.benef_adresse1 = null;

								conventions_raw.benef_adresse2 = null;

								conventions_raw.benef_adresse3 = null;

								conventions_raw.benef_adresse4 = null;

								conventions_raw.benef_codepostal = null;

								conventions_raw.benef_ville = null;

								conventions_raw.benef_pays_code = null;

								conventions_raw.pays = null;

								conventions_raw.benef_titre_code = null;

								conventions_raw.benef_titre_libelle = null;

								conventions_raw.benef_specialite_code = null;

								conventions_raw.benef_speicalite_libelle = null;

								conventions_raw.benef_identifiant_type_code = null;

								conventions_raw.identifiant_type = null;

								conventions_raw.benef_identifiant_valeur = null;

								conventions_raw.benef_etablissement = null;

								conventions_raw.benef_etablissement_codepostal = null;

								conventions_raw.benef_etablissement_ville = null;

								conventions_raw.benef_denomination_sociale = null;

								conventions_raw.benef_objet_social = null;

								conventions_raw.ligne_type = null;

								conventions_raw.conv_date_signature = null;

								conventions_raw.conv_objet = null;

								conventions_raw.conv_objet_autre = null;

								conventions_raw.conv_date_debut = null;

								conventions_raw.conv_date_fin = null;

								conventions_raw.conv_montant_ttc = null;

								conventions_raw.conv_manifestation_date = null;

								conventions_raw.conv_manifestation_nom = null;

								conventions_raw.conv_manifestation_lieu = null;

								conventions_raw.conv_manifestation_organisateur = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.entreprise_identifiant = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.entreprise_identifiant = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.denomination_sociale = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.denomination_sociale = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 2;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.ligne_identifiant = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.ligne_identifiant = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 3;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									if (rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2].length() > 0) {
										try {

											conventions_raw.ligne_rectification = ParserUtils.parseTo_Character(
													rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2]);

										} catch (java.lang.Exception ex_tFileInputDelimited_2) {
											rowstate_tFileInputDelimited_2.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"ligne_rectification", "conventions_raw",
															rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2],
															ex_tFileInputDelimited_2),
													ex_tFileInputDelimited_2));
										}
									} else {

										conventions_raw.ligne_rectification = null;

									}

								} else {

									conventions_raw.ligne_rectification = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 4;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.benef_categorie_code = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.benef_categorie_code = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 5;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.categorie = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.categorie = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 6;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.benef_nom = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.benef_nom = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 7;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.benef_prenom = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.benef_prenom = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 8;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.benef_qualite_code = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.benef_qualite_code = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 9;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.qualite = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.qualite = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 10;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.benef_adresse1 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.benef_adresse1 = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 11;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.benef_adresse2 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.benef_adresse2 = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 12;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.benef_adresse3 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.benef_adresse3 = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 13;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.benef_adresse4 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.benef_adresse4 = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 14;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.benef_codepostal = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.benef_codepostal = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 15;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.benef_ville = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.benef_ville = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 16;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.benef_pays_code = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.benef_pays_code = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 17;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.pays = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.pays = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 18;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.benef_titre_code = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.benef_titre_code = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 19;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.benef_titre_libelle = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.benef_titre_libelle = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 20;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.benef_specialite_code = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.benef_specialite_code = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 21;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.benef_speicalite_libelle = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.benef_speicalite_libelle = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 22;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.benef_identifiant_type_code = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.benef_identifiant_type_code = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 23;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.identifiant_type = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.identifiant_type = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 24;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.benef_identifiant_valeur = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.benef_identifiant_valeur = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 25;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.benef_etablissement = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.benef_etablissement = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 26;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.benef_etablissement_codepostal = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.benef_etablissement_codepostal = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 27;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.benef_etablissement_ville = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.benef_etablissement_ville = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 28;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.benef_denomination_sociale = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.benef_denomination_sociale = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 29;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.benef_objet_social = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.benef_objet_social = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 30;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.ligne_type = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.ligne_type = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 31;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.conv_date_signature = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.conv_date_signature = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 32;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.conv_objet = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.conv_objet = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 33;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.conv_objet_autre = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.conv_objet_autre = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 34;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.conv_date_debut = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.conv_date_debut = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 35;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.conv_date_fin = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.conv_date_fin = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 36;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.conv_montant_ttc = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.conv_montant_ttc = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 37;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.conv_manifestation_date = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.conv_manifestation_date = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 38;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.conv_manifestation_nom = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.conv_manifestation_nom = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 39;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.conv_manifestation_lieu = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.conv_manifestation_lieu = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 40;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									conventions_raw.conv_manifestation_organisateur = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									conventions_raw.conv_manifestation_organisateur = null;

								}

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							conventions_raw = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "conventions_raw"
						if (conventions_raw != null) {

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "conventions_raw");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;
								Var.adresse_id = AdressesIdGenerator.generateAdresseIdFromCodePostalAndVille(
										conventions_raw.benef_codepostal, conventions_raw.benef_ville,
										conventions_raw.benef_etablissement_codepostal,
										conventions_raw.benef_etablissement_ville);
								Var.ville = AdressesIdGenerator.getVilleFromNormalizedId(Var.adresse_id);
								Var.code_postal = AdressesIdGenerator.getCodePostalFromNormalizedId(Var.adresse_id);
								Var.initialized_field = AdressesIdGenerator
										.initialize_Region_Departement_Pays_PaysCode(Var.adresse_id);// ###############################
								// ###############################
								// # Output tables

								conventions_adresses = null;

// # Output table : 'conventions_adresses'
								conventions_adresses_tmp.adresse_id = Var.adresse_id;
								conventions_adresses_tmp.ville = Var.ville;
								conventions_adresses_tmp.code_postal = Var.code_postal;
								conventions_adresses_tmp.departement = Var.initialized_field;
								conventions_adresses_tmp.region = Var.initialized_field;
								conventions_adresses_tmp.pays_code = conventions_raw.benef_pays_code;
								conventions_adresses_tmp.pays = conventions_raw.pays;
								conventions_adresses = conventions_adresses_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */

							/**
							 * [tMap_4 process_data_begin ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_begin ] stop
							 */
// Start of branch "conventions_adresses"
							if (conventions_adresses != null) {

								/**
								 * [tUnite_1 main ] start
								 */

								currentComponent = "tUnite_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "conventions_adresses");
								}

//////////

// for output
								merged = new mergedStruct();

								merged.adresse_id = conventions_adresses.adresse_id;
								merged.ville = conventions_adresses.ville;
								merged.code_postal = conventions_adresses.code_postal;
								merged.departement = conventions_adresses.departement;
								merged.region = conventions_adresses.region;
								merged.pays_code = conventions_adresses.pays_code;
								merged.pays = conventions_adresses.pays;

								nb_line_tUnite_1++;

//////////

								tos_count_tUnite_1++;

								/**
								 * [tUnite_1 main ] stop
								 */

								/**
								 * [tUnite_1 process_data_begin ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_begin ] stop
								 */

								/**
								 * [tMap_8 main ] start
								 */

								currentComponent = "tMap_8";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "merged");
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_8 = false;
								boolean mainRowRejected_tMap_8 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
									// ###############################
									// # Output tables

									adresses_normalized = null;

// # Output table : 'adresses_normalized'
									adresses_normalized_tmp.adresse_id = AdressesIdGenerator
											.reNormalizedId(merged.adresse_id);
									adresses_normalized_tmp.ville = merged.ville;
									adresses_normalized_tmp.code_postal = merged.code_postal;
									adresses_normalized_tmp.departement = merged.departement;
									adresses_normalized_tmp.region = merged.region;
									adresses_normalized_tmp.pays_code = merged.pays_code;
									adresses_normalized_tmp.pays = merged.pays;
									adresses_normalized = adresses_normalized_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_8 = false;

								tos_count_tMap_8++;

								/**
								 * [tMap_8 main ] stop
								 */

								/**
								 * [tMap_8 process_data_begin ] start
								 */

								currentComponent = "tMap_8";

								/**
								 * [tMap_8 process_data_begin ] stop
								 */
// Start of branch "adresses_normalized"
								if (adresses_normalized != null) {

									/**
									 * [tUniqRow_1 main ] start
									 */

									currentComponent = "tUniqRow_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "adresses_normalized");
									}

									adresses_unique = null;
									if (adresses_normalized.adresse_id == null) {
										finder_tUniqRow_1.adresse_id = null;
									} else {
										finder_tUniqRow_1.adresse_id = adresses_normalized.adresse_id.toLowerCase();
									}
									finder_tUniqRow_1.hashCodeDirty = true;
									if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
										KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

										if (adresses_normalized.adresse_id == null) {
											new_tUniqRow_1.adresse_id = null;
										} else {
											new_tUniqRow_1.adresse_id = adresses_normalized.adresse_id.toLowerCase();
										}

										keystUniqRow_1.add(new_tUniqRow_1);
										if (adresses_unique == null) {

											adresses_unique = new adresses_uniqueStruct();
										}
										adresses_unique.adresse_id = adresses_normalized.adresse_id;
										adresses_unique.ville = adresses_normalized.ville;
										adresses_unique.code_postal = adresses_normalized.code_postal;
										adresses_unique.departement = adresses_normalized.departement;
										adresses_unique.region = adresses_normalized.region;
										adresses_unique.pays_code = adresses_normalized.pays_code;
										adresses_unique.pays = adresses_normalized.pays;
										nb_uniques_tUniqRow_1++;
									} else {
										nb_duplicates_tUniqRow_1++;
									}

									tos_count_tUniqRow_1++;

									/**
									 * [tUniqRow_1 main ] stop
									 */

									/**
									 * [tUniqRow_1 process_data_begin ] start
									 */

									currentComponent = "tUniqRow_1";

									/**
									 * [tUniqRow_1 process_data_begin ] stop
									 */
// Start of branch "adresses_unique"
									if (adresses_unique != null) {

										/**
										 * [tMap_6 main ] start
										 */

										currentComponent = "tMap_6";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "adresses_unique");
										}

										boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_6 = false;
										boolean mainRowRejected_tMap_6 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
											// ###############################
											// # Output tables

											adresses = null;

// # Output table : 'adresses'
											adresses_tmp.adresse_id = adresses_unique.adresse_id;
											adresses_tmp.ville = adresses_unique.ville;
											adresses_tmp.code_postal = adresses_unique.code_postal;
											adresses_tmp.departement = "N/A";
											adresses_tmp.region = "N/A";
											adresses_tmp.pays_code = adresses_unique.adresse_id.equals("INCONNU")
													? "N/A"
													: adresses_unique.pays_code.equals("") ? "[FR]"
															: adresses_unique.pays_code;
											adresses_tmp.pays = !adresses_unique.pays.equals("") ? adresses_unique.pays
													: "FRANCE";
											adresses = adresses_tmp;
// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_6 = false;

										tos_count_tMap_6++;

										/**
										 * [tMap_6 main ] stop
										 */

										/**
										 * [tMap_6 process_data_begin ] start
										 */

										currentComponent = "tMap_6";

										/**
										 * [tMap_6 process_data_begin ] stop
										 */
// Start of branch "adresses"
										if (adresses != null) {

											/**
											 * [tDBOutput_1 main ] start
											 */

											currentComponent = "tDBOutput_1";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1, "adresses");
											}

											whetherReject_tDBOutput_1 = false;
											if (adresses.adresse_id == null) {
												pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(1, adresses.adresse_id);
											}

											if (adresses.ville == null) {
												pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(2, adresses.ville);
											}

											if (adresses.code_postal == null) {
												pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(3, adresses.code_postal);
											}

											if (adresses.departement == null) {
												pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(4, adresses.departement);
											}

											if (adresses.region == null) {
												pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(5, adresses.region);
											}

											if (adresses.pays_code == null) {
												pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(6, adresses.pays_code);
											}

											if (adresses.pays == null) {
												pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(7, adresses.pays);
											}

											pstmt_tDBOutput_1.addBatch();
											nb_line_tDBOutput_1++;

											batchSizeCounter_tDBOutput_1++;
											if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
												try {
													int countSum_tDBOutput_1 = 0;
													for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
														countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED
																? 0
																: 1);
													}
													insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_1 = 0;
													for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
														countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
																: countEach_tDBOutput_1);
													}
													insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
													System.err.println(e.getMessage());
												}

												batchSizeCounter_tDBOutput_1 = 0;
											}
											commitCounter_tDBOutput_1++;

											if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

												try {
													int countSum_tDBOutput_1 = 0;
													for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
														countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
													}
													insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_1 = 0;
													for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
														countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
																: countEach_tDBOutput_1);
													}
													insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
													System.err.println(e.getMessage());

												}
												conn_tDBOutput_1.commit();
												commitCounter_tDBOutput_1 = 0;

											}

											tos_count_tDBOutput_1++;

											/**
											 * [tDBOutput_1 main ] stop
											 */

											/**
											 * [tDBOutput_1 process_data_begin ] start
											 */

											currentComponent = "tDBOutput_1";

											/**
											 * [tDBOutput_1 process_data_begin ] stop
											 */

											/**
											 * [tDBOutput_1 process_data_end ] start
											 */

											currentComponent = "tDBOutput_1";

											/**
											 * [tDBOutput_1 process_data_end ] stop
											 */

										} // End of branch "adresses"

										/**
										 * [tMap_6 process_data_end ] start
										 */

										currentComponent = "tMap_6";

										/**
										 * [tMap_6 process_data_end ] stop
										 */

									} // End of branch "adresses_unique"

									/**
									 * [tUniqRow_1 process_data_end ] start
									 */

									currentComponent = "tUniqRow_1";

									/**
									 * [tUniqRow_1 process_data_end ] stop
									 */

								} // End of branch "adresses_normalized"

								/**
								 * [tMap_8 process_data_end ] start
								 */

								currentComponent = "tMap_8";

								/**
								 * [tMap_8 process_data_end ] stop
								 */

								/**
								 * [tUnite_1 process_data_end ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_end ] stop
								 */

							} // End of branch "conventions_adresses"

							/**
							 * [tMap_4 process_data_end ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_end ] stop
							 */

						} // End of branch "conventions_raw"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", nb_line_tFileInputDelimited_2);
					}

				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "conventions_raw");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "avantages_raw");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
					String adresse_id;
					String ville;
					String code_postal;
					String initialized_field;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				avantages_adressesStruct avantages_adresses_tmp = new avantages_adressesStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ";").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */
						"C:/BI/transparence-sante/data/data.gouv/avantages.csv"/**
																				 * End field
																				 * tFileInputDelimited_1:FILENAME
																				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_1)),
											"UTF-8")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_1.readNext()) {

								totalLinetFileInputDelimited_1++;

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
											: totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1
										? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						avantages_raw = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						avantages_raw = new avantages_rawStruct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) ";").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								avantages_raw.entreprise_identifiant = null;

								avantages_raw.denomination_sociale = null;

								avantages_raw.ligne_identifiant = null;

								avantages_raw.ligne_rectification = null;

								avantages_raw.benef_categorie_code = null;

								avantages_raw.categorie = null;

								avantages_raw.benef_nom = null;

								avantages_raw.benef_prenom = null;

								avantages_raw.benef_qualite_code = null;

								avantages_raw.qualite = null;

								avantages_raw.benef_adresse1 = null;

								avantages_raw.benef_adresse2 = null;

								avantages_raw.benef_adresse3 = null;

								avantages_raw.benef_adresse4 = null;

								avantages_raw.benef_codepostal = null;

								avantages_raw.benef_ville = null;

								avantages_raw.benef_pays_code = null;

								avantages_raw.pays = null;

								avantages_raw.benef_titre_code = null;

								avantages_raw.benef_titre_libelle = null;

								avantages_raw.benef_specialite_code = null;

								avantages_raw.benef_speicalite_libelle = null;

								avantages_raw.benef_identifiant_type_code = null;

								avantages_raw.identifiant_type = null;

								avantages_raw.benef_identifiant_valeur = null;

								avantages_raw.benef_etablissement = null;

								avantages_raw.benef_etablissement_codepostal = null;

								avantages_raw.benef_etablissement_ville = null;

								avantages_raw.benef_denomination_sociale = null;

								avantages_raw.benef_objet_social = null;

								avantages_raw.ligne_type = null;

								avantages_raw.avant_date_signature = null;

								avantages_raw.avant_montant_ttc = null;

								avantages_raw.avant_nature = null;

								avantages_raw.avant_convention_lie = null;

								avantages_raw.semestre = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.entreprise_identifiant = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.entreprise_identifiant = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.denomination_sociale = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.denomination_sociale = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.ligne_identifiant = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.ligne_identifiant = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											avantages_raw.ligne_rectification = ParserUtils.parseTo_Character(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"ligne_rectification", "avantages_raw",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										avantages_raw.ligne_rectification = null;

									}

								} else {

									avantages_raw.ligne_rectification = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.benef_categorie_code = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.benef_categorie_code = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.categorie = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.categorie = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.benef_nom = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.benef_nom = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 7;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.benef_prenom = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.benef_prenom = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 8;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.benef_qualite_code = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.benef_qualite_code = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 9;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.qualite = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.qualite = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 10;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.benef_adresse1 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.benef_adresse1 = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 11;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.benef_adresse2 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.benef_adresse2 = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 12;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.benef_adresse3 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.benef_adresse3 = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 13;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.benef_adresse4 = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.benef_adresse4 = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 14;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.benef_codepostal = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.benef_codepostal = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 15;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.benef_ville = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.benef_ville = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 16;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.benef_pays_code = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.benef_pays_code = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 17;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.pays = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.pays = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 18;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.benef_titre_code = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.benef_titre_code = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 19;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.benef_titre_libelle = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.benef_titre_libelle = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 20;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.benef_specialite_code = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.benef_specialite_code = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 21;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.benef_speicalite_libelle = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.benef_speicalite_libelle = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 22;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.benef_identifiant_type_code = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.benef_identifiant_type_code = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 23;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.identifiant_type = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.identifiant_type = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 24;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.benef_identifiant_valeur = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.benef_identifiant_valeur = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 25;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.benef_etablissement = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.benef_etablissement = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 26;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.benef_etablissement_codepostal = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.benef_etablissement_codepostal = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 27;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.benef_etablissement_ville = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.benef_etablissement_ville = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 28;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.benef_denomination_sociale = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.benef_denomination_sociale = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 29;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.benef_objet_social = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.benef_objet_social = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 30;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.ligne_type = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.ligne_type = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 31;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.avant_date_signature = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.avant_date_signature = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 32;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											avantages_raw.avant_montant_ttc = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"avant_montant_ttc", "avantages_raw",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										avantages_raw.avant_montant_ttc = null;

									}

								} else {

									avantages_raw.avant_montant_ttc = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 33;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.avant_nature = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.avant_nature = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 34;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.avant_convention_lie = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.avant_convention_lie = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 35;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									avantages_raw.semestre = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									avantages_raw.semestre = null;

								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							avantages_raw = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "avantages_raw"
						if (avantages_raw != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "avantages_raw");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;
								Var.adresse_id = AdressesIdGenerator.generateAdresseIdFromCodePostalAndVille(
										avantages_raw.benef_codepostal, avantages_raw.benef_ville,
										avantages_raw.benef_etablissement_codepostal,
										avantages_raw.benef_etablissement_ville);
								Var.ville = AdressesIdGenerator.getVilleFromNormalizedId(Var.adresse_id);
								Var.code_postal = AdressesIdGenerator.getCodePostalFromNormalizedId(Var.adresse_id);
								Var.initialized_field = AdressesIdGenerator
										.initialize_Region_Departement_Pays_PaysCode(Var.adresse_id);// ###############################
								// ###############################
								// # Output tables

								avantages_adresses = null;

// # Output table : 'avantages_adresses'
								avantages_adresses_tmp.adresse_id = Var.adresse_id;
								avantages_adresses_tmp.ville = Var.ville;
								avantages_adresses_tmp.code_postal = Var.code_postal;
								avantages_adresses_tmp.departement = Var.initialized_field;
								avantages_adresses_tmp.region = Var.initialized_field;
								avantages_adresses_tmp.pays_code = avantages_raw.benef_pays_code;
								avantages_adresses_tmp.pays = avantages_raw.pays;
								avantages_adresses = avantages_adresses_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "avantages_adresses"
							if (avantages_adresses != null) {

								/**
								 * [tUnite_1 main ] start
								 */

								currentComponent = "tUnite_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "avantages_adresses");
								}

//////////

// for output
								merged = new mergedStruct();

								merged.adresse_id = avantages_adresses.adresse_id;
								merged.ville = avantages_adresses.ville;
								merged.code_postal = avantages_adresses.code_postal;
								merged.departement = avantages_adresses.departement;
								merged.region = avantages_adresses.region;
								merged.pays_code = avantages_adresses.pays_code;
								merged.pays = avantages_adresses.pays;

								nb_line_tUnite_1++;

//////////

								tos_count_tUnite_1++;

								/**
								 * [tUnite_1 main ] stop
								 */

								/**
								 * [tUnite_1 process_data_begin ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_begin ] stop
								 */

								/**
								 * [tMap_8 main ] start
								 */

								currentComponent = "tMap_8";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "merged");
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_8 = false;
								boolean mainRowRejected_tMap_8 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
									// ###############################
									// # Output tables

									adresses_normalized = null;

// # Output table : 'adresses_normalized'
									adresses_normalized_tmp.adresse_id = AdressesIdGenerator
											.reNormalizedId(merged.adresse_id);
									adresses_normalized_tmp.ville = merged.ville;
									adresses_normalized_tmp.code_postal = merged.code_postal;
									adresses_normalized_tmp.departement = merged.departement;
									adresses_normalized_tmp.region = merged.region;
									adresses_normalized_tmp.pays_code = merged.pays_code;
									adresses_normalized_tmp.pays = merged.pays;
									adresses_normalized = adresses_normalized_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_8 = false;

								tos_count_tMap_8++;

								/**
								 * [tMap_8 main ] stop
								 */

								/**
								 * [tMap_8 process_data_begin ] start
								 */

								currentComponent = "tMap_8";

								/**
								 * [tMap_8 process_data_begin ] stop
								 */
// Start of branch "adresses_normalized"
								if (adresses_normalized != null) {

									/**
									 * [tUniqRow_1 main ] start
									 */

									currentComponent = "tUniqRow_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "adresses_normalized");
									}

									adresses_unique = null;
									if (adresses_normalized.adresse_id == null) {
										finder_tUniqRow_1.adresse_id = null;
									} else {
										finder_tUniqRow_1.adresse_id = adresses_normalized.adresse_id.toLowerCase();
									}
									finder_tUniqRow_1.hashCodeDirty = true;
									if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
										KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

										if (adresses_normalized.adresse_id == null) {
											new_tUniqRow_1.adresse_id = null;
										} else {
											new_tUniqRow_1.adresse_id = adresses_normalized.adresse_id.toLowerCase();
										}

										keystUniqRow_1.add(new_tUniqRow_1);
										if (adresses_unique == null) {

											adresses_unique = new adresses_uniqueStruct();
										}
										adresses_unique.adresse_id = adresses_normalized.adresse_id;
										adresses_unique.ville = adresses_normalized.ville;
										adresses_unique.code_postal = adresses_normalized.code_postal;
										adresses_unique.departement = adresses_normalized.departement;
										adresses_unique.region = adresses_normalized.region;
										adresses_unique.pays_code = adresses_normalized.pays_code;
										adresses_unique.pays = adresses_normalized.pays;
										nb_uniques_tUniqRow_1++;
									} else {
										nb_duplicates_tUniqRow_1++;
									}

									tos_count_tUniqRow_1++;

									/**
									 * [tUniqRow_1 main ] stop
									 */

									/**
									 * [tUniqRow_1 process_data_begin ] start
									 */

									currentComponent = "tUniqRow_1";

									/**
									 * [tUniqRow_1 process_data_begin ] stop
									 */
// Start of branch "adresses_unique"
									if (adresses_unique != null) {

										/**
										 * [tMap_6 main ] start
										 */

										currentComponent = "tMap_6";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "adresses_unique");
										}

										boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_6 = false;
										boolean mainRowRejected_tMap_6 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
											// ###############################
											// # Output tables

											adresses = null;

// # Output table : 'adresses'
											adresses_tmp.adresse_id = adresses_unique.adresse_id;
											adresses_tmp.ville = adresses_unique.ville;
											adresses_tmp.code_postal = adresses_unique.code_postal;
											adresses_tmp.departement = "N/A";
											adresses_tmp.region = "N/A";
											adresses_tmp.pays_code = adresses_unique.adresse_id.equals("INCONNU")
													? "N/A"
													: adresses_unique.pays_code.equals("") ? "[FR]"
															: adresses_unique.pays_code;
											adresses_tmp.pays = !adresses_unique.pays.equals("") ? adresses_unique.pays
													: "FRANCE";
											adresses = adresses_tmp;
// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_6 = false;

										tos_count_tMap_6++;

										/**
										 * [tMap_6 main ] stop
										 */

										/**
										 * [tMap_6 process_data_begin ] start
										 */

										currentComponent = "tMap_6";

										/**
										 * [tMap_6 process_data_begin ] stop
										 */
// Start of branch "adresses"
										if (adresses != null) {

											/**
											 * [tDBOutput_1 main ] start
											 */

											currentComponent = "tDBOutput_1";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1, "adresses");
											}

											whetherReject_tDBOutput_1 = false;
											if (adresses.adresse_id == null) {
												pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(1, adresses.adresse_id);
											}

											if (adresses.ville == null) {
												pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(2, adresses.ville);
											}

											if (adresses.code_postal == null) {
												pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(3, adresses.code_postal);
											}

											if (adresses.departement == null) {
												pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(4, adresses.departement);
											}

											if (adresses.region == null) {
												pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(5, adresses.region);
											}

											if (adresses.pays_code == null) {
												pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(6, adresses.pays_code);
											}

											if (adresses.pays == null) {
												pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(7, adresses.pays);
											}

											pstmt_tDBOutput_1.addBatch();
											nb_line_tDBOutput_1++;

											batchSizeCounter_tDBOutput_1++;
											if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
												try {
													int countSum_tDBOutput_1 = 0;
													for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
														countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED
																? 0
																: 1);
													}
													insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_1 = 0;
													for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
														countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
																: countEach_tDBOutput_1);
													}
													insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
													System.err.println(e.getMessage());
												}

												batchSizeCounter_tDBOutput_1 = 0;
											}
											commitCounter_tDBOutput_1++;

											if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

												try {
													int countSum_tDBOutput_1 = 0;
													for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
														countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
													}
													insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_1 = 0;
													for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
														countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
																: countEach_tDBOutput_1);
													}
													insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
													System.err.println(e.getMessage());

												}
												conn_tDBOutput_1.commit();
												commitCounter_tDBOutput_1 = 0;

											}

											tos_count_tDBOutput_1++;

											/**
											 * [tDBOutput_1 main ] stop
											 */

											/**
											 * [tDBOutput_1 process_data_begin ] start
											 */

											currentComponent = "tDBOutput_1";

											/**
											 * [tDBOutput_1 process_data_begin ] stop
											 */

											/**
											 * [tDBOutput_1 process_data_end ] start
											 */

											currentComponent = "tDBOutput_1";

											/**
											 * [tDBOutput_1 process_data_end ] stop
											 */

										} // End of branch "adresses"

										/**
										 * [tMap_6 process_data_end ] start
										 */

										currentComponent = "tMap_6";

										/**
										 * [tMap_6 process_data_end ] stop
										 */

									} // End of branch "adresses_unique"

									/**
									 * [tUniqRow_1 process_data_end ] start
									 */

									currentComponent = "tUniqRow_1";

									/**
									 * [tUniqRow_1 process_data_end ] stop
									 */

								} // End of branch "adresses_normalized"

								/**
								 * [tMap_8 process_data_end ] start
								 */

								currentComponent = "tMap_8";

								/**
								 * [tMap_8 process_data_end ] stop
								 */

								/**
								 * [tUnite_1 process_data_end ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_end ] stop
								 */

							} // End of branch "avantages_adresses"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "avantages_raw"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "avantages_raw");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "conventions_adresses", "avantages_adresses",
							"remunerations_adresses", "entreprises_adresses");
				}

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tMap_8 end ] start
				 */

				currentComponent = "tMap_8";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "merged");
				}

				ok_Hash.put("tMap_8", true);
				end_Hash.put("tMap_8", System.currentTimeMillis());

				/**
				 * [tMap_8 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "adresses_normalized");
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "adresses_unique");
				}

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (batchSizeCounter_tDBOutput_1 != 0) {
						int countSum_tDBOutput_1 = 0;

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_1 = 0;

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0) {

					conn_tDBOutput_1.commit();

				}

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "adresses");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tMap_8 finally ] start
				 */

				currentComponent = "tMap_8";

				/**
				 * [tMap_8 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final adresse_dim adresse_dimClass = new adresse_dim();

		int exitCode = adresse_dimClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = adresse_dim.class.getClassLoader().getResourceAsStream(
					"transparence_sante_bi/adresse_dim_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = adresse_dim.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_4) {
			globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_4.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : adresse_dim");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 310334 characters generated by Talend Open Studio for Data Integration on the
 * 17 janvier 2021 17:43:35 CET
 ************************************************************************************************/