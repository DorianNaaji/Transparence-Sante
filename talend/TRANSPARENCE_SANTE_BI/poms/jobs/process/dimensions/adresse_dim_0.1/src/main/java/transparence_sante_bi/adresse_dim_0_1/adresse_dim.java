// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package transparence_sante_bi.adresse_dim_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: adresse_dim Purpose: remplissage de la dimension des adresses<br>
 * Description: Rempli à partir de l'ensemble des fichiers csv fournis, afin
 * d'avoir toutes les adresses possibles enregistrées.
 * 
 * adresse_id doit être unique. Idée : CP + concaténation d'un autre champ.
 * 
 * attention aux doublons potentiels <br>
 * 
 * @author haytham.elghazel@univ-lyon1.fr
 * @version 7.3.1.20200219_1130
 * @status DEV
 */
public class adresse_dim implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "adresse_dim";
	private final String projectName = "TRANSPARENCE_SANTE_BI";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					adresse_dim.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(adresse_dim.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];

		public String adresse_id;

		public String getAdresse_id() {
			return this.adresse_id;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String departement;

		public String getDepartement() {
			return this.departement;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public String pays_code;

		public String getPays_code() {
			return this.pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.adresse_id = readString(dis);

					this.ville = readString(dis);

					this.code_postal = readString(dis);

					this.departement = readString(dis);

					this.region = readString(dis);

					this.pays_code = readString(dis);

					this.pays = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.adresse_id, dos);

				// String

				writeString(this.ville, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.departement, dos);

				// String

				writeString(this.region, dos);

				// String

				writeString(this.pays_code, dos);

				// String

				writeString(this.pays, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("adresse_id=" + adresse_id);
			sb.append(",ville=" + ville);
			sb.append(",code_postal=" + code_postal);
			sb.append(",departement=" + departement);
			sb.append(",region=" + region);
			sb.append(",pays_code=" + pays_code);
			sb.append(",pays=" + pays);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];

		public String adresse_id;

		public String getAdresse_id() {
			return this.adresse_id;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String departement;

		public String getDepartement() {
			return this.departement;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public String pays_code;

		public String getPays_code() {
			return this.pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.adresse_id = readString(dis);

					this.ville = readString(dis);

					this.code_postal = readString(dis);

					this.departement = readString(dis);

					this.region = readString(dis);

					this.pays_code = readString(dis);

					this.pays = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.adresse_id, dos);

				// String

				writeString(this.ville, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.departement, dos);

				// String

				writeString(this.region, dos);

				// String

				writeString(this.pays_code, dos);

				// String

				writeString(this.pays, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("adresse_id=" + adresse_id);
			sb.append(",ville=" + ville);
			sb.append(",code_postal=" + code_postal);
			sb.append(",departement=" + departement);
			sb.append(",region=" + region);
			sb.append(",pays_code=" + pays_code);
			sb.append(",pays=" + pays);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];

		public String adresse_id;

		public String getAdresse_id() {
			return this.adresse_id;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String departement;

		public String getDepartement() {
			return this.departement;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public String pays_code;

		public String getPays_code() {
			return this.pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.adresse_id = readString(dis);

					this.ville = readString(dis);

					this.code_postal = readString(dis);

					this.departement = readString(dis);

					this.region = readString(dis);

					this.pays_code = readString(dis);

					this.pays = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.adresse_id, dos);

				// String

				writeString(this.ville, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.departement, dos);

				// String

				writeString(this.region, dos);

				// String

				writeString(this.pays_code, dos);

				// String

				writeString(this.pays, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("adresse_id=" + adresse_id);
			sb.append(",ville=" + ville);
			sb.append(",code_postal=" + code_postal);
			sb.append(",departement=" + departement);
			sb.append(",region=" + region);
			sb.append(",pays_code=" + pays_code);
			sb.append(",pays=" + pays);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class adresseStruct implements routines.system.IPersistableRow<adresseStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];

		public String adresse_id;

		public String getAdresse_id() {
			return this.adresse_id;
		}

		public String ville;

		public String getVille() {
			return this.ville;
		}

		public String code_postal;

		public String getCode_postal() {
			return this.code_postal;
		}

		public String departement;

		public String getDepartement() {
			return this.departement;
		}

		public String region;

		public String getRegion() {
			return this.region;
		}

		public String pays_code;

		public String getPays_code() {
			return this.pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.adresse_id = readString(dis);

					this.ville = readString(dis);

					this.code_postal = readString(dis);

					this.departement = readString(dis);

					this.region = readString(dis);

					this.pays_code = readString(dis);

					this.pays = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.adresse_id, dos);

				// String

				writeString(this.ville, dos);

				// String

				writeString(this.code_postal, dos);

				// String

				writeString(this.departement, dos);

				// String

				writeString(this.region, dos);

				// String

				writeString(this.pays_code, dos);

				// String

				writeString(this.pays, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("adresse_id=" + adresse_id);
			sb.append(",ville=" + ville);
			sb.append(",code_postal=" + code_postal);
			sb.append(",departement=" + departement);
			sb.append(",region=" + region);
			sb.append(",pays_code=" + pays_code);
			sb.append(",pays=" + pays);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(adresseStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];

		public String country_code;

		public String getCountry_code() {
			return this.country_code;
		}

		public String postal_code;

		public String getPostal_code() {
			return this.postal_code;
		}

		public String place_name;

		public String getPlace_name() {
			return this.place_name;
		}

		public String admin_name1;

		public String getAdmin_name1() {
			return this.admin_name1;
		}

		public String admin_name2;

		public String getAdmin_name2() {
			return this.admin_name2;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.country_code = readString(dis);

					this.postal_code = readString(dis);

					this.place_name = readString(dis);

					this.admin_name1 = readString(dis);

					this.admin_name2 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.country_code, dos);

				// String

				writeString(this.postal_code, dos);

				// String

				writeString(this.place_name, dos);

				// String

				writeString(this.admin_name1, dos);

				// String

				writeString(this.admin_name2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("country_code=" + country_code);
			sb.append(",postal_code=" + postal_code);
			sb.append(",place_name=" + place_name);
			sb.append(",admin_name1=" + admin_name1);
			sb.append(",admin_name2=" + admin_name2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];

		public String country_code;

		public String getCountry_code() {
			return this.country_code;
		}

		public String postal_code;

		public String getPostal_code() {
			return this.postal_code;
		}

		public String place_name;

		public String getPlace_name() {
			return this.place_name;
		}

		public String admin_name1;

		public String getAdmin_name1() {
			return this.admin_name1;
		}

		public String admin_name2;

		public String getAdmin_name2() {
			return this.admin_name2;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.country_code = readString(dis);

					this.postal_code = readString(dis);

					this.place_name = readString(dis);

					this.admin_name1 = readString(dis);

					this.admin_name2 = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.country_code, dos);

				// String

				writeString(this.postal_code, dos);

				// String

				writeString(this.place_name, dos);

				// String

				writeString(this.admin_name1, dos);

				// String

				writeString(this.admin_name2, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("country_code=" + country_code);
			sb.append(",postal_code=" + postal_code);
			sb.append(",place_name=" + place_name);
			sb.append(",admin_name1=" + admin_name1);
			sb.append(",admin_name2=" + admin_name2);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];

		public String country_code;

		public String getCountry_code() {
			return this.country_code;
		}

		public String postal_code;

		public String getPostal_code() {
			return this.postal_code;
		}

		public String place_name;

		public String getPlace_name() {
			return this.place_name;
		}

		public String admin_name1;

		public String getAdmin_name1() {
			return this.admin_name1;
		}

		public String admin_name2;

		public String getAdmin_name2() {
			return this.admin_name2;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.country_code = readString(dis);

					this.postal_code = readString(dis);

					this.place_name = readString(dis);

					this.admin_name1 = readString(dis);

					this.admin_name2 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.country_code, dos);

				// String

				writeString(this.postal_code, dos);

				// String

				writeString(this.place_name, dos);

				// String

				writeString(this.admin_name1, dos);

				// String

				writeString(this.admin_name2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("country_code=" + country_code);
			sb.append(",postal_code=" + postal_code);
			sb.append(",place_name=" + place_name);
			sb.append(",admin_name1=" + admin_name1);
			sb.append(",admin_name2=" + admin_name2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];

		public String country_code;

		public String getCountry_code() {
			return this.country_code;
		}

		public String postal_code;

		public String getPostal_code() {
			return this.postal_code;
		}

		public String place_name;

		public String getPlace_name() {
			return this.place_name;
		}

		public String admin_name1;

		public String getAdmin_name1() {
			return this.admin_name1;
		}

		public String admin_name2;

		public String getAdmin_name2() {
			return this.admin_name2;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.country_code = readString(dis);

					this.postal_code = readString(dis);

					this.place_name = readString(dis);

					this.admin_name1 = readString(dis);

					this.admin_name2 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.country_code, dos);

				// String

				writeString(this.postal_code, dos);

				// String

				writeString(this.place_name, dos);

				// String

				writeString(this.admin_name1, dos);

				// String

				writeString(this.admin_name2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("country_code=" + country_code);
			sb.append(",postal_code=" + postal_code);
			sb.append(",place_name=" + place_name);
			sb.append(",admin_name1=" + admin_name1);
			sb.append(",admin_name2=" + admin_name2);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);

				row8Struct row8 = new row8Struct();
				row1Struct row1 = new row1Struct();
				adresseStruct adresse = new adresseStruct();
				row6Struct row6 = new row6Struct();
				row7Struct row7 = new row7Struct();
				row9Struct row9 = new row9Struct();

				row4Struct row4 = new row4Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;

				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "adresse_dim";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbProperties_tDBOutput_1 = "noDatetimeStringSync=true";
				String url_tDBOutput_1 = null;
				if (dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
					url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "transparence_sante_bi" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_1.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "transparence_sante_bi" + "?"
							+ properties_tDBOutput_1;
				}
				String driverClass_tDBOutput_1 = "com.mysql.jdbc.Driver";

				String dbUser_tDBOutput_1 = "root";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:/5xC9vkzCMqtUVdvSezuKy6eF5HBT2ctX/02JA==");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				java.lang.Class.forName(driverClass_tDBOutput_1);

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;

				try (java.sql.Statement stmtClear_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtClear_tDBOutput_1.executeUpdate("DELETE FROM `" + tableName_tDBOutput_1 + "`");
				}

				String insert_tDBOutput_1 = "INSERT INTO `" + "adresse_dim"
						+ "` (`adresse_id`,`ville`,`code_postal`,`departement`,`region`,`pays_code`,`pays`) VALUES (?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_1 = 100;
				int batchSizeCounter_tDBOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						"C:/BI/transparence-sante/data/rejects/adresses.txt")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
							fileName_tFileOutputDelimited_2.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);
				if (filetFileOutputDelimited_2.exists()) {
					isFileGenerated_tFileOutputDelimited_2 = false;
				}
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
																		 * Start field
																		 * tFileOutputDelimited_2:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, true), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "adresse");
				}

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String adresse_id;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.adresse_id == null) ? 0 : this.adresse_id.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.adresse_id == null) {
							if (other.adresse_id != null)
								return false;

						} else if (!this.adresse_id.equals(other.adresse_id))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				adresseStruct adresse_tmp = new adresseStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						"C:/BI/transparence-sante/data/rejects/adresses.csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
							fileName_tFileOutputDelimited_3.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
																		 * Start field
																		 * tFileOutputDelimited_3:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tFilterRow_2 = 0;

				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/BI/transparence-sante/data/others/zipcodes_dep_region.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/BI/transparence-sante/data/others/zipcodes_dep_region.csv", "UTF-8", ";", "\n",
								false, 1, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row8 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row8 = new row8Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row8.country_code = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row8.postal_code = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row8.place_name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row8.admin_name1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row8.admin_name2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row8 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row8"
						if (row8 != null) {

							/**
							 * [tFilterRow_2 main ] start
							 */

							currentComponent = "tFilterRow_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row8");
							}

							row9 = null;
							row1 = null;
							Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
							ope_tFilterRow_2.matches(
									(row8.country_code == null ? false : row8.country_code.length() > 0),
									" country_code.length() > 0 failed");
							ope_tFilterRow_2.matches((row8.postal_code == null ? false : row8.postal_code.length() > 0),
									" postal_code.length() > 0 failed");
							ope_tFilterRow_2.matches((row8.place_name == null ? false : row8.place_name.length() > 0),
									" place_name.length() > 0 failed");
							ope_tFilterRow_2.matches((row8.admin_name1 == null ? false : row8.admin_name1.length() > 0),
									" admin_name1.length() > 0 failed");
							ope_tFilterRow_2.matches((row8.admin_name2 == null ? false : row8.admin_name2.length() > 0),
									" admin_name2.length() > 0 failed");
							ope_tFilterRow_2.matches((// code sample : use row8 to define the condition.
// row8.columnName1.equals("foo") ||!(row8.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
							!(row8.place_name.replaceAll("[^A-Za-z0-9]", "")).equals("")
									&& !(row8.admin_name2.replaceAll("[^A-Za-z0-9]", "")).equals("")
									&& !(row8.admin_name1.replaceAll("[^A-Za-z0-9]", "")).equals("")
									&& !(row8.country_code.replaceAll("[^A-Za-z0-9]", "")).equals("")
									&& row8.country_code != null && row8.postal_code != null
									&& !(row8.postal_code.replaceAll("[^A-Za-z0-9]", "")).equals("")),
									"advanced condition failed");

							if (ope_tFilterRow_2.getMatchFlag()) {
								if (row1 == null) {
									row1 = new row1Struct();
								}
								row1.country_code = row8.country_code;
								row1.postal_code = row8.postal_code;
								row1.place_name = row8.place_name;
								row1.admin_name1 = row8.admin_name1;
								row1.admin_name2 = row8.admin_name2;
								nb_line_ok_tFilterRow_2++;
							} else {
								if (row9 == null) {
									row9 = new row9Struct();
								}
								row9.country_code = row8.country_code;
								row9.postal_code = row8.postal_code;
								row9.place_name = row8.place_name;
								row9.admin_name1 = row8.admin_name1;
								row9.admin_name2 = row8.admin_name2;
								row9.errorMessage = ope_tFilterRow_2.getErrorMsg();
								nb_line_reject_tFilterRow_2++;
							}

							nb_line_tFilterRow_2++;

							tos_count_tFilterRow_2++;

							/**
							 * [tFilterRow_2 main ] stop
							 */

							/**
							 * [tFilterRow_2 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_2";

							/**
							 * [tFilterRow_2 process_data_begin ] stop
							 */
// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								///////////////////////////////////////////////
								// Starting Lookup Table "row2"
								///////////////////////////////////////////////

								boolean forceLooprow2 = false;

								row2Struct row2ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									row2HashKey.ISO3166_1_Alpha_2 = row1.country_code.replaceAll("[^0-9A-Za-z]", "");

									row2HashKey.hashCodeDirty = true;

									tHash_Lookup_row2.lookup(row2HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2'
									// and it contains more one result from keys : row2.ISO3166_1_Alpha_2 = '" +
									// row2HashKey.ISO3166_1_Alpha_2 + "'");
								} // G 071

								row2Struct row2 = null;

								row2Struct fromLookup_row2 = null;
								row2 = row2Default;

								if (tHash_Lookup_row2 != null && tHash_Lookup_row2.hasNext()) { // G 099

									fromLookup_row2 = tHash_Lookup_row2.next();

								} // G 099

								if (fromLookup_row2 != null) {
									row2 = fromLookup_row2;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									adresse = null;

// # Output table : 'adresse'
									adresse_tmp.adresse_id = row1.postal_code + "|" + row1.country_code;
									adresse_tmp.ville = row1.place_name;
									adresse_tmp.code_postal = row1.postal_code;
									adresse_tmp.departement = row1.admin_name2.replaceAll("[^0-9a-zA-Z ]", "");
									adresse_tmp.region = row1.admin_name1.replaceAll("[^0-9a-zA-Z ]", "");
									adresse_tmp.pays_code = row1.country_code;
									adresse_tmp.pays = row2.official_name_fr == null ? row2.UNTERM_French_Short
											: row2.official_name_fr;
									adresse = adresse_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */

								/**
								 * [tMap_1 process_data_begin ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_begin ] stop
								 */
// Start of branch "adresse"
								if (adresse != null) {

									/**
									 * [tUniqRow_1 main ] start
									 */

									currentComponent = "tUniqRow_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "adresse");
									}

									row7 = null;
									row6 = null;
									if (adresse.adresse_id == null) {
										finder_tUniqRow_1.adresse_id = null;
									} else {
										finder_tUniqRow_1.adresse_id = adresse.adresse_id.toLowerCase();
									}
									finder_tUniqRow_1.hashCodeDirty = true;
									if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
										KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

										if (adresse.adresse_id == null) {
											new_tUniqRow_1.adresse_id = null;
										} else {
											new_tUniqRow_1.adresse_id = adresse.adresse_id.toLowerCase();
										}

										keystUniqRow_1.add(new_tUniqRow_1);
										if (row6 == null) {

											row6 = new row6Struct();
										}
										row6.adresse_id = adresse.adresse_id;
										row6.ville = adresse.ville;
										row6.code_postal = adresse.code_postal;
										row6.departement = adresse.departement;
										row6.region = adresse.region;
										row6.pays_code = adresse.pays_code;
										row6.pays = adresse.pays;
										nb_uniques_tUniqRow_1++;
									} else {
										if (row7 == null) {

											row7 = new row7Struct();
										}
										row7.adresse_id = adresse.adresse_id;
										row7.ville = adresse.ville;
										row7.code_postal = adresse.code_postal;
										row7.departement = adresse.departement;
										row7.region = adresse.region;
										row7.pays_code = adresse.pays_code;
										row7.pays = adresse.pays;
										nb_duplicates_tUniqRow_1++;
									}

									tos_count_tUniqRow_1++;

									/**
									 * [tUniqRow_1 main ] stop
									 */

									/**
									 * [tUniqRow_1 process_data_begin ] start
									 */

									currentComponent = "tUniqRow_1";

									/**
									 * [tUniqRow_1 process_data_begin ] stop
									 */
// Start of branch "row6"
									if (row6 != null) {

										/**
										 * [tUnite_1 main ] start
										 */

										currentComponent = "tUnite_1";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
										}

//////////

// for output
										row4 = new row4Struct();

										row4.adresse_id = row6.adresse_id;
										row4.ville = row6.ville;
										row4.code_postal = row6.code_postal;
										row4.departement = row6.departement;
										row4.region = row6.region;
										row4.pays_code = row6.pays_code;
										row4.pays = row6.pays;

										nb_line_tUnite_1++;

//////////

										tos_count_tUnite_1++;

										/**
										 * [tUnite_1 main ] stop
										 */

										/**
										 * [tUnite_1 process_data_begin ] start
										 */

										currentComponent = "tUnite_1";

										/**
										 * [tUnite_1 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_1 main ] start
										 */

										currentComponent = "tDBOutput_1";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
										}

										whetherReject_tDBOutput_1 = false;
										if (row4.adresse_id == null) {
											pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_1.setString(1, row4.adresse_id);
										}

										if (row4.ville == null) {
											pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_1.setString(2, row4.ville);
										}

										if (row4.code_postal == null) {
											pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_1.setString(3, row4.code_postal);
										}

										if (row4.departement == null) {
											pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_1.setString(4, row4.departement);
										}

										if (row4.region == null) {
											pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_1.setString(5, row4.region);
										}

										if (row4.pays_code == null) {
											pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_1.setString(6, row4.pays_code);
										}

										if (row4.pays == null) {
											pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_1.setString(7, row4.pays);
										}

										pstmt_tDBOutput_1.addBatch();
										nb_line_tDBOutput_1++;

										batchSizeCounter_tDBOutput_1++;
										if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
											try {
												int countSum_tDBOutput_1 = 0;
												for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
													countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED
															? 0
															: 1);
												}
												insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
											} catch (java.sql.BatchUpdateException e) {
												int countSum_tDBOutput_1 = 0;
												for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
													countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
															: countEach_tDBOutput_1);
												}
												insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
												System.err.println(e.getMessage());
											}

											batchSizeCounter_tDBOutput_1 = 0;
										}
										commitCounter_tDBOutput_1++;

										if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

											try {
												int countSum_tDBOutput_1 = 0;
												for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
													countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
												}
												insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
											} catch (java.sql.BatchUpdateException e) {
												int countSum_tDBOutput_1 = 0;
												for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
													countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
															: countEach_tDBOutput_1);
												}
												insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
												System.err.println(e.getMessage());

											}
											conn_tDBOutput_1.commit();
											commitCounter_tDBOutput_1 = 0;

										}

										tos_count_tDBOutput_1++;

										/**
										 * [tDBOutput_1 main ] stop
										 */

										/**
										 * [tDBOutput_1 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_1";

										/**
										 * [tDBOutput_1 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_1 process_data_end ] start
										 */

										currentComponent = "tDBOutput_1";

										/**
										 * [tDBOutput_1 process_data_end ] stop
										 */

										/**
										 * [tUnite_1 process_data_end ] start
										 */

										currentComponent = "tUnite_1";

										/**
										 * [tUnite_1 process_data_end ] stop
										 */

									} // End of branch "row6"

// Start of branch "row7"
									if (row7 != null) {

										/**
										 * [tFileOutputDelimited_2 main ] start
										 */

										currentComponent = "tFileOutputDelimited_2";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
										}

										StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
										if (row7.adresse_id != null) {
											sb_tFileOutputDelimited_2.append(row7.adresse_id);
										}
										sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
										if (row7.ville != null) {
											sb_tFileOutputDelimited_2.append(row7.ville);
										}
										sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
										if (row7.code_postal != null) {
											sb_tFileOutputDelimited_2.append(row7.code_postal);
										}
										sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
										if (row7.departement != null) {
											sb_tFileOutputDelimited_2.append(row7.departement);
										}
										sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
										if (row7.region != null) {
											sb_tFileOutputDelimited_2.append(row7.region);
										}
										sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
										if (row7.pays_code != null) {
											sb_tFileOutputDelimited_2.append(row7.pays_code);
										}
										sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
										if (row7.pays != null) {
											sb_tFileOutputDelimited_2.append(row7.pays);
										}
										sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

										nb_line_tFileOutputDelimited_2++;
										resourceMap.put("nb_line_tFileOutputDelimited_2",
												nb_line_tFileOutputDelimited_2);

										outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

										tos_count_tFileOutputDelimited_2++;

										/**
										 * [tFileOutputDelimited_2 main ] stop
										 */

										/**
										 * [tFileOutputDelimited_2 process_data_begin ] start
										 */

										currentComponent = "tFileOutputDelimited_2";

										/**
										 * [tFileOutputDelimited_2 process_data_begin ] stop
										 */

										/**
										 * [tFileOutputDelimited_2 process_data_end ] start
										 */

										currentComponent = "tFileOutputDelimited_2";

										/**
										 * [tFileOutputDelimited_2 process_data_end ] stop
										 */

									} // End of branch "row7"

									/**
									 * [tUniqRow_1 process_data_end ] start
									 */

									currentComponent = "tUniqRow_1";

									/**
									 * [tUniqRow_1 process_data_end ] stop
									 */

								} // End of branch "adresse"

								/**
								 * [tMap_1 process_data_end ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_end ] stop
								 */

							} // End of branch "row1"

// Start of branch "row9"
							if (row9 != null) {

								/**
								 * [tFileOutputDelimited_3 main ] start
								 */

								currentComponent = "tFileOutputDelimited_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row9");
								}

								StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
								if (row9.country_code != null) {
									sb_tFileOutputDelimited_3.append(row9.country_code);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row9.postal_code != null) {
									sb_tFileOutputDelimited_3.append(row9.postal_code);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row9.place_name != null) {
									sb_tFileOutputDelimited_3.append(row9.place_name);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row9.admin_name1 != null) {
									sb_tFileOutputDelimited_3.append(row9.admin_name1);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row9.admin_name2 != null) {
									sb_tFileOutputDelimited_3.append(row9.admin_name2);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row9.errorMessage != null) {
									sb_tFileOutputDelimited_3.append(row9.errorMessage);
								}
								sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

								nb_line_tFileOutputDelimited_3++;
								resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

								outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());

								tos_count_tFileOutputDelimited_3++;

								/**
								 * [tFileOutputDelimited_3 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_3 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_3";

								/**
								 * [tFileOutputDelimited_3 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_3 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_3";

								/**
								 * [tFileOutputDelimited_3 process_data_end ] stop
								 */

							} // End of branch "row9"

							/**
							 * [tFilterRow_2 process_data_end ] start
							 */

							currentComponent = "tFilterRow_2";

							/**
							 * [tFilterRow_2 process_data_end ] stop
							 */

						} // End of branch "row8"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/BI/transparence-sante/data/others/zipcodes_dep_region.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "adresse");
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE", nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE", nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (batchSizeCounter_tDBOutput_1 != 0) {
						int countSum_tDBOutput_1 = 0;

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_1 = 0;

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0) {

					conn_tDBOutput_1.commit();

				}

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String FIFA;

		public String getFIFA() {
			return this.FIFA;
		}

		public String Dial;

		public String getDial() {
			return this.Dial;
		}

		public String ISO3166_1_Alpha_3;

		public String getISO3166_1_Alpha_3() {
			return this.ISO3166_1_Alpha_3;
		}

		public String MARC;

		public String getMARC() {
			return this.MARC;
		}

		public String is_independent;

		public String getIs_independent() {
			return this.is_independent;
		}

		public String ISO3166_1_numeric;

		public String getISO3166_1_numeric() {
			return this.ISO3166_1_numeric;
		}

		public String GAUL;

		public String getGAUL() {
			return this.GAUL;
		}

		public String FIPS;

		public String getFIPS() {
			return this.FIPS;
		}

		public String WMO;

		public String getWMO() {
			return this.WMO;
		}

		public String ISO3166_1_Alpha_2;

		public String getISO3166_1_Alpha_2() {
			return this.ISO3166_1_Alpha_2;
		}

		public String ITU;

		public String getITU() {
			return this.ITU;
		}

		public String IOC;

		public String getIOC() {
			return this.IOC;
		}

		public String DS;

		public String getDS() {
			return this.DS;
		}

		public String UNTERM_Spanish_Formal;

		public String getUNTERM_Spanish_Formal() {
			return this.UNTERM_Spanish_Formal;
		}

		public String Global_Code;

		public String getGlobal_Code() {
			return this.Global_Code;
		}

		public String Intermediate_Region_Code;

		public String getIntermediate_Region_Code() {
			return this.Intermediate_Region_Code;
		}

		public String official_name_fr;

		public String getOfficial_name_fr() {
			return this.official_name_fr;
		}

		public String UNTERM_French_Short;

		public String getUNTERM_French_Short() {
			return this.UNTERM_French_Short;
		}

		public String ISO4217_currency_name;

		public String getISO4217_currency_name() {
			return this.ISO4217_currency_name;
		}

		public String Developed___Developing_Countries;

		public String getDeveloped___Developing_Countries() {
			return this.Developed___Developing_Countries;
		}

		public String UNTERM_Russian_Formal;

		public String getUNTERM_Russian_Formal() {
			return this.UNTERM_Russian_Formal;
		}

		public String UNTERM_English_Short;

		public String getUNTERM_English_Short() {
			return this.UNTERM_English_Short;
		}

		public String ISO4217_currency_alphabetic_code;

		public String getISO4217_currency_alphabetic_code() {
			return this.ISO4217_currency_alphabetic_code;
		}

		public String Small_Island_Developing_States__SIDS_;

		public String getSmall_Island_Developing_States__SIDS_() {
			return this.Small_Island_Developing_States__SIDS_;
		}

		public String UNTERM_Spanish_Short;

		public String getUNTERM_Spanish_Short() {
			return this.UNTERM_Spanish_Short;
		}

		public String ISO4217_currency_numeric_code;

		public String getISO4217_currency_numeric_code() {
			return this.ISO4217_currency_numeric_code;
		}

		public String UNTERM_Chinese_Formal;

		public String getUNTERM_Chinese_Formal() {
			return this.UNTERM_Chinese_Formal;
		}

		public String UNTERM_French_Formal;

		public String getUNTERM_French_Formal() {
			return this.UNTERM_French_Formal;
		}

		public String UNTERM_Russian_Short;

		public String getUNTERM_Russian_Short() {
			return this.UNTERM_Russian_Short;
		}

		public String M49;

		public String getM49() {
			return this.M49;
		}

		public String Sub_region_Code;

		public String getSub_region_Code() {
			return this.Sub_region_Code;
		}

		public String Region_Code;

		public String getRegion_Code() {
			return this.Region_Code;
		}

		public String official_name_ar;

		public String getOfficial_name_ar() {
			return this.official_name_ar;
		}

		public String ISO4217_currency_minor_unit;

		public String getISO4217_currency_minor_unit() {
			return this.ISO4217_currency_minor_unit;
		}

		public String UNTERM_Arabic_Formal;

		public String getUNTERM_Arabic_Formal() {
			return this.UNTERM_Arabic_Formal;
		}

		public String UNTERM_Chinese_Short;

		public String getUNTERM_Chinese_Short() {
			return this.UNTERM_Chinese_Short;
		}

		public String Land_Locked_Developing_Countries__LLDC_;

		public String getLand_Locked_Developing_Countries__LLDC_() {
			return this.Land_Locked_Developing_Countries__LLDC_;
		}

		public String Intermediate_Region_Name;

		public String getIntermediate_Region_Name() {
			return this.Intermediate_Region_Name;
		}

		public String official_name_es;

		public String getOfficial_name_es() {
			return this.official_name_es;
		}

		public String UNTERM_English_Formal;

		public String getUNTERM_English_Formal() {
			return this.UNTERM_English_Formal;
		}

		public String official_name_cn;

		public String getOfficial_name_cn() {
			return this.official_name_cn;
		}

		public String official_name_en;

		public String getOfficial_name_en() {
			return this.official_name_en;
		}

		public String ISO4217_currency_country_name;

		public String getISO4217_currency_country_name() {
			return this.ISO4217_currency_country_name;
		}

		public String Least_Developed_Countries__LDC_;

		public String getLeast_Developed_Countries__LDC_() {
			return this.Least_Developed_Countries__LDC_;
		}

		public String Region_Name;

		public String getRegion_Name() {
			return this.Region_Name;
		}

		public String UNTERM_Arabic_Short;

		public String getUNTERM_Arabic_Short() {
			return this.UNTERM_Arabic_Short;
		}

		public String Sub_region_Name;

		public String getSub_region_Name() {
			return this.Sub_region_Name;
		}

		public String official_name_ru;

		public String getOfficial_name_ru() {
			return this.official_name_ru;
		}

		public String Global_Name;

		public String getGlobal_Name() {
			return this.Global_Name;
		}

		public String Capital;

		public String getCapital() {
			return this.Capital;
		}

		public String Continent;

		public String getContinent() {
			return this.Continent;
		}

		public String TLD;

		public String getTLD() {
			return this.TLD;
		}

		public String Languages;

		public String getLanguages() {
			return this.Languages;
		}

		public String Geoname_ID;

		public String getGeoname_ID() {
			return this.Geoname_ID;
		}

		public String CLDR_display_name;

		public String getCLDR_display_name() {
			return this.CLDR_display_name;
		}

		public String EDGAR;

		public String getEDGAR() {
			return this.EDGAR;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ISO3166_1_Alpha_2 == null) ? 0 : this.ISO3166_1_Alpha_2.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.ISO3166_1_Alpha_2 == null) {
				if (other.ISO3166_1_Alpha_2 != null)
					return false;

			} else if (!this.ISO3166_1_Alpha_2.equals(other.ISO3166_1_Alpha_2))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.FIFA = this.FIFA;
			other.Dial = this.Dial;
			other.ISO3166_1_Alpha_3 = this.ISO3166_1_Alpha_3;
			other.MARC = this.MARC;
			other.is_independent = this.is_independent;
			other.ISO3166_1_numeric = this.ISO3166_1_numeric;
			other.GAUL = this.GAUL;
			other.FIPS = this.FIPS;
			other.WMO = this.WMO;
			other.ISO3166_1_Alpha_2 = this.ISO3166_1_Alpha_2;
			other.ITU = this.ITU;
			other.IOC = this.IOC;
			other.DS = this.DS;
			other.UNTERM_Spanish_Formal = this.UNTERM_Spanish_Formal;
			other.Global_Code = this.Global_Code;
			other.Intermediate_Region_Code = this.Intermediate_Region_Code;
			other.official_name_fr = this.official_name_fr;
			other.UNTERM_French_Short = this.UNTERM_French_Short;
			other.ISO4217_currency_name = this.ISO4217_currency_name;
			other.Developed___Developing_Countries = this.Developed___Developing_Countries;
			other.UNTERM_Russian_Formal = this.UNTERM_Russian_Formal;
			other.UNTERM_English_Short = this.UNTERM_English_Short;
			other.ISO4217_currency_alphabetic_code = this.ISO4217_currency_alphabetic_code;
			other.Small_Island_Developing_States__SIDS_ = this.Small_Island_Developing_States__SIDS_;
			other.UNTERM_Spanish_Short = this.UNTERM_Spanish_Short;
			other.ISO4217_currency_numeric_code = this.ISO4217_currency_numeric_code;
			other.UNTERM_Chinese_Formal = this.UNTERM_Chinese_Formal;
			other.UNTERM_French_Formal = this.UNTERM_French_Formal;
			other.UNTERM_Russian_Short = this.UNTERM_Russian_Short;
			other.M49 = this.M49;
			other.Sub_region_Code = this.Sub_region_Code;
			other.Region_Code = this.Region_Code;
			other.official_name_ar = this.official_name_ar;
			other.ISO4217_currency_minor_unit = this.ISO4217_currency_minor_unit;
			other.UNTERM_Arabic_Formal = this.UNTERM_Arabic_Formal;
			other.UNTERM_Chinese_Short = this.UNTERM_Chinese_Short;
			other.Land_Locked_Developing_Countries__LLDC_ = this.Land_Locked_Developing_Countries__LLDC_;
			other.Intermediate_Region_Name = this.Intermediate_Region_Name;
			other.official_name_es = this.official_name_es;
			other.UNTERM_English_Formal = this.UNTERM_English_Formal;
			other.official_name_cn = this.official_name_cn;
			other.official_name_en = this.official_name_en;
			other.ISO4217_currency_country_name = this.ISO4217_currency_country_name;
			other.Least_Developed_Countries__LDC_ = this.Least_Developed_Countries__LDC_;
			other.Region_Name = this.Region_Name;
			other.UNTERM_Arabic_Short = this.UNTERM_Arabic_Short;
			other.Sub_region_Name = this.Sub_region_Name;
			other.official_name_ru = this.official_name_ru;
			other.Global_Name = this.Global_Name;
			other.Capital = this.Capital;
			other.Continent = this.Continent;
			other.TLD = this.TLD;
			other.Languages = this.Languages;
			other.Geoname_ID = this.Geoname_ID;
			other.CLDR_display_name = this.CLDR_display_name;
			other.EDGAR = this.EDGAR;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.ISO3166_1_Alpha_2 = this.ISO3166_1_Alpha_2;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.ISO3166_1_Alpha_2 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ISO3166_1_Alpha_2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.FIFA = readString(dis, ois);

				this.Dial = readString(dis, ois);

				this.ISO3166_1_Alpha_3 = readString(dis, ois);

				this.MARC = readString(dis, ois);

				this.is_independent = readString(dis, ois);

				this.ISO3166_1_numeric = readString(dis, ois);

				this.GAUL = readString(dis, ois);

				this.FIPS = readString(dis, ois);

				this.WMO = readString(dis, ois);

				this.ITU = readString(dis, ois);

				this.IOC = readString(dis, ois);

				this.DS = readString(dis, ois);

				this.UNTERM_Spanish_Formal = readString(dis, ois);

				this.Global_Code = readString(dis, ois);

				this.Intermediate_Region_Code = readString(dis, ois);

				this.official_name_fr = readString(dis, ois);

				this.UNTERM_French_Short = readString(dis, ois);

				this.ISO4217_currency_name = readString(dis, ois);

				this.Developed___Developing_Countries = readString(dis, ois);

				this.UNTERM_Russian_Formal = readString(dis, ois);

				this.UNTERM_English_Short = readString(dis, ois);

				this.ISO4217_currency_alphabetic_code = readString(dis, ois);

				this.Small_Island_Developing_States__SIDS_ = readString(dis, ois);

				this.UNTERM_Spanish_Short = readString(dis, ois);

				this.ISO4217_currency_numeric_code = readString(dis, ois);

				this.UNTERM_Chinese_Formal = readString(dis, ois);

				this.UNTERM_French_Formal = readString(dis, ois);

				this.UNTERM_Russian_Short = readString(dis, ois);

				this.M49 = readString(dis, ois);

				this.Sub_region_Code = readString(dis, ois);

				this.Region_Code = readString(dis, ois);

				this.official_name_ar = readString(dis, ois);

				this.ISO4217_currency_minor_unit = readString(dis, ois);

				this.UNTERM_Arabic_Formal = readString(dis, ois);

				this.UNTERM_Chinese_Short = readString(dis, ois);

				this.Land_Locked_Developing_Countries__LLDC_ = readString(dis, ois);

				this.Intermediate_Region_Name = readString(dis, ois);

				this.official_name_es = readString(dis, ois);

				this.UNTERM_English_Formal = readString(dis, ois);

				this.official_name_cn = readString(dis, ois);

				this.official_name_en = readString(dis, ois);

				this.ISO4217_currency_country_name = readString(dis, ois);

				this.Least_Developed_Countries__LDC_ = readString(dis, ois);

				this.Region_Name = readString(dis, ois);

				this.UNTERM_Arabic_Short = readString(dis, ois);

				this.Sub_region_Name = readString(dis, ois);

				this.official_name_ru = readString(dis, ois);

				this.Global_Name = readString(dis, ois);

				this.Capital = readString(dis, ois);

				this.Continent = readString(dis, ois);

				this.TLD = readString(dis, ois);

				this.Languages = readString(dis, ois);

				this.Geoname_ID = readString(dis, ois);

				this.CLDR_display_name = readString(dis, ois);

				this.EDGAR = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.FIFA, dos, oos);

				writeString(this.Dial, dos, oos);

				writeString(this.ISO3166_1_Alpha_3, dos, oos);

				writeString(this.MARC, dos, oos);

				writeString(this.is_independent, dos, oos);

				writeString(this.ISO3166_1_numeric, dos, oos);

				writeString(this.GAUL, dos, oos);

				writeString(this.FIPS, dos, oos);

				writeString(this.WMO, dos, oos);

				writeString(this.ITU, dos, oos);

				writeString(this.IOC, dos, oos);

				writeString(this.DS, dos, oos);

				writeString(this.UNTERM_Spanish_Formal, dos, oos);

				writeString(this.Global_Code, dos, oos);

				writeString(this.Intermediate_Region_Code, dos, oos);

				writeString(this.official_name_fr, dos, oos);

				writeString(this.UNTERM_French_Short, dos, oos);

				writeString(this.ISO4217_currency_name, dos, oos);

				writeString(this.Developed___Developing_Countries, dos, oos);

				writeString(this.UNTERM_Russian_Formal, dos, oos);

				writeString(this.UNTERM_English_Short, dos, oos);

				writeString(this.ISO4217_currency_alphabetic_code, dos, oos);

				writeString(this.Small_Island_Developing_States__SIDS_, dos, oos);

				writeString(this.UNTERM_Spanish_Short, dos, oos);

				writeString(this.ISO4217_currency_numeric_code, dos, oos);

				writeString(this.UNTERM_Chinese_Formal, dos, oos);

				writeString(this.UNTERM_French_Formal, dos, oos);

				writeString(this.UNTERM_Russian_Short, dos, oos);

				writeString(this.M49, dos, oos);

				writeString(this.Sub_region_Code, dos, oos);

				writeString(this.Region_Code, dos, oos);

				writeString(this.official_name_ar, dos, oos);

				writeString(this.ISO4217_currency_minor_unit, dos, oos);

				writeString(this.UNTERM_Arabic_Formal, dos, oos);

				writeString(this.UNTERM_Chinese_Short, dos, oos);

				writeString(this.Land_Locked_Developing_Countries__LLDC_, dos, oos);

				writeString(this.Intermediate_Region_Name, dos, oos);

				writeString(this.official_name_es, dos, oos);

				writeString(this.UNTERM_English_Formal, dos, oos);

				writeString(this.official_name_cn, dos, oos);

				writeString(this.official_name_en, dos, oos);

				writeString(this.ISO4217_currency_country_name, dos, oos);

				writeString(this.Least_Developed_Countries__LDC_, dos, oos);

				writeString(this.Region_Name, dos, oos);

				writeString(this.UNTERM_Arabic_Short, dos, oos);

				writeString(this.Sub_region_Name, dos, oos);

				writeString(this.official_name_ru, dos, oos);

				writeString(this.Global_Name, dos, oos);

				writeString(this.Capital, dos, oos);

				writeString(this.Continent, dos, oos);

				writeString(this.TLD, dos, oos);

				writeString(this.Languages, dos, oos);

				writeString(this.Geoname_ID, dos, oos);

				writeString(this.CLDR_display_name, dos, oos);

				writeString(this.EDGAR, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FIFA=" + FIFA);
			sb.append(",Dial=" + Dial);
			sb.append(",ISO3166_1_Alpha_3=" + ISO3166_1_Alpha_3);
			sb.append(",MARC=" + MARC);
			sb.append(",is_independent=" + is_independent);
			sb.append(",ISO3166_1_numeric=" + ISO3166_1_numeric);
			sb.append(",GAUL=" + GAUL);
			sb.append(",FIPS=" + FIPS);
			sb.append(",WMO=" + WMO);
			sb.append(",ISO3166_1_Alpha_2=" + ISO3166_1_Alpha_2);
			sb.append(",ITU=" + ITU);
			sb.append(",IOC=" + IOC);
			sb.append(",DS=" + DS);
			sb.append(",UNTERM_Spanish_Formal=" + UNTERM_Spanish_Formal);
			sb.append(",Global_Code=" + Global_Code);
			sb.append(",Intermediate_Region_Code=" + Intermediate_Region_Code);
			sb.append(",official_name_fr=" + official_name_fr);
			sb.append(",UNTERM_French_Short=" + UNTERM_French_Short);
			sb.append(",ISO4217_currency_name=" + ISO4217_currency_name);
			sb.append(",Developed___Developing_Countries=" + Developed___Developing_Countries);
			sb.append(",UNTERM_Russian_Formal=" + UNTERM_Russian_Formal);
			sb.append(",UNTERM_English_Short=" + UNTERM_English_Short);
			sb.append(",ISO4217_currency_alphabetic_code=" + ISO4217_currency_alphabetic_code);
			sb.append(",Small_Island_Developing_States__SIDS_=" + Small_Island_Developing_States__SIDS_);
			sb.append(",UNTERM_Spanish_Short=" + UNTERM_Spanish_Short);
			sb.append(",ISO4217_currency_numeric_code=" + ISO4217_currency_numeric_code);
			sb.append(",UNTERM_Chinese_Formal=" + UNTERM_Chinese_Formal);
			sb.append(",UNTERM_French_Formal=" + UNTERM_French_Formal);
			sb.append(",UNTERM_Russian_Short=" + UNTERM_Russian_Short);
			sb.append(",M49=" + M49);
			sb.append(",Sub_region_Code=" + Sub_region_Code);
			sb.append(",Region_Code=" + Region_Code);
			sb.append(",official_name_ar=" + official_name_ar);
			sb.append(",ISO4217_currency_minor_unit=" + ISO4217_currency_minor_unit);
			sb.append(",UNTERM_Arabic_Formal=" + UNTERM_Arabic_Formal);
			sb.append(",UNTERM_Chinese_Short=" + UNTERM_Chinese_Short);
			sb.append(",Land_Locked_Developing_Countries__LLDC_=" + Land_Locked_Developing_Countries__LLDC_);
			sb.append(",Intermediate_Region_Name=" + Intermediate_Region_Name);
			sb.append(",official_name_es=" + official_name_es);
			sb.append(",UNTERM_English_Formal=" + UNTERM_English_Formal);
			sb.append(",official_name_cn=" + official_name_cn);
			sb.append(",official_name_en=" + official_name_en);
			sb.append(",ISO4217_currency_country_name=" + ISO4217_currency_country_name);
			sb.append(",Least_Developed_Countries__LDC_=" + Least_Developed_Countries__LDC_);
			sb.append(",Region_Name=" + Region_Name);
			sb.append(",UNTERM_Arabic_Short=" + UNTERM_Arabic_Short);
			sb.append(",Sub_region_Name=" + Sub_region_Name);
			sb.append(",official_name_ru=" + official_name_ru);
			sb.append(",Global_Name=" + Global_Name);
			sb.append(",Capital=" + Capital);
			sb.append(",Continent=" + Continent);
			sb.append(",TLD=" + TLD);
			sb.append(",Languages=" + Languages);
			sb.append(",Geoname_ID=" + Geoname_ID);
			sb.append(",CLDR_display_name=" + CLDR_display_name);
			sb.append(",EDGAR=" + EDGAR);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ISO3166_1_Alpha_2, other.ISO3166_1_Alpha_2);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];

		public String FIFA;

		public String getFIFA() {
			return this.FIFA;
		}

		public String Dial;

		public String getDial() {
			return this.Dial;
		}

		public String ISO3166_1_Alpha_3;

		public String getISO3166_1_Alpha_3() {
			return this.ISO3166_1_Alpha_3;
		}

		public String MARC;

		public String getMARC() {
			return this.MARC;
		}

		public String is_independent;

		public String getIs_independent() {
			return this.is_independent;
		}

		public String ISO3166_1_numeric;

		public String getISO3166_1_numeric() {
			return this.ISO3166_1_numeric;
		}

		public String GAUL;

		public String getGAUL() {
			return this.GAUL;
		}

		public String FIPS;

		public String getFIPS() {
			return this.FIPS;
		}

		public String WMO;

		public String getWMO() {
			return this.WMO;
		}

		public String ISO3166_1_Alpha_2;

		public String getISO3166_1_Alpha_2() {
			return this.ISO3166_1_Alpha_2;
		}

		public String ITU;

		public String getITU() {
			return this.ITU;
		}

		public String IOC;

		public String getIOC() {
			return this.IOC;
		}

		public String DS;

		public String getDS() {
			return this.DS;
		}

		public String UNTERM_Spanish_Formal;

		public String getUNTERM_Spanish_Formal() {
			return this.UNTERM_Spanish_Formal;
		}

		public String Global_Code;

		public String getGlobal_Code() {
			return this.Global_Code;
		}

		public String Intermediate_Region_Code;

		public String getIntermediate_Region_Code() {
			return this.Intermediate_Region_Code;
		}

		public String official_name_fr;

		public String getOfficial_name_fr() {
			return this.official_name_fr;
		}

		public String UNTERM_French_Short;

		public String getUNTERM_French_Short() {
			return this.UNTERM_French_Short;
		}

		public String ISO4217_currency_name;

		public String getISO4217_currency_name() {
			return this.ISO4217_currency_name;
		}

		public String Developed___Developing_Countries;

		public String getDeveloped___Developing_Countries() {
			return this.Developed___Developing_Countries;
		}

		public String UNTERM_Russian_Formal;

		public String getUNTERM_Russian_Formal() {
			return this.UNTERM_Russian_Formal;
		}

		public String UNTERM_English_Short;

		public String getUNTERM_English_Short() {
			return this.UNTERM_English_Short;
		}

		public String ISO4217_currency_alphabetic_code;

		public String getISO4217_currency_alphabetic_code() {
			return this.ISO4217_currency_alphabetic_code;
		}

		public String Small_Island_Developing_States__SIDS_;

		public String getSmall_Island_Developing_States__SIDS_() {
			return this.Small_Island_Developing_States__SIDS_;
		}

		public String UNTERM_Spanish_Short;

		public String getUNTERM_Spanish_Short() {
			return this.UNTERM_Spanish_Short;
		}

		public String ISO4217_currency_numeric_code;

		public String getISO4217_currency_numeric_code() {
			return this.ISO4217_currency_numeric_code;
		}

		public String UNTERM_Chinese_Formal;

		public String getUNTERM_Chinese_Formal() {
			return this.UNTERM_Chinese_Formal;
		}

		public String UNTERM_French_Formal;

		public String getUNTERM_French_Formal() {
			return this.UNTERM_French_Formal;
		}

		public String UNTERM_Russian_Short;

		public String getUNTERM_Russian_Short() {
			return this.UNTERM_Russian_Short;
		}

		public String M49;

		public String getM49() {
			return this.M49;
		}

		public String Sub_region_Code;

		public String getSub_region_Code() {
			return this.Sub_region_Code;
		}

		public String Region_Code;

		public String getRegion_Code() {
			return this.Region_Code;
		}

		public String official_name_ar;

		public String getOfficial_name_ar() {
			return this.official_name_ar;
		}

		public String ISO4217_currency_minor_unit;

		public String getISO4217_currency_minor_unit() {
			return this.ISO4217_currency_minor_unit;
		}

		public String UNTERM_Arabic_Formal;

		public String getUNTERM_Arabic_Formal() {
			return this.UNTERM_Arabic_Formal;
		}

		public String UNTERM_Chinese_Short;

		public String getUNTERM_Chinese_Short() {
			return this.UNTERM_Chinese_Short;
		}

		public String Land_Locked_Developing_Countries__LLDC_;

		public String getLand_Locked_Developing_Countries__LLDC_() {
			return this.Land_Locked_Developing_Countries__LLDC_;
		}

		public String Intermediate_Region_Name;

		public String getIntermediate_Region_Name() {
			return this.Intermediate_Region_Name;
		}

		public String official_name_es;

		public String getOfficial_name_es() {
			return this.official_name_es;
		}

		public String UNTERM_English_Formal;

		public String getUNTERM_English_Formal() {
			return this.UNTERM_English_Formal;
		}

		public String official_name_cn;

		public String getOfficial_name_cn() {
			return this.official_name_cn;
		}

		public String official_name_en;

		public String getOfficial_name_en() {
			return this.official_name_en;
		}

		public String ISO4217_currency_country_name;

		public String getISO4217_currency_country_name() {
			return this.ISO4217_currency_country_name;
		}

		public String Least_Developed_Countries__LDC_;

		public String getLeast_Developed_Countries__LDC_() {
			return this.Least_Developed_Countries__LDC_;
		}

		public String Region_Name;

		public String getRegion_Name() {
			return this.Region_Name;
		}

		public String UNTERM_Arabic_Short;

		public String getUNTERM_Arabic_Short() {
			return this.UNTERM_Arabic_Short;
		}

		public String Sub_region_Name;

		public String getSub_region_Name() {
			return this.Sub_region_Name;
		}

		public String official_name_ru;

		public String getOfficial_name_ru() {
			return this.official_name_ru;
		}

		public String Global_Name;

		public String getGlobal_Name() {
			return this.Global_Name;
		}

		public String Capital;

		public String getCapital() {
			return this.Capital;
		}

		public String Continent;

		public String getContinent() {
			return this.Continent;
		}

		public String TLD;

		public String getTLD() {
			return this.TLD;
		}

		public String Languages;

		public String getLanguages() {
			return this.Languages;
		}

		public String Geoname_ID;

		public String getGeoname_ID() {
			return this.Geoname_ID;
		}

		public String CLDR_display_name;

		public String getCLDR_display_name() {
			return this.CLDR_display_name;
		}

		public String EDGAR;

		public String getEDGAR() {
			return this.EDGAR;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.FIFA = readString(dis);

					this.Dial = readString(dis);

					this.ISO3166_1_Alpha_3 = readString(dis);

					this.MARC = readString(dis);

					this.is_independent = readString(dis);

					this.ISO3166_1_numeric = readString(dis);

					this.GAUL = readString(dis);

					this.FIPS = readString(dis);

					this.WMO = readString(dis);

					this.ISO3166_1_Alpha_2 = readString(dis);

					this.ITU = readString(dis);

					this.IOC = readString(dis);

					this.DS = readString(dis);

					this.UNTERM_Spanish_Formal = readString(dis);

					this.Global_Code = readString(dis);

					this.Intermediate_Region_Code = readString(dis);

					this.official_name_fr = readString(dis);

					this.UNTERM_French_Short = readString(dis);

					this.ISO4217_currency_name = readString(dis);

					this.Developed___Developing_Countries = readString(dis);

					this.UNTERM_Russian_Formal = readString(dis);

					this.UNTERM_English_Short = readString(dis);

					this.ISO4217_currency_alphabetic_code = readString(dis);

					this.Small_Island_Developing_States__SIDS_ = readString(dis);

					this.UNTERM_Spanish_Short = readString(dis);

					this.ISO4217_currency_numeric_code = readString(dis);

					this.UNTERM_Chinese_Formal = readString(dis);

					this.UNTERM_French_Formal = readString(dis);

					this.UNTERM_Russian_Short = readString(dis);

					this.M49 = readString(dis);

					this.Sub_region_Code = readString(dis);

					this.Region_Code = readString(dis);

					this.official_name_ar = readString(dis);

					this.ISO4217_currency_minor_unit = readString(dis);

					this.UNTERM_Arabic_Formal = readString(dis);

					this.UNTERM_Chinese_Short = readString(dis);

					this.Land_Locked_Developing_Countries__LLDC_ = readString(dis);

					this.Intermediate_Region_Name = readString(dis);

					this.official_name_es = readString(dis);

					this.UNTERM_English_Formal = readString(dis);

					this.official_name_cn = readString(dis);

					this.official_name_en = readString(dis);

					this.ISO4217_currency_country_name = readString(dis);

					this.Least_Developed_Countries__LDC_ = readString(dis);

					this.Region_Name = readString(dis);

					this.UNTERM_Arabic_Short = readString(dis);

					this.Sub_region_Name = readString(dis);

					this.official_name_ru = readString(dis);

					this.Global_Name = readString(dis);

					this.Capital = readString(dis);

					this.Continent = readString(dis);

					this.TLD = readString(dis);

					this.Languages = readString(dis);

					this.Geoname_ID = readString(dis);

					this.CLDR_display_name = readString(dis);

					this.EDGAR = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FIFA, dos);

				// String

				writeString(this.Dial, dos);

				// String

				writeString(this.ISO3166_1_Alpha_3, dos);

				// String

				writeString(this.MARC, dos);

				// String

				writeString(this.is_independent, dos);

				// String

				writeString(this.ISO3166_1_numeric, dos);

				// String

				writeString(this.GAUL, dos);

				// String

				writeString(this.FIPS, dos);

				// String

				writeString(this.WMO, dos);

				// String

				writeString(this.ISO3166_1_Alpha_2, dos);

				// String

				writeString(this.ITU, dos);

				// String

				writeString(this.IOC, dos);

				// String

				writeString(this.DS, dos);

				// String

				writeString(this.UNTERM_Spanish_Formal, dos);

				// String

				writeString(this.Global_Code, dos);

				// String

				writeString(this.Intermediate_Region_Code, dos);

				// String

				writeString(this.official_name_fr, dos);

				// String

				writeString(this.UNTERM_French_Short, dos);

				// String

				writeString(this.ISO4217_currency_name, dos);

				// String

				writeString(this.Developed___Developing_Countries, dos);

				// String

				writeString(this.UNTERM_Russian_Formal, dos);

				// String

				writeString(this.UNTERM_English_Short, dos);

				// String

				writeString(this.ISO4217_currency_alphabetic_code, dos);

				// String

				writeString(this.Small_Island_Developing_States__SIDS_, dos);

				// String

				writeString(this.UNTERM_Spanish_Short, dos);

				// String

				writeString(this.ISO4217_currency_numeric_code, dos);

				// String

				writeString(this.UNTERM_Chinese_Formal, dos);

				// String

				writeString(this.UNTERM_French_Formal, dos);

				// String

				writeString(this.UNTERM_Russian_Short, dos);

				// String

				writeString(this.M49, dos);

				// String

				writeString(this.Sub_region_Code, dos);

				// String

				writeString(this.Region_Code, dos);

				// String

				writeString(this.official_name_ar, dos);

				// String

				writeString(this.ISO4217_currency_minor_unit, dos);

				// String

				writeString(this.UNTERM_Arabic_Formal, dos);

				// String

				writeString(this.UNTERM_Chinese_Short, dos);

				// String

				writeString(this.Land_Locked_Developing_Countries__LLDC_, dos);

				// String

				writeString(this.Intermediate_Region_Name, dos);

				// String

				writeString(this.official_name_es, dos);

				// String

				writeString(this.UNTERM_English_Formal, dos);

				// String

				writeString(this.official_name_cn, dos);

				// String

				writeString(this.official_name_en, dos);

				// String

				writeString(this.ISO4217_currency_country_name, dos);

				// String

				writeString(this.Least_Developed_Countries__LDC_, dos);

				// String

				writeString(this.Region_Name, dos);

				// String

				writeString(this.UNTERM_Arabic_Short, dos);

				// String

				writeString(this.Sub_region_Name, dos);

				// String

				writeString(this.official_name_ru, dos);

				// String

				writeString(this.Global_Name, dos);

				// String

				writeString(this.Capital, dos);

				// String

				writeString(this.Continent, dos);

				// String

				writeString(this.TLD, dos);

				// String

				writeString(this.Languages, dos);

				// String

				writeString(this.Geoname_ID, dos);

				// String

				writeString(this.CLDR_display_name, dos);

				// String

				writeString(this.EDGAR, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FIFA=" + FIFA);
			sb.append(",Dial=" + Dial);
			sb.append(",ISO3166_1_Alpha_3=" + ISO3166_1_Alpha_3);
			sb.append(",MARC=" + MARC);
			sb.append(",is_independent=" + is_independent);
			sb.append(",ISO3166_1_numeric=" + ISO3166_1_numeric);
			sb.append(",GAUL=" + GAUL);
			sb.append(",FIPS=" + FIPS);
			sb.append(",WMO=" + WMO);
			sb.append(",ISO3166_1_Alpha_2=" + ISO3166_1_Alpha_2);
			sb.append(",ITU=" + ITU);
			sb.append(",IOC=" + IOC);
			sb.append(",DS=" + DS);
			sb.append(",UNTERM_Spanish_Formal=" + UNTERM_Spanish_Formal);
			sb.append(",Global_Code=" + Global_Code);
			sb.append(",Intermediate_Region_Code=" + Intermediate_Region_Code);
			sb.append(",official_name_fr=" + official_name_fr);
			sb.append(",UNTERM_French_Short=" + UNTERM_French_Short);
			sb.append(",ISO4217_currency_name=" + ISO4217_currency_name);
			sb.append(",Developed___Developing_Countries=" + Developed___Developing_Countries);
			sb.append(",UNTERM_Russian_Formal=" + UNTERM_Russian_Formal);
			sb.append(",UNTERM_English_Short=" + UNTERM_English_Short);
			sb.append(",ISO4217_currency_alphabetic_code=" + ISO4217_currency_alphabetic_code);
			sb.append(",Small_Island_Developing_States__SIDS_=" + Small_Island_Developing_States__SIDS_);
			sb.append(",UNTERM_Spanish_Short=" + UNTERM_Spanish_Short);
			sb.append(",ISO4217_currency_numeric_code=" + ISO4217_currency_numeric_code);
			sb.append(",UNTERM_Chinese_Formal=" + UNTERM_Chinese_Formal);
			sb.append(",UNTERM_French_Formal=" + UNTERM_French_Formal);
			sb.append(",UNTERM_Russian_Short=" + UNTERM_Russian_Short);
			sb.append(",M49=" + M49);
			sb.append(",Sub_region_Code=" + Sub_region_Code);
			sb.append(",Region_Code=" + Region_Code);
			sb.append(",official_name_ar=" + official_name_ar);
			sb.append(",ISO4217_currency_minor_unit=" + ISO4217_currency_minor_unit);
			sb.append(",UNTERM_Arabic_Formal=" + UNTERM_Arabic_Formal);
			sb.append(",UNTERM_Chinese_Short=" + UNTERM_Chinese_Short);
			sb.append(",Land_Locked_Developing_Countries__LLDC_=" + Land_Locked_Developing_Countries__LLDC_);
			sb.append(",Intermediate_Region_Name=" + Intermediate_Region_Name);
			sb.append(",official_name_es=" + official_name_es);
			sb.append(",UNTERM_English_Formal=" + UNTERM_English_Formal);
			sb.append(",official_name_cn=" + official_name_cn);
			sb.append(",official_name_en=" + official_name_en);
			sb.append(",ISO4217_currency_country_name=" + ISO4217_currency_country_name);
			sb.append(",Least_Developed_Countries__LDC_=" + Least_Developed_Countries__LDC_);
			sb.append(",Region_Name=" + Region_Name);
			sb.append(",UNTERM_Arabic_Short=" + UNTERM_Arabic_Short);
			sb.append(",Sub_region_Name=" + Sub_region_Name);
			sb.append(",official_name_ru=" + official_name_ru);
			sb.append(",Global_Name=" + Global_Name);
			sb.append(",Capital=" + Capital);
			sb.append(",Continent=" + Continent);
			sb.append(",TLD=" + TLD);
			sb.append(",Languages=" + Languages);
			sb.append(",Geoname_ID=" + Geoname_ID);
			sb.append(",CLDR_display_name=" + CLDR_display_name);
			sb.append(",EDGAR=" + EDGAR);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[0];

		public String FIFA;

		public String getFIFA() {
			return this.FIFA;
		}

		public String Dial;

		public String getDial() {
			return this.Dial;
		}

		public String ISO3166_1_Alpha_3;

		public String getISO3166_1_Alpha_3() {
			return this.ISO3166_1_Alpha_3;
		}

		public String MARC;

		public String getMARC() {
			return this.MARC;
		}

		public String is_independent;

		public String getIs_independent() {
			return this.is_independent;
		}

		public String ISO3166_1_numeric;

		public String getISO3166_1_numeric() {
			return this.ISO3166_1_numeric;
		}

		public String GAUL;

		public String getGAUL() {
			return this.GAUL;
		}

		public String FIPS;

		public String getFIPS() {
			return this.FIPS;
		}

		public String WMO;

		public String getWMO() {
			return this.WMO;
		}

		public String ISO3166_1_Alpha_2;

		public String getISO3166_1_Alpha_2() {
			return this.ISO3166_1_Alpha_2;
		}

		public String ITU;

		public String getITU() {
			return this.ITU;
		}

		public String IOC;

		public String getIOC() {
			return this.IOC;
		}

		public String DS;

		public String getDS() {
			return this.DS;
		}

		public String UNTERM_Spanish_Formal;

		public String getUNTERM_Spanish_Formal() {
			return this.UNTERM_Spanish_Formal;
		}

		public String Global_Code;

		public String getGlobal_Code() {
			return this.Global_Code;
		}

		public String Intermediate_Region_Code;

		public String getIntermediate_Region_Code() {
			return this.Intermediate_Region_Code;
		}

		public String official_name_fr;

		public String getOfficial_name_fr() {
			return this.official_name_fr;
		}

		public String UNTERM_French_Short;

		public String getUNTERM_French_Short() {
			return this.UNTERM_French_Short;
		}

		public String ISO4217_currency_name;

		public String getISO4217_currency_name() {
			return this.ISO4217_currency_name;
		}

		public String Developed___Developing_Countries;

		public String getDeveloped___Developing_Countries() {
			return this.Developed___Developing_Countries;
		}

		public String UNTERM_Russian_Formal;

		public String getUNTERM_Russian_Formal() {
			return this.UNTERM_Russian_Formal;
		}

		public String UNTERM_English_Short;

		public String getUNTERM_English_Short() {
			return this.UNTERM_English_Short;
		}

		public String ISO4217_currency_alphabetic_code;

		public String getISO4217_currency_alphabetic_code() {
			return this.ISO4217_currency_alphabetic_code;
		}

		public String Small_Island_Developing_States__SIDS_;

		public String getSmall_Island_Developing_States__SIDS_() {
			return this.Small_Island_Developing_States__SIDS_;
		}

		public String UNTERM_Spanish_Short;

		public String getUNTERM_Spanish_Short() {
			return this.UNTERM_Spanish_Short;
		}

		public String ISO4217_currency_numeric_code;

		public String getISO4217_currency_numeric_code() {
			return this.ISO4217_currency_numeric_code;
		}

		public String UNTERM_Chinese_Formal;

		public String getUNTERM_Chinese_Formal() {
			return this.UNTERM_Chinese_Formal;
		}

		public String UNTERM_French_Formal;

		public String getUNTERM_French_Formal() {
			return this.UNTERM_French_Formal;
		}

		public String UNTERM_Russian_Short;

		public String getUNTERM_Russian_Short() {
			return this.UNTERM_Russian_Short;
		}

		public String M49;

		public String getM49() {
			return this.M49;
		}

		public String Sub_region_Code;

		public String getSub_region_Code() {
			return this.Sub_region_Code;
		}

		public String Region_Code;

		public String getRegion_Code() {
			return this.Region_Code;
		}

		public String official_name_ar;

		public String getOfficial_name_ar() {
			return this.official_name_ar;
		}

		public String ISO4217_currency_minor_unit;

		public String getISO4217_currency_minor_unit() {
			return this.ISO4217_currency_minor_unit;
		}

		public String UNTERM_Arabic_Formal;

		public String getUNTERM_Arabic_Formal() {
			return this.UNTERM_Arabic_Formal;
		}

		public String UNTERM_Chinese_Short;

		public String getUNTERM_Chinese_Short() {
			return this.UNTERM_Chinese_Short;
		}

		public String Land_Locked_Developing_Countries__LLDC_;

		public String getLand_Locked_Developing_Countries__LLDC_() {
			return this.Land_Locked_Developing_Countries__LLDC_;
		}

		public String Intermediate_Region_Name;

		public String getIntermediate_Region_Name() {
			return this.Intermediate_Region_Name;
		}

		public String official_name_es;

		public String getOfficial_name_es() {
			return this.official_name_es;
		}

		public String UNTERM_English_Formal;

		public String getUNTERM_English_Formal() {
			return this.UNTERM_English_Formal;
		}

		public String official_name_cn;

		public String getOfficial_name_cn() {
			return this.official_name_cn;
		}

		public String official_name_en;

		public String getOfficial_name_en() {
			return this.official_name_en;
		}

		public String ISO4217_currency_country_name;

		public String getISO4217_currency_country_name() {
			return this.ISO4217_currency_country_name;
		}

		public String Least_Developed_Countries__LDC_;

		public String getLeast_Developed_Countries__LDC_() {
			return this.Least_Developed_Countries__LDC_;
		}

		public String Region_Name;

		public String getRegion_Name() {
			return this.Region_Name;
		}

		public String UNTERM_Arabic_Short;

		public String getUNTERM_Arabic_Short() {
			return this.UNTERM_Arabic_Short;
		}

		public String Sub_region_Name;

		public String getSub_region_Name() {
			return this.Sub_region_Name;
		}

		public String official_name_ru;

		public String getOfficial_name_ru() {
			return this.official_name_ru;
		}

		public String Global_Name;

		public String getGlobal_Name() {
			return this.Global_Name;
		}

		public String Capital;

		public String getCapital() {
			return this.Capital;
		}

		public String Continent;

		public String getContinent() {
			return this.Continent;
		}

		public String TLD;

		public String getTLD() {
			return this.TLD;
		}

		public String Languages;

		public String getLanguages() {
			return this.Languages;
		}

		public String Geoname_ID;

		public String getGeoname_ID() {
			return this.Geoname_ID;
		}

		public String CLDR_display_name;

		public String getCLDR_display_name() {
			return this.CLDR_display_name;
		}

		public String EDGAR;

		public String getEDGAR() {
			return this.EDGAR;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_adresse_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_adresse_dim) {

				try {

					int length = 0;

					this.FIFA = readString(dis);

					this.Dial = readString(dis);

					this.ISO3166_1_Alpha_3 = readString(dis);

					this.MARC = readString(dis);

					this.is_independent = readString(dis);

					this.ISO3166_1_numeric = readString(dis);

					this.GAUL = readString(dis);

					this.FIPS = readString(dis);

					this.WMO = readString(dis);

					this.ISO3166_1_Alpha_2 = readString(dis);

					this.ITU = readString(dis);

					this.IOC = readString(dis);

					this.DS = readString(dis);

					this.UNTERM_Spanish_Formal = readString(dis);

					this.Global_Code = readString(dis);

					this.Intermediate_Region_Code = readString(dis);

					this.official_name_fr = readString(dis);

					this.UNTERM_French_Short = readString(dis);

					this.ISO4217_currency_name = readString(dis);

					this.Developed___Developing_Countries = readString(dis);

					this.UNTERM_Russian_Formal = readString(dis);

					this.UNTERM_English_Short = readString(dis);

					this.ISO4217_currency_alphabetic_code = readString(dis);

					this.Small_Island_Developing_States__SIDS_ = readString(dis);

					this.UNTERM_Spanish_Short = readString(dis);

					this.ISO4217_currency_numeric_code = readString(dis);

					this.UNTERM_Chinese_Formal = readString(dis);

					this.UNTERM_French_Formal = readString(dis);

					this.UNTERM_Russian_Short = readString(dis);

					this.M49 = readString(dis);

					this.Sub_region_Code = readString(dis);

					this.Region_Code = readString(dis);

					this.official_name_ar = readString(dis);

					this.ISO4217_currency_minor_unit = readString(dis);

					this.UNTERM_Arabic_Formal = readString(dis);

					this.UNTERM_Chinese_Short = readString(dis);

					this.Land_Locked_Developing_Countries__LLDC_ = readString(dis);

					this.Intermediate_Region_Name = readString(dis);

					this.official_name_es = readString(dis);

					this.UNTERM_English_Formal = readString(dis);

					this.official_name_cn = readString(dis);

					this.official_name_en = readString(dis);

					this.ISO4217_currency_country_name = readString(dis);

					this.Least_Developed_Countries__LDC_ = readString(dis);

					this.Region_Name = readString(dis);

					this.UNTERM_Arabic_Short = readString(dis);

					this.Sub_region_Name = readString(dis);

					this.official_name_ru = readString(dis);

					this.Global_Name = readString(dis);

					this.Capital = readString(dis);

					this.Continent = readString(dis);

					this.TLD = readString(dis);

					this.Languages = readString(dis);

					this.Geoname_ID = readString(dis);

					this.CLDR_display_name = readString(dis);

					this.EDGAR = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.FIFA, dos);

				// String

				writeString(this.Dial, dos);

				// String

				writeString(this.ISO3166_1_Alpha_3, dos);

				// String

				writeString(this.MARC, dos);

				// String

				writeString(this.is_independent, dos);

				// String

				writeString(this.ISO3166_1_numeric, dos);

				// String

				writeString(this.GAUL, dos);

				// String

				writeString(this.FIPS, dos);

				// String

				writeString(this.WMO, dos);

				// String

				writeString(this.ISO3166_1_Alpha_2, dos);

				// String

				writeString(this.ITU, dos);

				// String

				writeString(this.IOC, dos);

				// String

				writeString(this.DS, dos);

				// String

				writeString(this.UNTERM_Spanish_Formal, dos);

				// String

				writeString(this.Global_Code, dos);

				// String

				writeString(this.Intermediate_Region_Code, dos);

				// String

				writeString(this.official_name_fr, dos);

				// String

				writeString(this.UNTERM_French_Short, dos);

				// String

				writeString(this.ISO4217_currency_name, dos);

				// String

				writeString(this.Developed___Developing_Countries, dos);

				// String

				writeString(this.UNTERM_Russian_Formal, dos);

				// String

				writeString(this.UNTERM_English_Short, dos);

				// String

				writeString(this.ISO4217_currency_alphabetic_code, dos);

				// String

				writeString(this.Small_Island_Developing_States__SIDS_, dos);

				// String

				writeString(this.UNTERM_Spanish_Short, dos);

				// String

				writeString(this.ISO4217_currency_numeric_code, dos);

				// String

				writeString(this.UNTERM_Chinese_Formal, dos);

				// String

				writeString(this.UNTERM_French_Formal, dos);

				// String

				writeString(this.UNTERM_Russian_Short, dos);

				// String

				writeString(this.M49, dos);

				// String

				writeString(this.Sub_region_Code, dos);

				// String

				writeString(this.Region_Code, dos);

				// String

				writeString(this.official_name_ar, dos);

				// String

				writeString(this.ISO4217_currency_minor_unit, dos);

				// String

				writeString(this.UNTERM_Arabic_Formal, dos);

				// String

				writeString(this.UNTERM_Chinese_Short, dos);

				// String

				writeString(this.Land_Locked_Developing_Countries__LLDC_, dos);

				// String

				writeString(this.Intermediate_Region_Name, dos);

				// String

				writeString(this.official_name_es, dos);

				// String

				writeString(this.UNTERM_English_Formal, dos);

				// String

				writeString(this.official_name_cn, dos);

				// String

				writeString(this.official_name_en, dos);

				// String

				writeString(this.ISO4217_currency_country_name, dos);

				// String

				writeString(this.Least_Developed_Countries__LDC_, dos);

				// String

				writeString(this.Region_Name, dos);

				// String

				writeString(this.UNTERM_Arabic_Short, dos);

				// String

				writeString(this.Sub_region_Name, dos);

				// String

				writeString(this.official_name_ru, dos);

				// String

				writeString(this.Global_Name, dos);

				// String

				writeString(this.Capital, dos);

				// String

				writeString(this.Continent, dos);

				// String

				writeString(this.TLD, dos);

				// String

				writeString(this.Languages, dos);

				// String

				writeString(this.Geoname_ID, dos);

				// String

				writeString(this.CLDR_display_name, dos);

				// String

				writeString(this.EDGAR, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FIFA=" + FIFA);
			sb.append(",Dial=" + Dial);
			sb.append(",ISO3166_1_Alpha_3=" + ISO3166_1_Alpha_3);
			sb.append(",MARC=" + MARC);
			sb.append(",is_independent=" + is_independent);
			sb.append(",ISO3166_1_numeric=" + ISO3166_1_numeric);
			sb.append(",GAUL=" + GAUL);
			sb.append(",FIPS=" + FIPS);
			sb.append(",WMO=" + WMO);
			sb.append(",ISO3166_1_Alpha_2=" + ISO3166_1_Alpha_2);
			sb.append(",ITU=" + ITU);
			sb.append(",IOC=" + IOC);
			sb.append(",DS=" + DS);
			sb.append(",UNTERM_Spanish_Formal=" + UNTERM_Spanish_Formal);
			sb.append(",Global_Code=" + Global_Code);
			sb.append(",Intermediate_Region_Code=" + Intermediate_Region_Code);
			sb.append(",official_name_fr=" + official_name_fr);
			sb.append(",UNTERM_French_Short=" + UNTERM_French_Short);
			sb.append(",ISO4217_currency_name=" + ISO4217_currency_name);
			sb.append(",Developed___Developing_Countries=" + Developed___Developing_Countries);
			sb.append(",UNTERM_Russian_Formal=" + UNTERM_Russian_Formal);
			sb.append(",UNTERM_English_Short=" + UNTERM_English_Short);
			sb.append(",ISO4217_currency_alphabetic_code=" + ISO4217_currency_alphabetic_code);
			sb.append(",Small_Island_Developing_States__SIDS_=" + Small_Island_Developing_States__SIDS_);
			sb.append(",UNTERM_Spanish_Short=" + UNTERM_Spanish_Short);
			sb.append(",ISO4217_currency_numeric_code=" + ISO4217_currency_numeric_code);
			sb.append(",UNTERM_Chinese_Formal=" + UNTERM_Chinese_Formal);
			sb.append(",UNTERM_French_Formal=" + UNTERM_French_Formal);
			sb.append(",UNTERM_Russian_Short=" + UNTERM_Russian_Short);
			sb.append(",M49=" + M49);
			sb.append(",Sub_region_Code=" + Sub_region_Code);
			sb.append(",Region_Code=" + Region_Code);
			sb.append(",official_name_ar=" + official_name_ar);
			sb.append(",ISO4217_currency_minor_unit=" + ISO4217_currency_minor_unit);
			sb.append(",UNTERM_Arabic_Formal=" + UNTERM_Arabic_Formal);
			sb.append(",UNTERM_Chinese_Short=" + UNTERM_Chinese_Short);
			sb.append(",Land_Locked_Developing_Countries__LLDC_=" + Land_Locked_Developing_Countries__LLDC_);
			sb.append(",Intermediate_Region_Name=" + Intermediate_Region_Name);
			sb.append(",official_name_es=" + official_name_es);
			sb.append(",UNTERM_English_Formal=" + UNTERM_English_Formal);
			sb.append(",official_name_cn=" + official_name_cn);
			sb.append(",official_name_en=" + official_name_en);
			sb.append(",ISO4217_currency_country_name=" + ISO4217_currency_country_name);
			sb.append(",Least_Developed_Countries__LDC_=" + Least_Developed_Countries__LDC_);
			sb.append(",Region_Name=" + Region_Name);
			sb.append(",UNTERM_Arabic_Short=" + UNTERM_Arabic_Short);
			sb.append(",Sub_region_Name=" + Sub_region_Name);
			sb.append(",official_name_ru=" + official_name_ru);
			sb.append(",Global_Name=" + Global_Name);
			sb.append(",Capital=" + Capital);
			sb.append(",Continent=" + Continent);
			sb.append(",TLD=" + TLD);
			sb.append(",Languages=" + Languages);
			sb.append(",Geoname_ID=" + Geoname_ID);
			sb.append(",CLDR_display_name=" + CLDR_display_name);
			sb.append(",EDGAR=" + EDGAR);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row10Struct row10 = new row10Struct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						"C:/BI/transparence-sante/data/rejects/adresses.csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
							fileName_tFileOutputDelimited_4.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);
				if (filetFileOutputDelimited_4.exists()) {
					isFileGenerated_tFileOutputDelimited_4 = false;
				}
				int nb_line_tFileOutputDelimited_4 = 0;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
																		 * Start field
																		 * tFileOutputDelimited_4:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_4 = null;

				outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, true), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
				resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tFilterRow_3 - inputs:(row3) outputs:(row2,row10,row2) | target
				// node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_1 - inputs:(row1,row2) outputs:(adresse)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct>getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tFilterRow_3 begin ] start
				 */

				ok_Hash.put("tFilterRow_3", false);
				start_Hash.put("tFilterRow_3", System.currentTimeMillis());

				currentComponent = "tFilterRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tFilterRow_3 = 0;

				int nb_line_tFilterRow_3 = 0;
				int nb_line_ok_tFilterRow_3 = 0;
				int nb_line_reject_tFilterRow_3 = 0;

				class Operator_tFilterRow_3 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_3(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /** Start field tFileInputDelimited_2:FILENAME */
						"C:/BI/transparence-sante/data/others/country-codes_csv.csv"/**
																					 * End field
																					 * tFileInputDelimited_2:FILENAME
																					 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0], "UTF-8");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),
											"UTF-8")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd("" + rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('"');

						csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_2.readNext()) {

								totalLinetFileInputDelimited_2++;

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
											: totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2
										? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0], "UTF-8");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2.setLineEnd("" + rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('"');

							csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 1; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_2 != 0 && csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {
						rowstate_tFileInputDelimited_2.reset();

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2.getValues();

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						row3 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row3 = new row3Struct();
						try {

							char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_2_ListType = ((String) ",").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row3.FIFA = null;

								row3.Dial = null;

								row3.ISO3166_1_Alpha_3 = null;

								row3.MARC = null;

								row3.is_independent = null;

								row3.ISO3166_1_numeric = null;

								row3.GAUL = null;

								row3.FIPS = null;

								row3.WMO = null;

								row3.ISO3166_1_Alpha_2 = null;

								row3.ITU = null;

								row3.IOC = null;

								row3.DS = null;

								row3.UNTERM_Spanish_Formal = null;

								row3.Global_Code = null;

								row3.Intermediate_Region_Code = null;

								row3.official_name_fr = null;

								row3.UNTERM_French_Short = null;

								row3.ISO4217_currency_name = null;

								row3.Developed___Developing_Countries = null;

								row3.UNTERM_Russian_Formal = null;

								row3.UNTERM_English_Short = null;

								row3.ISO4217_currency_alphabetic_code = null;

								row3.Small_Island_Developing_States__SIDS_ = null;

								row3.UNTERM_Spanish_Short = null;

								row3.ISO4217_currency_numeric_code = null;

								row3.UNTERM_Chinese_Formal = null;

								row3.UNTERM_French_Formal = null;

								row3.UNTERM_Russian_Short = null;

								row3.M49 = null;

								row3.Sub_region_Code = null;

								row3.Region_Code = null;

								row3.official_name_ar = null;

								row3.ISO4217_currency_minor_unit = null;

								row3.UNTERM_Arabic_Formal = null;

								row3.UNTERM_Chinese_Short = null;

								row3.Land_Locked_Developing_Countries__LLDC_ = null;

								row3.Intermediate_Region_Name = null;

								row3.official_name_es = null;

								row3.UNTERM_English_Formal = null;

								row3.official_name_cn = null;

								row3.official_name_en = null;

								row3.ISO4217_currency_country_name = null;

								row3.Least_Developed_Countries__LDC_ = null;

								row3.Region_Name = null;

								row3.UNTERM_Arabic_Short = null;

								row3.Sub_region_Name = null;

								row3.official_name_ru = null;

								row3.Global_Name = null;

								row3.Capital = null;

								row3.Continent = null;

								row3.TLD = null;

								row3.Languages = null;

								row3.Geoname_ID = null;

								row3.CLDR_display_name = null;

								row3.EDGAR = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.FIFA = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.FIFA = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.Dial = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.Dial = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 2;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.ISO3166_1_Alpha_3 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.ISO3166_1_Alpha_3 = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 3;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.MARC = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.MARC = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 4;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.is_independent = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.is_independent = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 5;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.ISO3166_1_numeric = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.ISO3166_1_numeric = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 6;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.GAUL = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.GAUL = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 7;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.FIPS = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.FIPS = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 8;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.WMO = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.WMO = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 9;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.ISO3166_1_Alpha_2 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.ISO3166_1_Alpha_2 = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 10;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.ITU = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.ITU = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 11;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.IOC = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.IOC = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 12;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.DS = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.DS = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 13;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.UNTERM_Spanish_Formal = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.UNTERM_Spanish_Formal = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 14;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.Global_Code = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.Global_Code = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 15;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.Intermediate_Region_Code = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.Intermediate_Region_Code = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 16;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.official_name_fr = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.official_name_fr = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 17;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.UNTERM_French_Short = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.UNTERM_French_Short = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 18;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.ISO4217_currency_name = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.ISO4217_currency_name = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 19;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.Developed___Developing_Countries = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.Developed___Developing_Countries = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 20;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.UNTERM_Russian_Formal = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.UNTERM_Russian_Formal = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 21;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.UNTERM_English_Short = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.UNTERM_English_Short = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 22;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.ISO4217_currency_alphabetic_code = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.ISO4217_currency_alphabetic_code = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 23;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.Small_Island_Developing_States__SIDS_ = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.Small_Island_Developing_States__SIDS_ = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 24;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.UNTERM_Spanish_Short = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.UNTERM_Spanish_Short = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 25;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.ISO4217_currency_numeric_code = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.ISO4217_currency_numeric_code = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 26;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.UNTERM_Chinese_Formal = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.UNTERM_Chinese_Formal = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 27;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.UNTERM_French_Formal = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.UNTERM_French_Formal = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 28;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.UNTERM_Russian_Short = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.UNTERM_Russian_Short = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 29;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.M49 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.M49 = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 30;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.Sub_region_Code = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.Sub_region_Code = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 31;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.Region_Code = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.Region_Code = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 32;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.official_name_ar = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.official_name_ar = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 33;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.ISO4217_currency_minor_unit = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.ISO4217_currency_minor_unit = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 34;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.UNTERM_Arabic_Formal = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.UNTERM_Arabic_Formal = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 35;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.UNTERM_Chinese_Short = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.UNTERM_Chinese_Short = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 36;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.Land_Locked_Developing_Countries__LLDC_ = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.Land_Locked_Developing_Countries__LLDC_ = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 37;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.Intermediate_Region_Name = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.Intermediate_Region_Name = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 38;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.official_name_es = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.official_name_es = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 39;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.UNTERM_English_Formal = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.UNTERM_English_Formal = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 40;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.official_name_cn = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.official_name_cn = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 41;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.official_name_en = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.official_name_en = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 42;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.ISO4217_currency_country_name = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.ISO4217_currency_country_name = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 43;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.Least_Developed_Countries__LDC_ = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.Least_Developed_Countries__LDC_ = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 44;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.Region_Name = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.Region_Name = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 45;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.UNTERM_Arabic_Short = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.UNTERM_Arabic_Short = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 46;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.Sub_region_Name = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.Sub_region_Name = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 47;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.official_name_ru = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.official_name_ru = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 48;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.Global_Name = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.Global_Name = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 49;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.Capital = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.Capital = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 50;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.Continent = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.Continent = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 51;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.TLD = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.TLD = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 52;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.Languages = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.Languages = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 53;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.Geoname_ID = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.Geoname_ID = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 54;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.CLDR_display_name = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.CLDR_display_name = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 55;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row3.EDGAR = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row3.EDGAR = null;

								}

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tFilterRow_3 main ] start
							 */

							currentComponent = "tFilterRow_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
							}

							row2 = null;
							row10 = null;
							row2 = null;
							Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("&&");
							ope_tFilterRow_3.matches(
									(row3.ISO3166_1_Alpha_2 == null ? false : row3.ISO3166_1_Alpha_2.length() > 0),
									" ISO3166_1_Alpha_2.length() > 0 failed");
							ope_tFilterRow_3.matches(
									(row3.official_name_fr == null ? false : row3.official_name_fr.length() > 0),
									" official_name_fr.length() > 0 failed");
							ope_tFilterRow_3.matches((// code sample : use row3 to define the condition.
// row3.columnName1.equals("foo") ||!(row3.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
							row3.ISO3166_1_Alpha_2 != null && row3.official_name_fr != null),
									"advanced condition failed");

							if (ope_tFilterRow_3.getMatchFlag()) {
								if (row2 == null) {
									row2 = new row2Struct();
								}
								row2.FIFA = row3.FIFA;
								row2.Dial = row3.Dial;
								row2.ISO3166_1_Alpha_3 = row3.ISO3166_1_Alpha_3;
								row2.MARC = row3.MARC;
								row2.is_independent = row3.is_independent;
								row2.ISO3166_1_numeric = row3.ISO3166_1_numeric;
								row2.GAUL = row3.GAUL;
								row2.FIPS = row3.FIPS;
								row2.WMO = row3.WMO;
								row2.ISO3166_1_Alpha_2 = row3.ISO3166_1_Alpha_2;
								row2.ITU = row3.ITU;
								row2.IOC = row3.IOC;
								row2.DS = row3.DS;
								row2.UNTERM_Spanish_Formal = row3.UNTERM_Spanish_Formal;
								row2.Global_Code = row3.Global_Code;
								row2.Intermediate_Region_Code = row3.Intermediate_Region_Code;
								row2.official_name_fr = row3.official_name_fr;
								row2.UNTERM_French_Short = row3.UNTERM_French_Short;
								row2.ISO4217_currency_name = row3.ISO4217_currency_name;
								row2.Developed___Developing_Countries = row3.Developed___Developing_Countries;
								row2.UNTERM_Russian_Formal = row3.UNTERM_Russian_Formal;
								row2.UNTERM_English_Short = row3.UNTERM_English_Short;
								row2.ISO4217_currency_alphabetic_code = row3.ISO4217_currency_alphabetic_code;
								row2.Small_Island_Developing_States__SIDS_ = row3.Small_Island_Developing_States__SIDS_;
								row2.UNTERM_Spanish_Short = row3.UNTERM_Spanish_Short;
								row2.ISO4217_currency_numeric_code = row3.ISO4217_currency_numeric_code;
								row2.UNTERM_Chinese_Formal = row3.UNTERM_Chinese_Formal;
								row2.UNTERM_French_Formal = row3.UNTERM_French_Formal;
								row2.UNTERM_Russian_Short = row3.UNTERM_Russian_Short;
								row2.M49 = row3.M49;
								row2.Sub_region_Code = row3.Sub_region_Code;
								row2.Region_Code = row3.Region_Code;
								row2.official_name_ar = row3.official_name_ar;
								row2.ISO4217_currency_minor_unit = row3.ISO4217_currency_minor_unit;
								row2.UNTERM_Arabic_Formal = row3.UNTERM_Arabic_Formal;
								row2.UNTERM_Chinese_Short = row3.UNTERM_Chinese_Short;
								row2.Land_Locked_Developing_Countries__LLDC_ = row3.Land_Locked_Developing_Countries__LLDC_;
								row2.Intermediate_Region_Name = row3.Intermediate_Region_Name;
								row2.official_name_es = row3.official_name_es;
								row2.UNTERM_English_Formal = row3.UNTERM_English_Formal;
								row2.official_name_cn = row3.official_name_cn;
								row2.official_name_en = row3.official_name_en;
								row2.ISO4217_currency_country_name = row3.ISO4217_currency_country_name;
								row2.Least_Developed_Countries__LDC_ = row3.Least_Developed_Countries__LDC_;
								row2.Region_Name = row3.Region_Name;
								row2.UNTERM_Arabic_Short = row3.UNTERM_Arabic_Short;
								row2.Sub_region_Name = row3.Sub_region_Name;
								row2.official_name_ru = row3.official_name_ru;
								row2.Global_Name = row3.Global_Name;
								row2.Capital = row3.Capital;
								row2.Continent = row3.Continent;
								row2.TLD = row3.TLD;
								row2.Languages = row3.Languages;
								row2.Geoname_ID = row3.Geoname_ID;
								row2.CLDR_display_name = row3.CLDR_display_name;
								row2.EDGAR = row3.EDGAR;
								if (row2 == null) {
									row2 = new row2Struct();
								}
								row2.FIFA = row3.FIFA;
								row2.Dial = row3.Dial;
								row2.ISO3166_1_Alpha_3 = row3.ISO3166_1_Alpha_3;
								row2.MARC = row3.MARC;
								row2.is_independent = row3.is_independent;
								row2.ISO3166_1_numeric = row3.ISO3166_1_numeric;
								row2.GAUL = row3.GAUL;
								row2.FIPS = row3.FIPS;
								row2.WMO = row3.WMO;
								row2.ISO3166_1_Alpha_2 = row3.ISO3166_1_Alpha_2;
								row2.ITU = row3.ITU;
								row2.IOC = row3.IOC;
								row2.DS = row3.DS;
								row2.UNTERM_Spanish_Formal = row3.UNTERM_Spanish_Formal;
								row2.Global_Code = row3.Global_Code;
								row2.Intermediate_Region_Code = row3.Intermediate_Region_Code;
								row2.official_name_fr = row3.official_name_fr;
								row2.UNTERM_French_Short = row3.UNTERM_French_Short;
								row2.ISO4217_currency_name = row3.ISO4217_currency_name;
								row2.Developed___Developing_Countries = row3.Developed___Developing_Countries;
								row2.UNTERM_Russian_Formal = row3.UNTERM_Russian_Formal;
								row2.UNTERM_English_Short = row3.UNTERM_English_Short;
								row2.ISO4217_currency_alphabetic_code = row3.ISO4217_currency_alphabetic_code;
								row2.Small_Island_Developing_States__SIDS_ = row3.Small_Island_Developing_States__SIDS_;
								row2.UNTERM_Spanish_Short = row3.UNTERM_Spanish_Short;
								row2.ISO4217_currency_numeric_code = row3.ISO4217_currency_numeric_code;
								row2.UNTERM_Chinese_Formal = row3.UNTERM_Chinese_Formal;
								row2.UNTERM_French_Formal = row3.UNTERM_French_Formal;
								row2.UNTERM_Russian_Short = row3.UNTERM_Russian_Short;
								row2.M49 = row3.M49;
								row2.Sub_region_Code = row3.Sub_region_Code;
								row2.Region_Code = row3.Region_Code;
								row2.official_name_ar = row3.official_name_ar;
								row2.ISO4217_currency_minor_unit = row3.ISO4217_currency_minor_unit;
								row2.UNTERM_Arabic_Formal = row3.UNTERM_Arabic_Formal;
								row2.UNTERM_Chinese_Short = row3.UNTERM_Chinese_Short;
								row2.Land_Locked_Developing_Countries__LLDC_ = row3.Land_Locked_Developing_Countries__LLDC_;
								row2.Intermediate_Region_Name = row3.Intermediate_Region_Name;
								row2.official_name_es = row3.official_name_es;
								row2.UNTERM_English_Formal = row3.UNTERM_English_Formal;
								row2.official_name_cn = row3.official_name_cn;
								row2.official_name_en = row3.official_name_en;
								row2.ISO4217_currency_country_name = row3.ISO4217_currency_country_name;
								row2.Least_Developed_Countries__LDC_ = row3.Least_Developed_Countries__LDC_;
								row2.Region_Name = row3.Region_Name;
								row2.UNTERM_Arabic_Short = row3.UNTERM_Arabic_Short;
								row2.Sub_region_Name = row3.Sub_region_Name;
								row2.official_name_ru = row3.official_name_ru;
								row2.Global_Name = row3.Global_Name;
								row2.Capital = row3.Capital;
								row2.Continent = row3.Continent;
								row2.TLD = row3.TLD;
								row2.Languages = row3.Languages;
								row2.Geoname_ID = row3.Geoname_ID;
								row2.CLDR_display_name = row3.CLDR_display_name;
								row2.EDGAR = row3.EDGAR;
								nb_line_ok_tFilterRow_3++;
							} else {
								if (row10 == null) {
									row10 = new row10Struct();
								}
								row10.FIFA = row3.FIFA;
								row10.Dial = row3.Dial;
								row10.ISO3166_1_Alpha_3 = row3.ISO3166_1_Alpha_3;
								row10.MARC = row3.MARC;
								row10.is_independent = row3.is_independent;
								row10.ISO3166_1_numeric = row3.ISO3166_1_numeric;
								row10.GAUL = row3.GAUL;
								row10.FIPS = row3.FIPS;
								row10.WMO = row3.WMO;
								row10.ISO3166_1_Alpha_2 = row3.ISO3166_1_Alpha_2;
								row10.ITU = row3.ITU;
								row10.IOC = row3.IOC;
								row10.DS = row3.DS;
								row10.UNTERM_Spanish_Formal = row3.UNTERM_Spanish_Formal;
								row10.Global_Code = row3.Global_Code;
								row10.Intermediate_Region_Code = row3.Intermediate_Region_Code;
								row10.official_name_fr = row3.official_name_fr;
								row10.UNTERM_French_Short = row3.UNTERM_French_Short;
								row10.ISO4217_currency_name = row3.ISO4217_currency_name;
								row10.Developed___Developing_Countries = row3.Developed___Developing_Countries;
								row10.UNTERM_Russian_Formal = row3.UNTERM_Russian_Formal;
								row10.UNTERM_English_Short = row3.UNTERM_English_Short;
								row10.ISO4217_currency_alphabetic_code = row3.ISO4217_currency_alphabetic_code;
								row10.Small_Island_Developing_States__SIDS_ = row3.Small_Island_Developing_States__SIDS_;
								row10.UNTERM_Spanish_Short = row3.UNTERM_Spanish_Short;
								row10.ISO4217_currency_numeric_code = row3.ISO4217_currency_numeric_code;
								row10.UNTERM_Chinese_Formal = row3.UNTERM_Chinese_Formal;
								row10.UNTERM_French_Formal = row3.UNTERM_French_Formal;
								row10.UNTERM_Russian_Short = row3.UNTERM_Russian_Short;
								row10.M49 = row3.M49;
								row10.Sub_region_Code = row3.Sub_region_Code;
								row10.Region_Code = row3.Region_Code;
								row10.official_name_ar = row3.official_name_ar;
								row10.ISO4217_currency_minor_unit = row3.ISO4217_currency_minor_unit;
								row10.UNTERM_Arabic_Formal = row3.UNTERM_Arabic_Formal;
								row10.UNTERM_Chinese_Short = row3.UNTERM_Chinese_Short;
								row10.Land_Locked_Developing_Countries__LLDC_ = row3.Land_Locked_Developing_Countries__LLDC_;
								row10.Intermediate_Region_Name = row3.Intermediate_Region_Name;
								row10.official_name_es = row3.official_name_es;
								row10.UNTERM_English_Formal = row3.UNTERM_English_Formal;
								row10.official_name_cn = row3.official_name_cn;
								row10.official_name_en = row3.official_name_en;
								row10.ISO4217_currency_country_name = row3.ISO4217_currency_country_name;
								row10.Least_Developed_Countries__LDC_ = row3.Least_Developed_Countries__LDC_;
								row10.Region_Name = row3.Region_Name;
								row10.UNTERM_Arabic_Short = row3.UNTERM_Arabic_Short;
								row10.Sub_region_Name = row3.Sub_region_Name;
								row10.official_name_ru = row3.official_name_ru;
								row10.Global_Name = row3.Global_Name;
								row10.Capital = row3.Capital;
								row10.Continent = row3.Continent;
								row10.TLD = row3.TLD;
								row10.Languages = row3.Languages;
								row10.Geoname_ID = row3.Geoname_ID;
								row10.CLDR_display_name = row3.CLDR_display_name;
								row10.EDGAR = row3.EDGAR;
								row10.errorMessage = ope_tFilterRow_3.getErrorMsg();
								nb_line_reject_tFilterRow_3++;
							}

							nb_line_tFilterRow_3++;

							tos_count_tFilterRow_3++;

							/**
							 * [tFilterRow_3 main ] stop
							 */

							/**
							 * [tFilterRow_3 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_3";

							/**
							 * [tFilterRow_3 process_data_begin ] stop
							 */
// Start of branch "row10"
							if (row10 != null) {

								/**
								 * [tFileOutputDelimited_4 main ] start
								 */

								currentComponent = "tFileOutputDelimited_4";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row10");
								}

								StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
								if (row10.FIFA != null) {
									sb_tFileOutputDelimited_4.append(row10.FIFA);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.Dial != null) {
									sb_tFileOutputDelimited_4.append(row10.Dial);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.ISO3166_1_Alpha_3 != null) {
									sb_tFileOutputDelimited_4.append(row10.ISO3166_1_Alpha_3);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.MARC != null) {
									sb_tFileOutputDelimited_4.append(row10.MARC);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.is_independent != null) {
									sb_tFileOutputDelimited_4.append(row10.is_independent);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.ISO3166_1_numeric != null) {
									sb_tFileOutputDelimited_4.append(row10.ISO3166_1_numeric);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.GAUL != null) {
									sb_tFileOutputDelimited_4.append(row10.GAUL);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.FIPS != null) {
									sb_tFileOutputDelimited_4.append(row10.FIPS);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.WMO != null) {
									sb_tFileOutputDelimited_4.append(row10.WMO);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.ISO3166_1_Alpha_2 != null) {
									sb_tFileOutputDelimited_4.append(row10.ISO3166_1_Alpha_2);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.ITU != null) {
									sb_tFileOutputDelimited_4.append(row10.ITU);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.IOC != null) {
									sb_tFileOutputDelimited_4.append(row10.IOC);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.DS != null) {
									sb_tFileOutputDelimited_4.append(row10.DS);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.UNTERM_Spanish_Formal != null) {
									sb_tFileOutputDelimited_4.append(row10.UNTERM_Spanish_Formal);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.Global_Code != null) {
									sb_tFileOutputDelimited_4.append(row10.Global_Code);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.Intermediate_Region_Code != null) {
									sb_tFileOutputDelimited_4.append(row10.Intermediate_Region_Code);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.official_name_fr != null) {
									sb_tFileOutputDelimited_4.append(row10.official_name_fr);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.UNTERM_French_Short != null) {
									sb_tFileOutputDelimited_4.append(row10.UNTERM_French_Short);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.ISO4217_currency_name != null) {
									sb_tFileOutputDelimited_4.append(row10.ISO4217_currency_name);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.Developed___Developing_Countries != null) {
									sb_tFileOutputDelimited_4.append(row10.Developed___Developing_Countries);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.UNTERM_Russian_Formal != null) {
									sb_tFileOutputDelimited_4.append(row10.UNTERM_Russian_Formal);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.UNTERM_English_Short != null) {
									sb_tFileOutputDelimited_4.append(row10.UNTERM_English_Short);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.ISO4217_currency_alphabetic_code != null) {
									sb_tFileOutputDelimited_4.append(row10.ISO4217_currency_alphabetic_code);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.Small_Island_Developing_States__SIDS_ != null) {
									sb_tFileOutputDelimited_4.append(row10.Small_Island_Developing_States__SIDS_);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.UNTERM_Spanish_Short != null) {
									sb_tFileOutputDelimited_4.append(row10.UNTERM_Spanish_Short);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.ISO4217_currency_numeric_code != null) {
									sb_tFileOutputDelimited_4.append(row10.ISO4217_currency_numeric_code);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.UNTERM_Chinese_Formal != null) {
									sb_tFileOutputDelimited_4.append(row10.UNTERM_Chinese_Formal);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.UNTERM_French_Formal != null) {
									sb_tFileOutputDelimited_4.append(row10.UNTERM_French_Formal);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.UNTERM_Russian_Short != null) {
									sb_tFileOutputDelimited_4.append(row10.UNTERM_Russian_Short);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.M49 != null) {
									sb_tFileOutputDelimited_4.append(row10.M49);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.Sub_region_Code != null) {
									sb_tFileOutputDelimited_4.append(row10.Sub_region_Code);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.Region_Code != null) {
									sb_tFileOutputDelimited_4.append(row10.Region_Code);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.official_name_ar != null) {
									sb_tFileOutputDelimited_4.append(row10.official_name_ar);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.ISO4217_currency_minor_unit != null) {
									sb_tFileOutputDelimited_4.append(row10.ISO4217_currency_minor_unit);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.UNTERM_Arabic_Formal != null) {
									sb_tFileOutputDelimited_4.append(row10.UNTERM_Arabic_Formal);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.UNTERM_Chinese_Short != null) {
									sb_tFileOutputDelimited_4.append(row10.UNTERM_Chinese_Short);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.Land_Locked_Developing_Countries__LLDC_ != null) {
									sb_tFileOutputDelimited_4.append(row10.Land_Locked_Developing_Countries__LLDC_);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.Intermediate_Region_Name != null) {
									sb_tFileOutputDelimited_4.append(row10.Intermediate_Region_Name);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.official_name_es != null) {
									sb_tFileOutputDelimited_4.append(row10.official_name_es);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.UNTERM_English_Formal != null) {
									sb_tFileOutputDelimited_4.append(row10.UNTERM_English_Formal);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.official_name_cn != null) {
									sb_tFileOutputDelimited_4.append(row10.official_name_cn);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.official_name_en != null) {
									sb_tFileOutputDelimited_4.append(row10.official_name_en);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.ISO4217_currency_country_name != null) {
									sb_tFileOutputDelimited_4.append(row10.ISO4217_currency_country_name);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.Least_Developed_Countries__LDC_ != null) {
									sb_tFileOutputDelimited_4.append(row10.Least_Developed_Countries__LDC_);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.Region_Name != null) {
									sb_tFileOutputDelimited_4.append(row10.Region_Name);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.UNTERM_Arabic_Short != null) {
									sb_tFileOutputDelimited_4.append(row10.UNTERM_Arabic_Short);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.Sub_region_Name != null) {
									sb_tFileOutputDelimited_4.append(row10.Sub_region_Name);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.official_name_ru != null) {
									sb_tFileOutputDelimited_4.append(row10.official_name_ru);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.Global_Name != null) {
									sb_tFileOutputDelimited_4.append(row10.Global_Name);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.Capital != null) {
									sb_tFileOutputDelimited_4.append(row10.Capital);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.Continent != null) {
									sb_tFileOutputDelimited_4.append(row10.Continent);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.TLD != null) {
									sb_tFileOutputDelimited_4.append(row10.TLD);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.Languages != null) {
									sb_tFileOutputDelimited_4.append(row10.Languages);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.Geoname_ID != null) {
									sb_tFileOutputDelimited_4.append(row10.Geoname_ID);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.CLDR_display_name != null) {
									sb_tFileOutputDelimited_4.append(row10.CLDR_display_name);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.EDGAR != null) {
									sb_tFileOutputDelimited_4.append(row10.EDGAR);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row10.errorMessage != null) {
									sb_tFileOutputDelimited_4.append(row10.errorMessage);
								}
								sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

								nb_line_tFileOutputDelimited_4++;
								resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

								outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());

								tos_count_tFileOutputDelimited_4++;

								/**
								 * [tFileOutputDelimited_4 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_4 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_4";

								/**
								 * [tFileOutputDelimited_4 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_4 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_4";

								/**
								 * [tFileOutputDelimited_4 process_data_end ] stop
								 */

							} // End of branch "row10"

// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tAdvancedHash_row2 main ] start
								 */

								currentComponent = "tAdvancedHash_row2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
								}

								row2Struct row2_HashRow = new row2Struct();

								row2_HashRow.FIFA = row2.FIFA;

								row2_HashRow.Dial = row2.Dial;

								row2_HashRow.ISO3166_1_Alpha_3 = row2.ISO3166_1_Alpha_3;

								row2_HashRow.MARC = row2.MARC;

								row2_HashRow.is_independent = row2.is_independent;

								row2_HashRow.ISO3166_1_numeric = row2.ISO3166_1_numeric;

								row2_HashRow.GAUL = row2.GAUL;

								row2_HashRow.FIPS = row2.FIPS;

								row2_HashRow.WMO = row2.WMO;

								row2_HashRow.ISO3166_1_Alpha_2 = row2.ISO3166_1_Alpha_2;

								row2_HashRow.ITU = row2.ITU;

								row2_HashRow.IOC = row2.IOC;

								row2_HashRow.DS = row2.DS;

								row2_HashRow.UNTERM_Spanish_Formal = row2.UNTERM_Spanish_Formal;

								row2_HashRow.Global_Code = row2.Global_Code;

								row2_HashRow.Intermediate_Region_Code = row2.Intermediate_Region_Code;

								row2_HashRow.official_name_fr = row2.official_name_fr;

								row2_HashRow.UNTERM_French_Short = row2.UNTERM_French_Short;

								row2_HashRow.ISO4217_currency_name = row2.ISO4217_currency_name;

								row2_HashRow.Developed___Developing_Countries = row2.Developed___Developing_Countries;

								row2_HashRow.UNTERM_Russian_Formal = row2.UNTERM_Russian_Formal;

								row2_HashRow.UNTERM_English_Short = row2.UNTERM_English_Short;

								row2_HashRow.ISO4217_currency_alphabetic_code = row2.ISO4217_currency_alphabetic_code;

								row2_HashRow.Small_Island_Developing_States__SIDS_ = row2.Small_Island_Developing_States__SIDS_;

								row2_HashRow.UNTERM_Spanish_Short = row2.UNTERM_Spanish_Short;

								row2_HashRow.ISO4217_currency_numeric_code = row2.ISO4217_currency_numeric_code;

								row2_HashRow.UNTERM_Chinese_Formal = row2.UNTERM_Chinese_Formal;

								row2_HashRow.UNTERM_French_Formal = row2.UNTERM_French_Formal;

								row2_HashRow.UNTERM_Russian_Short = row2.UNTERM_Russian_Short;

								row2_HashRow.M49 = row2.M49;

								row2_HashRow.Sub_region_Code = row2.Sub_region_Code;

								row2_HashRow.Region_Code = row2.Region_Code;

								row2_HashRow.official_name_ar = row2.official_name_ar;

								row2_HashRow.ISO4217_currency_minor_unit = row2.ISO4217_currency_minor_unit;

								row2_HashRow.UNTERM_Arabic_Formal = row2.UNTERM_Arabic_Formal;

								row2_HashRow.UNTERM_Chinese_Short = row2.UNTERM_Chinese_Short;

								row2_HashRow.Land_Locked_Developing_Countries__LLDC_ = row2.Land_Locked_Developing_Countries__LLDC_;

								row2_HashRow.Intermediate_Region_Name = row2.Intermediate_Region_Name;

								row2_HashRow.official_name_es = row2.official_name_es;

								row2_HashRow.UNTERM_English_Formal = row2.UNTERM_English_Formal;

								row2_HashRow.official_name_cn = row2.official_name_cn;

								row2_HashRow.official_name_en = row2.official_name_en;

								row2_HashRow.ISO4217_currency_country_name = row2.ISO4217_currency_country_name;

								row2_HashRow.Least_Developed_Countries__LDC_ = row2.Least_Developed_Countries__LDC_;

								row2_HashRow.Region_Name = row2.Region_Name;

								row2_HashRow.UNTERM_Arabic_Short = row2.UNTERM_Arabic_Short;

								row2_HashRow.Sub_region_Name = row2.Sub_region_Name;

								row2_HashRow.official_name_ru = row2.official_name_ru;

								row2_HashRow.Global_Name = row2.Global_Name;

								row2_HashRow.Capital = row2.Capital;

								row2_HashRow.Continent = row2.Continent;

								row2_HashRow.TLD = row2.TLD;

								row2_HashRow.Languages = row2.Languages;

								row2_HashRow.Geoname_ID = row2.Geoname_ID;

								row2_HashRow.CLDR_display_name = row2.CLDR_display_name;

								row2_HashRow.EDGAR = row2.EDGAR;

								tHash_Lookup_row2.put(row2_HashRow);

								tos_count_tAdvancedHash_row2++;

								/**
								 * [tAdvancedHash_row2 main ] stop
								 */

								/**
								 * [tAdvancedHash_row2 process_data_begin ] start
								 */

								currentComponent = "tAdvancedHash_row2";

								/**
								 * [tAdvancedHash_row2 process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_row2 process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_row2";

								/**
								 * [tAdvancedHash_row2 process_data_end ] stop
								 */

							} // End of branch "row2"

							/**
							 * [tFilterRow_3 process_data_end ] start
							 */

							currentComponent = "tFilterRow_3";

							/**
							 * [tFilterRow_3 process_data_end ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", nb_line_tFileInputDelimited_2);
					}

				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tFilterRow_3 end ] start
				 */

				currentComponent = "tFilterRow_3";

				globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tFilterRow_3", true);
				end_Hash.put("tFilterRow_3", System.currentTimeMillis());

				/**
				 * [tFilterRow_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (outtFileOutputDelimited_4 != null) {
					outtFileOutputDelimited_4.flush();
					outtFileOutputDelimited_4.close();
				}

				globalMap.put("tFileOutputDelimited_4_NB_LINE", nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tFilterRow_3 finally ] start
				 */

				currentComponent = "tFilterRow_3";

				/**
				 * [tFilterRow_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_4");
					if (outtFileOutputDelimited_4 != null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final adresse_dim adresse_dimClass = new adresse_dim();

		int exitCode = adresse_dimClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = adresse_dim.class.getClassLoader().getResourceAsStream(
					"transparence_sante_bi/adresse_dim_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = adresse_dim.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : adresse_dim");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 270495 characters generated by Talend Open Studio for Data Integration on the
 * 31 janvier 2021 18:29:37 CET
 ************************************************************************************************/