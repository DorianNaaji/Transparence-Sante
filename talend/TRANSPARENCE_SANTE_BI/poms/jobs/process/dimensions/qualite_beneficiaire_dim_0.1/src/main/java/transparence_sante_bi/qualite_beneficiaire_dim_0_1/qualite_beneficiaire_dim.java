// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package transparence_sante_bi.qualite_beneficiaire_dim_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: qualite_beneficiaire_dim Purpose: Remplir la dimension de qualite des
 * beneficiaires<br>
 * Description: Les bénéficiaires sont liés à une qualité. Voir doc
 * https://github.com/DorianNaaji/transparence-sante <br>
 * 
 * @author haytham.elghazel@univ-lyon1.fr
 * @version 7.3.1.20200219_1130
 * @status DEV
 */
public class qualite_beneficiaire_dim implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "qualite_beneficiaire_dim";
	private final String projectName = "TRANSPARENCE_SANTE_BI";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					qualite_beneficiaire_dim.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(qualite_beneficiaire_dim.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_qualites_conventions_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_qualites_remunerations_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class qualitesStruct implements routines.system.IPersistableRow<qualitesStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String qualite_beneficiaire_id;

		public String getQualite_beneficiaire_id() {
			return this.qualite_beneficiaire_id;
		}

		public String nom_qualite_beneficiaire;

		public String getNom_qualite_beneficiaire() {
			return this.nom_qualite_beneficiaire;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.qualite_beneficiaire_id == null) ? 0 : this.qualite_beneficiaire_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final qualitesStruct other = (qualitesStruct) obj;

			if (this.qualite_beneficiaire_id == null) {
				if (other.qualite_beneficiaire_id != null)
					return false;

			} else if (!this.qualite_beneficiaire_id.equals(other.qualite_beneficiaire_id))

				return false;

			return true;
		}

		public void copyDataTo(qualitesStruct other) {

			other.qualite_beneficiaire_id = this.qualite_beneficiaire_id;
			other.nom_qualite_beneficiaire = this.nom_qualite_beneficiaire;

		}

		public void copyKeysDataTo(qualitesStruct other) {

			other.qualite_beneficiaire_id = this.qualite_beneficiaire_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim) {

				try {

					int length = 0;

					this.qualite_beneficiaire_id = readString(dis);

					this.nom_qualite_beneficiaire = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.qualite_beneficiaire_id, dos);

				// String

				writeString(this.nom_qualite_beneficiaire, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("qualite_beneficiaire_id=" + qualite_beneficiaire_id);
			sb.append(",nom_qualite_beneficiaire=" + nom_qualite_beneficiaire);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(qualitesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.qualite_beneficiaire_id, other.qualite_beneficiaire_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class qualites_avantagesStruct implements routines.system.IPersistableRow<qualites_avantagesStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String denomination_sociale;

		public String getDenomination_sociale() {
			return this.denomination_sociale;
		}

		public String ligne_identifiant;

		public String getLigne_identifiant() {
			return this.ligne_identifiant;
		}

		public Character ligne_rectification;

		public Character getLigne_rectification() {
			return this.ligne_rectification;
		}

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String categorie;

		public String getCategorie() {
			return this.categorie;
		}

		public String benef_nom;

		public String getBenef_nom() {
			return this.benef_nom;
		}

		public String benef_prenom;

		public String getBenef_prenom() {
			return this.benef_prenom;
		}

		public String benef_qualite_code;

		public String getBenef_qualite_code() {
			return this.benef_qualite_code;
		}

		public String qualite;

		public String getQualite() {
			return this.qualite;
		}

		public String benef_adresse1;

		public String getBenef_adresse1() {
			return this.benef_adresse1;
		}

		public String benef_adresse2;

		public String getBenef_adresse2() {
			return this.benef_adresse2;
		}

		public String benef_adresse3;

		public String getBenef_adresse3() {
			return this.benef_adresse3;
		}

		public String benef_adresse4;

		public String getBenef_adresse4() {
			return this.benef_adresse4;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_ville;

		public String getBenef_ville() {
			return this.benef_ville;
		}

		public String benef_pays_code;

		public String getBenef_pays_code() {
			return this.benef_pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String benef_titre_code;

		public String getBenef_titre_code() {
			return this.benef_titre_code;
		}

		public String benef_titre_libelle;

		public String getBenef_titre_libelle() {
			return this.benef_titre_libelle;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_speicalite_libelle;

		public String getBenef_speicalite_libelle() {
			return this.benef_speicalite_libelle;
		}

		public String benef_identifiant_type_code;

		public String getBenef_identifiant_type_code() {
			return this.benef_identifiant_type_code;
		}

		public String identifiant_type;

		public String getIdentifiant_type() {
			return this.identifiant_type;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String benef_etablissement;

		public String getBenef_etablissement() {
			return this.benef_etablissement;
		}

		public String benef_etablissement_codepostal;

		public String getBenef_etablissement_codepostal() {
			return this.benef_etablissement_codepostal;
		}

		public String benef_etablissement_ville;

		public String getBenef_etablissement_ville() {
			return this.benef_etablissement_ville;
		}

		public String benef_denomination_sociale;

		public String getBenef_denomination_sociale() {
			return this.benef_denomination_sociale;
		}

		public String benef_objet_social;

		public String getBenef_objet_social() {
			return this.benef_objet_social;
		}

		public String ligne_type;

		public String getLigne_type() {
			return this.ligne_type;
		}

		public String avant_date_signature;

		public String getAvant_date_signature() {
			return this.avant_date_signature;
		}

		public Integer avant_montant_ttc;

		public Integer getAvant_montant_ttc() {
			return this.avant_montant_ttc;
		}

		public String avant_nature;

		public String getAvant_nature() {
			return this.avant_nature;
		}

		public String avant_convention_lie;

		public String getAvant_convention_lie() {
			return this.avant_convention_lie;
		}

		public String semestre;

		public String getSemestre() {
			return this.semestre;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim) {

				try {

					int length = 0;

					this.entreprise_identifiant = readString(dis);

					this.denomination_sociale = readString(dis);

					this.ligne_identifiant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ligne_rectification = null;
					} else {
						this.ligne_rectification = dis.readChar();
					}

					this.benef_categorie_code = readString(dis);

					this.categorie = readString(dis);

					this.benef_nom = readString(dis);

					this.benef_prenom = readString(dis);

					this.benef_qualite_code = readString(dis);

					this.qualite = readString(dis);

					this.benef_adresse1 = readString(dis);

					this.benef_adresse2 = readString(dis);

					this.benef_adresse3 = readString(dis);

					this.benef_adresse4 = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_ville = readString(dis);

					this.benef_pays_code = readString(dis);

					this.pays = readString(dis);

					this.benef_titre_code = readString(dis);

					this.benef_titre_libelle = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_speicalite_libelle = readString(dis);

					this.benef_identifiant_type_code = readString(dis);

					this.identifiant_type = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.benef_etablissement = readString(dis);

					this.benef_etablissement_codepostal = readString(dis);

					this.benef_etablissement_ville = readString(dis);

					this.benef_denomination_sociale = readString(dis);

					this.benef_objet_social = readString(dis);

					this.ligne_type = readString(dis);

					this.avant_date_signature = readString(dis);

					this.avant_montant_ttc = readInteger(dis);

					this.avant_nature = readString(dis);

					this.avant_convention_lie = readString(dis);

					this.semestre = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entreprise_identifiant, dos);

				// String

				writeString(this.denomination_sociale, dos);

				// String

				writeString(this.ligne_identifiant, dos);

				// Character

				if (this.ligne_rectification == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.ligne_rectification);
				}

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.categorie, dos);

				// String

				writeString(this.benef_nom, dos);

				// String

				writeString(this.benef_prenom, dos);

				// String

				writeString(this.benef_qualite_code, dos);

				// String

				writeString(this.qualite, dos);

				// String

				writeString(this.benef_adresse1, dos);

				// String

				writeString(this.benef_adresse2, dos);

				// String

				writeString(this.benef_adresse3, dos);

				// String

				writeString(this.benef_adresse4, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_ville, dos);

				// String

				writeString(this.benef_pays_code, dos);

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.benef_titre_code, dos);

				// String

				writeString(this.benef_titre_libelle, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_speicalite_libelle, dos);

				// String

				writeString(this.benef_identifiant_type_code, dos);

				// String

				writeString(this.identifiant_type, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.benef_etablissement, dos);

				// String

				writeString(this.benef_etablissement_codepostal, dos);

				// String

				writeString(this.benef_etablissement_ville, dos);

				// String

				writeString(this.benef_denomination_sociale, dos);

				// String

				writeString(this.benef_objet_social, dos);

				// String

				writeString(this.ligne_type, dos);

				// String

				writeString(this.avant_date_signature, dos);

				// Integer

				writeInteger(this.avant_montant_ttc, dos);

				// String

				writeString(this.avant_nature, dos);

				// String

				writeString(this.avant_convention_lie, dos);

				// String

				writeString(this.semestre, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",denomination_sociale=" + denomination_sociale);
			sb.append(",ligne_identifiant=" + ligne_identifiant);
			sb.append(",ligne_rectification=" + String.valueOf(ligne_rectification));
			sb.append(",benef_categorie_code=" + benef_categorie_code);
			sb.append(",categorie=" + categorie);
			sb.append(",benef_nom=" + benef_nom);
			sb.append(",benef_prenom=" + benef_prenom);
			sb.append(",benef_qualite_code=" + benef_qualite_code);
			sb.append(",qualite=" + qualite);
			sb.append(",benef_adresse1=" + benef_adresse1);
			sb.append(",benef_adresse2=" + benef_adresse2);
			sb.append(",benef_adresse3=" + benef_adresse3);
			sb.append(",benef_adresse4=" + benef_adresse4);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_ville=" + benef_ville);
			sb.append(",benef_pays_code=" + benef_pays_code);
			sb.append(",pays=" + pays);
			sb.append(",benef_titre_code=" + benef_titre_code);
			sb.append(",benef_titre_libelle=" + benef_titre_libelle);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_speicalite_libelle=" + benef_speicalite_libelle);
			sb.append(",benef_identifiant_type_code=" + benef_identifiant_type_code);
			sb.append(",identifiant_type=" + identifiant_type);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",benef_etablissement=" + benef_etablissement);
			sb.append(",benef_etablissement_codepostal=" + benef_etablissement_codepostal);
			sb.append(",benef_etablissement_ville=" + benef_etablissement_ville);
			sb.append(",benef_denomination_sociale=" + benef_denomination_sociale);
			sb.append(",benef_objet_social=" + benef_objet_social);
			sb.append(",ligne_type=" + ligne_type);
			sb.append(",avant_date_signature=" + avant_date_signature);
			sb.append(",avant_montant_ttc=" + String.valueOf(avant_montant_ttc));
			sb.append(",avant_nature=" + avant_nature);
			sb.append(",avant_convention_lie=" + avant_convention_lie);
			sb.append(",semestre=" + semestre);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(qualites_avantagesStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class avantagesStruct implements routines.system.IPersistableRow<avantagesStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String denomination_sociale;

		public String getDenomination_sociale() {
			return this.denomination_sociale;
		}

		public String ligne_identifiant;

		public String getLigne_identifiant() {
			return this.ligne_identifiant;
		}

		public Character ligne_rectification;

		public Character getLigne_rectification() {
			return this.ligne_rectification;
		}

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String categorie;

		public String getCategorie() {
			return this.categorie;
		}

		public String benef_nom;

		public String getBenef_nom() {
			return this.benef_nom;
		}

		public String benef_prenom;

		public String getBenef_prenom() {
			return this.benef_prenom;
		}

		public String benef_qualite_code;

		public String getBenef_qualite_code() {
			return this.benef_qualite_code;
		}

		public String qualite;

		public String getQualite() {
			return this.qualite;
		}

		public String benef_adresse1;

		public String getBenef_adresse1() {
			return this.benef_adresse1;
		}

		public String benef_adresse2;

		public String getBenef_adresse2() {
			return this.benef_adresse2;
		}

		public String benef_adresse3;

		public String getBenef_adresse3() {
			return this.benef_adresse3;
		}

		public String benef_adresse4;

		public String getBenef_adresse4() {
			return this.benef_adresse4;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_ville;

		public String getBenef_ville() {
			return this.benef_ville;
		}

		public String benef_pays_code;

		public String getBenef_pays_code() {
			return this.benef_pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String benef_titre_code;

		public String getBenef_titre_code() {
			return this.benef_titre_code;
		}

		public String benef_titre_libelle;

		public String getBenef_titre_libelle() {
			return this.benef_titre_libelle;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_speicalite_libelle;

		public String getBenef_speicalite_libelle() {
			return this.benef_speicalite_libelle;
		}

		public String benef_identifiant_type_code;

		public String getBenef_identifiant_type_code() {
			return this.benef_identifiant_type_code;
		}

		public String identifiant_type;

		public String getIdentifiant_type() {
			return this.identifiant_type;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String benef_etablissement;

		public String getBenef_etablissement() {
			return this.benef_etablissement;
		}

		public String benef_etablissement_codepostal;

		public String getBenef_etablissement_codepostal() {
			return this.benef_etablissement_codepostal;
		}

		public String benef_etablissement_ville;

		public String getBenef_etablissement_ville() {
			return this.benef_etablissement_ville;
		}

		public String benef_denomination_sociale;

		public String getBenef_denomination_sociale() {
			return this.benef_denomination_sociale;
		}

		public String benef_objet_social;

		public String getBenef_objet_social() {
			return this.benef_objet_social;
		}

		public String ligne_type;

		public String getLigne_type() {
			return this.ligne_type;
		}

		public String avant_date_signature;

		public String getAvant_date_signature() {
			return this.avant_date_signature;
		}

		public Integer avant_montant_ttc;

		public Integer getAvant_montant_ttc() {
			return this.avant_montant_ttc;
		}

		public String avant_nature;

		public String getAvant_nature() {
			return this.avant_nature;
		}

		public String avant_convention_lie;

		public String getAvant_convention_lie() {
			return this.avant_convention_lie;
		}

		public String semestre;

		public String getSemestre() {
			return this.semestre;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim) {

				try {

					int length = 0;

					this.entreprise_identifiant = readString(dis);

					this.denomination_sociale = readString(dis);

					this.ligne_identifiant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ligne_rectification = null;
					} else {
						this.ligne_rectification = dis.readChar();
					}

					this.benef_categorie_code = readString(dis);

					this.categorie = readString(dis);

					this.benef_nom = readString(dis);

					this.benef_prenom = readString(dis);

					this.benef_qualite_code = readString(dis);

					this.qualite = readString(dis);

					this.benef_adresse1 = readString(dis);

					this.benef_adresse2 = readString(dis);

					this.benef_adresse3 = readString(dis);

					this.benef_adresse4 = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_ville = readString(dis);

					this.benef_pays_code = readString(dis);

					this.pays = readString(dis);

					this.benef_titre_code = readString(dis);

					this.benef_titre_libelle = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_speicalite_libelle = readString(dis);

					this.benef_identifiant_type_code = readString(dis);

					this.identifiant_type = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.benef_etablissement = readString(dis);

					this.benef_etablissement_codepostal = readString(dis);

					this.benef_etablissement_ville = readString(dis);

					this.benef_denomination_sociale = readString(dis);

					this.benef_objet_social = readString(dis);

					this.ligne_type = readString(dis);

					this.avant_date_signature = readString(dis);

					this.avant_montant_ttc = readInteger(dis);

					this.avant_nature = readString(dis);

					this.avant_convention_lie = readString(dis);

					this.semestre = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entreprise_identifiant, dos);

				// String

				writeString(this.denomination_sociale, dos);

				// String

				writeString(this.ligne_identifiant, dos);

				// Character

				if (this.ligne_rectification == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.ligne_rectification);
				}

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.categorie, dos);

				// String

				writeString(this.benef_nom, dos);

				// String

				writeString(this.benef_prenom, dos);

				// String

				writeString(this.benef_qualite_code, dos);

				// String

				writeString(this.qualite, dos);

				// String

				writeString(this.benef_adresse1, dos);

				// String

				writeString(this.benef_adresse2, dos);

				// String

				writeString(this.benef_adresse3, dos);

				// String

				writeString(this.benef_adresse4, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_ville, dos);

				// String

				writeString(this.benef_pays_code, dos);

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.benef_titre_code, dos);

				// String

				writeString(this.benef_titre_libelle, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_speicalite_libelle, dos);

				// String

				writeString(this.benef_identifiant_type_code, dos);

				// String

				writeString(this.identifiant_type, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.benef_etablissement, dos);

				// String

				writeString(this.benef_etablissement_codepostal, dos);

				// String

				writeString(this.benef_etablissement_ville, dos);

				// String

				writeString(this.benef_denomination_sociale, dos);

				// String

				writeString(this.benef_objet_social, dos);

				// String

				writeString(this.ligne_type, dos);

				// String

				writeString(this.avant_date_signature, dos);

				// Integer

				writeInteger(this.avant_montant_ttc, dos);

				// String

				writeString(this.avant_nature, dos);

				// String

				writeString(this.avant_convention_lie, dos);

				// String

				writeString(this.semestre, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",denomination_sociale=" + denomination_sociale);
			sb.append(",ligne_identifiant=" + ligne_identifiant);
			sb.append(",ligne_rectification=" + String.valueOf(ligne_rectification));
			sb.append(",benef_categorie_code=" + benef_categorie_code);
			sb.append(",categorie=" + categorie);
			sb.append(",benef_nom=" + benef_nom);
			sb.append(",benef_prenom=" + benef_prenom);
			sb.append(",benef_qualite_code=" + benef_qualite_code);
			sb.append(",qualite=" + qualite);
			sb.append(",benef_adresse1=" + benef_adresse1);
			sb.append(",benef_adresse2=" + benef_adresse2);
			sb.append(",benef_adresse3=" + benef_adresse3);
			sb.append(",benef_adresse4=" + benef_adresse4);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_ville=" + benef_ville);
			sb.append(",benef_pays_code=" + benef_pays_code);
			sb.append(",pays=" + pays);
			sb.append(",benef_titre_code=" + benef_titre_code);
			sb.append(",benef_titre_libelle=" + benef_titre_libelle);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_speicalite_libelle=" + benef_speicalite_libelle);
			sb.append(",benef_identifiant_type_code=" + benef_identifiant_type_code);
			sb.append(",identifiant_type=" + identifiant_type);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",benef_etablissement=" + benef_etablissement);
			sb.append(",benef_etablissement_codepostal=" + benef_etablissement_codepostal);
			sb.append(",benef_etablissement_ville=" + benef_etablissement_ville);
			sb.append(",benef_denomination_sociale=" + benef_denomination_sociale);
			sb.append(",benef_objet_social=" + benef_objet_social);
			sb.append(",ligne_type=" + ligne_type);
			sb.append(",avant_date_signature=" + avant_date_signature);
			sb.append(",avant_montant_ttc=" + String.valueOf(avant_montant_ttc));
			sb.append(",avant_nature=" + avant_nature);
			sb.append(",avant_convention_lie=" + avant_convention_lie);
			sb.append(",semestre=" + semestre);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(avantagesStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String denomination_sociale;

		public String getDenomination_sociale() {
			return this.denomination_sociale;
		}

		public String ligne_identifiant;

		public String getLigne_identifiant() {
			return this.ligne_identifiant;
		}

		public Character ligne_rectification;

		public Character getLigne_rectification() {
			return this.ligne_rectification;
		}

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String categorie;

		public String getCategorie() {
			return this.categorie;
		}

		public String benef_nom;

		public String getBenef_nom() {
			return this.benef_nom;
		}

		public String benef_prenom;

		public String getBenef_prenom() {
			return this.benef_prenom;
		}

		public String benef_qualite_code;

		public String getBenef_qualite_code() {
			return this.benef_qualite_code;
		}

		public String qualite;

		public String getQualite() {
			return this.qualite;
		}

		public String benef_adresse1;

		public String getBenef_adresse1() {
			return this.benef_adresse1;
		}

		public String benef_adresse2;

		public String getBenef_adresse2() {
			return this.benef_adresse2;
		}

		public String benef_adresse3;

		public String getBenef_adresse3() {
			return this.benef_adresse3;
		}

		public String benef_adresse4;

		public String getBenef_adresse4() {
			return this.benef_adresse4;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_ville;

		public String getBenef_ville() {
			return this.benef_ville;
		}

		public String benef_pays_code;

		public String getBenef_pays_code() {
			return this.benef_pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String benef_titre_code;

		public String getBenef_titre_code() {
			return this.benef_titre_code;
		}

		public String benef_titre_libelle;

		public String getBenef_titre_libelle() {
			return this.benef_titre_libelle;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_speicalite_libelle;

		public String getBenef_speicalite_libelle() {
			return this.benef_speicalite_libelle;
		}

		public String benef_identifiant_type_code;

		public String getBenef_identifiant_type_code() {
			return this.benef_identifiant_type_code;
		}

		public String identifiant_type;

		public String getIdentifiant_type() {
			return this.identifiant_type;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String benef_etablissement;

		public String getBenef_etablissement() {
			return this.benef_etablissement;
		}

		public String benef_etablissement_codepostal;

		public String getBenef_etablissement_codepostal() {
			return this.benef_etablissement_codepostal;
		}

		public String benef_etablissement_ville;

		public String getBenef_etablissement_ville() {
			return this.benef_etablissement_ville;
		}

		public String benef_denomination_sociale;

		public String getBenef_denomination_sociale() {
			return this.benef_denomination_sociale;
		}

		public String benef_objet_social;

		public String getBenef_objet_social() {
			return this.benef_objet_social;
		}

		public String ligne_type;

		public String getLigne_type() {
			return this.ligne_type;
		}

		public String avant_date_signature;

		public String getAvant_date_signature() {
			return this.avant_date_signature;
		}

		public Integer avant_montant_ttc;

		public Integer getAvant_montant_ttc() {
			return this.avant_montant_ttc;
		}

		public String avant_nature;

		public String getAvant_nature() {
			return this.avant_nature;
		}

		public String avant_convention_lie;

		public String getAvant_convention_lie() {
			return this.avant_convention_lie;
		}

		public String semestre;

		public String getSemestre() {
			return this.semestre;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim) {

				try {

					int length = 0;

					this.entreprise_identifiant = readString(dis);

					this.denomination_sociale = readString(dis);

					this.ligne_identifiant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ligne_rectification = null;
					} else {
						this.ligne_rectification = dis.readChar();
					}

					this.benef_categorie_code = readString(dis);

					this.categorie = readString(dis);

					this.benef_nom = readString(dis);

					this.benef_prenom = readString(dis);

					this.benef_qualite_code = readString(dis);

					this.qualite = readString(dis);

					this.benef_adresse1 = readString(dis);

					this.benef_adresse2 = readString(dis);

					this.benef_adresse3 = readString(dis);

					this.benef_adresse4 = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_ville = readString(dis);

					this.benef_pays_code = readString(dis);

					this.pays = readString(dis);

					this.benef_titre_code = readString(dis);

					this.benef_titre_libelle = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_speicalite_libelle = readString(dis);

					this.benef_identifiant_type_code = readString(dis);

					this.identifiant_type = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.benef_etablissement = readString(dis);

					this.benef_etablissement_codepostal = readString(dis);

					this.benef_etablissement_ville = readString(dis);

					this.benef_denomination_sociale = readString(dis);

					this.benef_objet_social = readString(dis);

					this.ligne_type = readString(dis);

					this.avant_date_signature = readString(dis);

					this.avant_montant_ttc = readInteger(dis);

					this.avant_nature = readString(dis);

					this.avant_convention_lie = readString(dis);

					this.semestre = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entreprise_identifiant, dos);

				// String

				writeString(this.denomination_sociale, dos);

				// String

				writeString(this.ligne_identifiant, dos);

				// Character

				if (this.ligne_rectification == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.ligne_rectification);
				}

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.categorie, dos);

				// String

				writeString(this.benef_nom, dos);

				// String

				writeString(this.benef_prenom, dos);

				// String

				writeString(this.benef_qualite_code, dos);

				// String

				writeString(this.qualite, dos);

				// String

				writeString(this.benef_adresse1, dos);

				// String

				writeString(this.benef_adresse2, dos);

				// String

				writeString(this.benef_adresse3, dos);

				// String

				writeString(this.benef_adresse4, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_ville, dos);

				// String

				writeString(this.benef_pays_code, dos);

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.benef_titre_code, dos);

				// String

				writeString(this.benef_titre_libelle, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_speicalite_libelle, dos);

				// String

				writeString(this.benef_identifiant_type_code, dos);

				// String

				writeString(this.identifiant_type, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.benef_etablissement, dos);

				// String

				writeString(this.benef_etablissement_codepostal, dos);

				// String

				writeString(this.benef_etablissement_ville, dos);

				// String

				writeString(this.benef_denomination_sociale, dos);

				// String

				writeString(this.benef_objet_social, dos);

				// String

				writeString(this.ligne_type, dos);

				// String

				writeString(this.avant_date_signature, dos);

				// Integer

				writeInteger(this.avant_montant_ttc, dos);

				// String

				writeString(this.avant_nature, dos);

				// String

				writeString(this.avant_convention_lie, dos);

				// String

				writeString(this.semestre, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",denomination_sociale=" + denomination_sociale);
			sb.append(",ligne_identifiant=" + ligne_identifiant);
			sb.append(",ligne_rectification=" + String.valueOf(ligne_rectification));
			sb.append(",benef_categorie_code=" + benef_categorie_code);
			sb.append(",categorie=" + categorie);
			sb.append(",benef_nom=" + benef_nom);
			sb.append(",benef_prenom=" + benef_prenom);
			sb.append(",benef_qualite_code=" + benef_qualite_code);
			sb.append(",qualite=" + qualite);
			sb.append(",benef_adresse1=" + benef_adresse1);
			sb.append(",benef_adresse2=" + benef_adresse2);
			sb.append(",benef_adresse3=" + benef_adresse3);
			sb.append(",benef_adresse4=" + benef_adresse4);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_ville=" + benef_ville);
			sb.append(",benef_pays_code=" + benef_pays_code);
			sb.append(",pays=" + pays);
			sb.append(",benef_titre_code=" + benef_titre_code);
			sb.append(",benef_titre_libelle=" + benef_titre_libelle);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_speicalite_libelle=" + benef_speicalite_libelle);
			sb.append(",benef_identifiant_type_code=" + benef_identifiant_type_code);
			sb.append(",identifiant_type=" + identifiant_type);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",benef_etablissement=" + benef_etablissement);
			sb.append(",benef_etablissement_codepostal=" + benef_etablissement_codepostal);
			sb.append(",benef_etablissement_ville=" + benef_etablissement_ville);
			sb.append(",benef_denomination_sociale=" + benef_denomination_sociale);
			sb.append(",benef_objet_social=" + benef_objet_social);
			sb.append(",ligne_type=" + ligne_type);
			sb.append(",avant_date_signature=" + avant_date_signature);
			sb.append(",avant_montant_ttc=" + String.valueOf(avant_montant_ttc));
			sb.append(",avant_nature=" + avant_nature);
			sb.append(",avant_convention_lie=" + avant_convention_lie);
			sb.append(",semestre=" + semestre);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);
				tFileInputDelimited_3Process(globalMap);

				avantagesStruct avantages = new avantagesStruct();
				qualites_avantagesStruct qualites_avantages = new qualites_avantagesStruct();
				qualitesStruct qualites = new qualitesStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "qualites");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;

				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "qualite_beneficiaire_dim";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbProperties_tDBOutput_1 = "noDatetimeStringSync=true";
				String url_tDBOutput_1 = null;
				if (dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
					url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "transparence_sante_bi" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_1.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "transparence_sante_bi" + "?"
							+ properties_tDBOutput_1;
				}
				String driverClass_tDBOutput_1 = "com.mysql.jdbc.Driver";

				String dbUser_tDBOutput_1 = "root";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:LEmJegcPwTvd2CTBimqaYcctfcRtE29BRl3voQ==");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				java.lang.Class.forName(driverClass_tDBOutput_1);

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;

				try (java.sql.Statement stmtClear_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtClear_tDBOutput_1.executeUpdate("DELETE FROM `" + tableName_tDBOutput_1 + "`");
				}

				String insert_tDBOutput_1 = "INSERT INTO `" + "qualite_beneficiaire_dim"
						+ "` (`qualite_beneficiaire_id`,`nom_qualite_beneficiaire`) VALUES (?,?)";
				int batchSize_tDBOutput_1 = 100;
				int batchSizeCounter_tDBOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "qualites_avantages");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<qualites_conventionsStruct> tHash_Lookup_qualites_conventions = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<qualites_conventionsStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<qualites_conventionsStruct>) globalMap
						.get("tHash_Lookup_qualites_conventions"));

				qualites_conventionsStruct qualites_conventionsHashKey = new qualites_conventionsStruct();
				qualites_conventionsStruct qualites_conventionsDefault = new qualites_conventionsStruct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<qualites_remunerationsStruct> tHash_Lookup_qualites_remunerations = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<qualites_remunerationsStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<qualites_remunerationsStruct>) globalMap
						.get("tHash_Lookup_qualites_remunerations"));

				qualites_remunerationsStruct qualites_remunerationsHashKey = new qualites_remunerationsStruct();
				qualites_remunerationsStruct qualites_remunerationsDefault = new qualites_remunerationsStruct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
					String var1;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				qualitesStruct qualites_tmp = new qualitesStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "avantages");
				}

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String benef_qualite_code;
					String avant_date_signature;
					Integer avant_montant_ttc;
					String avant_nature;
					String avant_convention_lie;
					String semestre;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.benef_qualite_code == null) ? 0 : this.benef_qualite_code.hashCode());

							result = prime * result
									+ ((this.avant_date_signature == null) ? 0 : this.avant_date_signature.hashCode());

							result = prime * result
									+ ((this.avant_montant_ttc == null) ? 0 : this.avant_montant_ttc.hashCode());

							result = prime * result + ((this.avant_nature == null) ? 0 : this.avant_nature.hashCode());

							result = prime * result
									+ ((this.avant_convention_lie == null) ? 0 : this.avant_convention_lie.hashCode());

							result = prime * result + ((this.semestre == null) ? 0 : this.semestre.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.benef_qualite_code == null) {
							if (other.benef_qualite_code != null)
								return false;

						} else if (!this.benef_qualite_code.equals(other.benef_qualite_code))

							return false;

						if (this.avant_date_signature == null) {
							if (other.avant_date_signature != null)
								return false;

						} else if (!this.avant_date_signature.equals(other.avant_date_signature))

							return false;

						if (this.avant_montant_ttc == null) {
							if (other.avant_montant_ttc != null)
								return false;

						} else if (!this.avant_montant_ttc.equals(other.avant_montant_ttc))

							return false;

						if (this.avant_nature == null) {
							if (other.avant_nature != null)
								return false;

						} else if (!this.avant_nature.equals(other.avant_nature))

							return false;

						if (this.avant_convention_lie == null) {
							if (other.avant_convention_lie != null)
								return false;

						} else if (!this.avant_convention_lie.equals(other.avant_convention_lie))

							return false;

						if (this.semestre == null) {
							if (other.semestre != null)
								return false;

						} else if (!this.semestre.equals(other.semestre))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/BI/transparence-sante/data/data.gouv/avantages.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/BI/transparence-sante/data/data.gouv/avantages.csv", "UTF-8", ";", "\n", false, 1,
								0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						avantages = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						avantages = new avantagesStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							avantages.entreprise_identifiant = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							avantages.denomination_sociale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							avantages.ligne_identifiant = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									avantages.ligne_rectification = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ligne_rectification", "avantages", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								avantages.ligne_rectification = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 4;

							avantages.benef_categorie_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							avantages.categorie = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							avantages.benef_nom = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							avantages.benef_prenom = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 8;

							avantages.benef_qualite_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 9;

							avantages.qualite = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 10;

							avantages.benef_adresse1 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 11;

							avantages.benef_adresse2 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 12;

							avantages.benef_adresse3 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 13;

							avantages.benef_adresse4 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 14;

							avantages.benef_codepostal = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 15;

							avantages.benef_ville = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 16;

							avantages.benef_pays_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 17;

							avantages.pays = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 18;

							avantages.benef_titre_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 19;

							avantages.benef_titre_libelle = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 20;

							avantages.benef_specialite_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 21;

							avantages.benef_speicalite_libelle = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 22;

							avantages.benef_identifiant_type_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 23;

							avantages.identifiant_type = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 24;

							avantages.benef_identifiant_valeur = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 25;

							avantages.benef_etablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 26;

							avantages.benef_etablissement_codepostal = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 27;

							avantages.benef_etablissement_ville = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 28;

							avantages.benef_denomination_sociale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 29;

							avantages.benef_objet_social = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 30;

							avantages.ligne_type = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 31;

							avantages.avant_date_signature = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 32;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									avantages.avant_montant_ttc = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"avant_montant_ttc", "avantages", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								avantages.avant_montant_ttc = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 33;

							avantages.avant_nature = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 34;

							avantages.avant_convention_lie = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 35;

							avantages.semestre = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							avantages = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "avantages"
						if (avantages != null) {

							/**
							 * [tUniqRow_1 main ] start
							 */

							currentComponent = "tUniqRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "avantages");
							}

							qualites_avantages = null;
							if (avantages.benef_qualite_code == null) {
								finder_tUniqRow_1.benef_qualite_code = null;
							} else {
								finder_tUniqRow_1.benef_qualite_code = avantages.benef_qualite_code.toLowerCase();
							}
							if (avantages.avant_date_signature == null) {
								finder_tUniqRow_1.avant_date_signature = null;
							} else {
								finder_tUniqRow_1.avant_date_signature = avantages.avant_date_signature.toLowerCase();
							}
							finder_tUniqRow_1.avant_montant_ttc = avantages.avant_montant_ttc;
							if (avantages.avant_nature == null) {
								finder_tUniqRow_1.avant_nature = null;
							} else {
								finder_tUniqRow_1.avant_nature = avantages.avant_nature.toLowerCase();
							}
							if (avantages.avant_convention_lie == null) {
								finder_tUniqRow_1.avant_convention_lie = null;
							} else {
								finder_tUniqRow_1.avant_convention_lie = avantages.avant_convention_lie.toLowerCase();
							}
							if (avantages.semestre == null) {
								finder_tUniqRow_1.semestre = null;
							} else {
								finder_tUniqRow_1.semestre = avantages.semestre.toLowerCase();
							}
							finder_tUniqRow_1.hashCodeDirty = true;
							if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
								KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

								if (avantages.benef_qualite_code == null) {
									new_tUniqRow_1.benef_qualite_code = null;
								} else {
									new_tUniqRow_1.benef_qualite_code = avantages.benef_qualite_code.toLowerCase();
								}
								if (avantages.avant_date_signature == null) {
									new_tUniqRow_1.avant_date_signature = null;
								} else {
									new_tUniqRow_1.avant_date_signature = avantages.avant_date_signature.toLowerCase();
								}
								new_tUniqRow_1.avant_montant_ttc = avantages.avant_montant_ttc;
								if (avantages.avant_nature == null) {
									new_tUniqRow_1.avant_nature = null;
								} else {
									new_tUniqRow_1.avant_nature = avantages.avant_nature.toLowerCase();
								}
								if (avantages.avant_convention_lie == null) {
									new_tUniqRow_1.avant_convention_lie = null;
								} else {
									new_tUniqRow_1.avant_convention_lie = avantages.avant_convention_lie.toLowerCase();
								}
								if (avantages.semestre == null) {
									new_tUniqRow_1.semestre = null;
								} else {
									new_tUniqRow_1.semestre = avantages.semestre.toLowerCase();
								}

								keystUniqRow_1.add(new_tUniqRow_1);
								if (qualites_avantages == null) {

									qualites_avantages = new qualites_avantagesStruct();
								}
								qualites_avantages.entreprise_identifiant = avantages.entreprise_identifiant;
								qualites_avantages.denomination_sociale = avantages.denomination_sociale;
								qualites_avantages.ligne_identifiant = avantages.ligne_identifiant;
								qualites_avantages.ligne_rectification = avantages.ligne_rectification;
								qualites_avantages.benef_categorie_code = avantages.benef_categorie_code;
								qualites_avantages.categorie = avantages.categorie;
								qualites_avantages.benef_nom = avantages.benef_nom;
								qualites_avantages.benef_prenom = avantages.benef_prenom;
								qualites_avantages.benef_qualite_code = avantages.benef_qualite_code;
								qualites_avantages.qualite = avantages.qualite;
								qualites_avantages.benef_adresse1 = avantages.benef_adresse1;
								qualites_avantages.benef_adresse2 = avantages.benef_adresse2;
								qualites_avantages.benef_adresse3 = avantages.benef_adresse3;
								qualites_avantages.benef_adresse4 = avantages.benef_adresse4;
								qualites_avantages.benef_codepostal = avantages.benef_codepostal;
								qualites_avantages.benef_ville = avantages.benef_ville;
								qualites_avantages.benef_pays_code = avantages.benef_pays_code;
								qualites_avantages.pays = avantages.pays;
								qualites_avantages.benef_titre_code = avantages.benef_titre_code;
								qualites_avantages.benef_titre_libelle = avantages.benef_titre_libelle;
								qualites_avantages.benef_specialite_code = avantages.benef_specialite_code;
								qualites_avantages.benef_speicalite_libelle = avantages.benef_speicalite_libelle;
								qualites_avantages.benef_identifiant_type_code = avantages.benef_identifiant_type_code;
								qualites_avantages.identifiant_type = avantages.identifiant_type;
								qualites_avantages.benef_identifiant_valeur = avantages.benef_identifiant_valeur;
								qualites_avantages.benef_etablissement = avantages.benef_etablissement;
								qualites_avantages.benef_etablissement_codepostal = avantages.benef_etablissement_codepostal;
								qualites_avantages.benef_etablissement_ville = avantages.benef_etablissement_ville;
								qualites_avantages.benef_denomination_sociale = avantages.benef_denomination_sociale;
								qualites_avantages.benef_objet_social = avantages.benef_objet_social;
								qualites_avantages.ligne_type = avantages.ligne_type;
								qualites_avantages.avant_date_signature = avantages.avant_date_signature;
								qualites_avantages.avant_montant_ttc = avantages.avant_montant_ttc;
								qualites_avantages.avant_nature = avantages.avant_nature;
								qualites_avantages.avant_convention_lie = avantages.avant_convention_lie;
								qualites_avantages.semestre = avantages.semestre;
								nb_uniques_tUniqRow_1++;
							} else {
								nb_duplicates_tUniqRow_1++;
							}

							tos_count_tUniqRow_1++;

							/**
							 * [tUniqRow_1 main ] stop
							 */

							/**
							 * [tUniqRow_1 process_data_begin ] start
							 */

							currentComponent = "tUniqRow_1";

							/**
							 * [tUniqRow_1 process_data_begin ] stop
							 */
// Start of branch "qualites_avantages"
							if (qualites_avantages != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "qualites_avantages");
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								///////////////////////////////////////////////
								// Starting Lookup Table "qualites_conventions"
								///////////////////////////////////////////////

								boolean forceLoopqualites_conventions = false;

								qualites_conventionsStruct qualites_conventionsObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									qualites_conventionsHashKey.benef_qualite_code = qualites_avantages.benef_qualite_code;

									qualites_conventionsHashKey.hashCodeDirty = true;

									tHash_Lookup_qualites_conventions.lookup(qualites_conventionsHashKey);

									if (!tHash_Lookup_qualites_conventions.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_1 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_qualites_conventions != null && tHash_Lookup_qualites_conventions
										.getCount(qualites_conventionsHashKey) > 1) { // G 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
									// 'qualites_conventions' and it contains more one result from keys :
									// qualites_conventions.benef_qualite_code = '" +
									// qualites_conventionsHashKey.benef_qualite_code + "'");
								} // G 071

								qualites_conventionsStruct qualites_conventions = null;

								qualites_conventionsStruct fromLookup_qualites_conventions = null;
								qualites_conventions = qualites_conventionsDefault;

								if (tHash_Lookup_qualites_conventions != null
										&& tHash_Lookup_qualites_conventions.hasNext()) { // G 099

									fromLookup_qualites_conventions = tHash_Lookup_qualites_conventions.next();

								} // G 099

								if (fromLookup_qualites_conventions != null) {
									qualites_conventions = fromLookup_qualites_conventions;
								}

								///////////////////////////////////////////////
								// Starting Lookup Table "qualites_remunerations"
								///////////////////////////////////////////////

								boolean forceLoopqualites_remunerations = false;

								qualites_remunerationsStruct qualites_remunerationsObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									qualites_remunerationsHashKey.benef_qualite_code = qualites_conventions.benef_qualite_code;

									qualites_remunerationsHashKey.hashCodeDirty = true;

									tHash_Lookup_qualites_remunerations.lookup(qualites_remunerationsHashKey);

									if (!tHash_Lookup_qualites_remunerations.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_1 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_qualites_remunerations != null && tHash_Lookup_qualites_remunerations
										.getCount(qualites_remunerationsHashKey) > 1) { // G 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
									// 'qualites_remunerations' and it contains more one result from keys :
									// qualites_remunerations.benef_qualite_code = '" +
									// qualites_remunerationsHashKey.benef_qualite_code + "'");
								} // G 071

								qualites_remunerationsStruct qualites_remunerations = null;

								qualites_remunerationsStruct fromLookup_qualites_remunerations = null;
								qualites_remunerations = qualites_remunerationsDefault;

								if (tHash_Lookup_qualites_remunerations != null
										&& tHash_Lookup_qualites_remunerations.hasNext()) { // G 099

									fromLookup_qualites_remunerations = tHash_Lookup_qualites_remunerations.next();

								} // G 099

								if (fromLookup_qualites_remunerations != null) {
									qualites_remunerations = fromLookup_qualites_remunerations;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;
									Var.var1 = null;// ###############################
									// ###############################
									// # Output tables

									qualites = null;

									if (!rejectedInnerJoin_tMap_1) {

// # Output table : 'qualites'
										qualites_tmp.qualite_beneficiaire_id = qualites_remunerations.benef_qualite_code;
										qualites_tmp.nom_qualite_beneficiaire = qualites_remunerations.qualite;
										qualites = qualites_tmp;
									} // closing inner join bracket (2)
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */

								/**
								 * [tMap_1 process_data_begin ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_begin ] stop
								 */
// Start of branch "qualites"
								if (qualites != null) {

									/**
									 * [tDBOutput_1 main ] start
									 */

									currentComponent = "tDBOutput_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "qualites");
									}

									whetherReject_tDBOutput_1 = false;
									if (qualites.qualite_beneficiaire_id == null) {
										pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(1, qualites.qualite_beneficiaire_id);
									}

									if (qualites.nom_qualite_beneficiaire == null) {
										pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_1.setString(2, qualites.nom_qualite_beneficiaire);
									}

									pstmt_tDBOutput_1.addBatch();
									nb_line_tDBOutput_1++;

									batchSizeCounter_tDBOutput_1++;
									if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
										try {
											int countSum_tDBOutput_1 = 0;
											for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
												countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED
														? 0
														: 1);
											}
											insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
										} catch (java.sql.BatchUpdateException e) {
											int countSum_tDBOutput_1 = 0;
											for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
												countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
														: countEach_tDBOutput_1);
											}
											insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
											System.err.println(e.getMessage());
										}

										batchSizeCounter_tDBOutput_1 = 0;
									}
									commitCounter_tDBOutput_1++;

									if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

										try {
											int countSum_tDBOutput_1 = 0;
											for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
												countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
											}
											insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
										} catch (java.sql.BatchUpdateException e) {
											int countSum_tDBOutput_1 = 0;
											for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
												countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
														: countEach_tDBOutput_1);
											}
											insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
											System.err.println(e.getMessage());

										}
										conn_tDBOutput_1.commit();
										commitCounter_tDBOutput_1 = 0;

									}

									tos_count_tDBOutput_1++;

									/**
									 * [tDBOutput_1 main ] stop
									 */

									/**
									 * [tDBOutput_1 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_1";

									/**
									 * [tDBOutput_1 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_1 process_data_end ] start
									 */

									currentComponent = "tDBOutput_1";

									/**
									 * [tDBOutput_1 process_data_end ] stop
									 */

								} // End of branch "qualites"

								/**
								 * [tMap_1 process_data_end ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_end ] stop
								 */

							} // End of branch "qualites_avantages"

							/**
							 * [tUniqRow_1 process_data_end ] start
							 */

							currentComponent = "tUniqRow_1";

							/**
							 * [tUniqRow_1 process_data_end ] stop
							 */

						} // End of branch "avantages"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/BI/transparence-sante/data/data.gouv/avantages.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "avantages");
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_qualites_conventions != null) {
					tHash_Lookup_qualites_conventions.endGet();
				}
				globalMap.remove("tHash_Lookup_qualites_conventions");

				if (tHash_Lookup_qualites_remunerations != null) {
					tHash_Lookup_qualites_remunerations.endGet();
				}
				globalMap.remove("tHash_Lookup_qualites_remunerations");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "qualites_avantages");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (batchSizeCounter_tDBOutput_1 != 0) {
						int countSum_tDBOutput_1 = 0;

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_1 = 0;

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0) {

					conn_tDBOutput_1.commit();

				}

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "qualites");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_qualites_conventions");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_qualites_remunerations");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class qualites_conventionsStruct
			implements routines.system.IPersistableComparableLookupRow<qualites_conventionsStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String denomination_sociale;

		public String getDenomination_sociale() {
			return this.denomination_sociale;
		}

		public String ligne_identifiant;

		public String getLigne_identifiant() {
			return this.ligne_identifiant;
		}

		public Character ligne_rectification;

		public Character getLigne_rectification() {
			return this.ligne_rectification;
		}

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String categorie;

		public String getCategorie() {
			return this.categorie;
		}

		public String benef_nom;

		public String getBenef_nom() {
			return this.benef_nom;
		}

		public String benef_prenom;

		public String getBenef_prenom() {
			return this.benef_prenom;
		}

		public String benef_qualite_code;

		public String getBenef_qualite_code() {
			return this.benef_qualite_code;
		}

		public String qualite;

		public String getQualite() {
			return this.qualite;
		}

		public String benef_adresse1;

		public String getBenef_adresse1() {
			return this.benef_adresse1;
		}

		public String benef_adresse2;

		public String getBenef_adresse2() {
			return this.benef_adresse2;
		}

		public String benef_adresse3;

		public String getBenef_adresse3() {
			return this.benef_adresse3;
		}

		public String benef_adresse4;

		public String getBenef_adresse4() {
			return this.benef_adresse4;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_ville;

		public String getBenef_ville() {
			return this.benef_ville;
		}

		public String benef_pays_code;

		public String getBenef_pays_code() {
			return this.benef_pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String benef_titre_code;

		public String getBenef_titre_code() {
			return this.benef_titre_code;
		}

		public String benef_titre_libelle;

		public String getBenef_titre_libelle() {
			return this.benef_titre_libelle;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_speicalite_libelle;

		public String getBenef_speicalite_libelle() {
			return this.benef_speicalite_libelle;
		}

		public String benef_identifiant_type_code;

		public String getBenef_identifiant_type_code() {
			return this.benef_identifiant_type_code;
		}

		public String identifiant_type;

		public String getIdentifiant_type() {
			return this.identifiant_type;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String benef_etablissement;

		public String getBenef_etablissement() {
			return this.benef_etablissement;
		}

		public String benef_etablissement_codepostal;

		public String getBenef_etablissement_codepostal() {
			return this.benef_etablissement_codepostal;
		}

		public String benef_etablissement_ville;

		public String getBenef_etablissement_ville() {
			return this.benef_etablissement_ville;
		}

		public String benef_denomination_sociale;

		public String getBenef_denomination_sociale() {
			return this.benef_denomination_sociale;
		}

		public String benef_objet_social;

		public String getBenef_objet_social() {
			return this.benef_objet_social;
		}

		public String ligne_type;

		public String getLigne_type() {
			return this.ligne_type;
		}

		public String conv_date_signature;

		public String getConv_date_signature() {
			return this.conv_date_signature;
		}

		public String conv_objet;

		public String getConv_objet() {
			return this.conv_objet;
		}

		public String conv_objet_autre;

		public String getConv_objet_autre() {
			return this.conv_objet_autre;
		}

		public String conv_date_debut;

		public String getConv_date_debut() {
			return this.conv_date_debut;
		}

		public String conv_date_fin;

		public String getConv_date_fin() {
			return this.conv_date_fin;
		}

		public String conv_montant_ttc;

		public String getConv_montant_ttc() {
			return this.conv_montant_ttc;
		}

		public String conv_manifestation_date;

		public String getConv_manifestation_date() {
			return this.conv_manifestation_date;
		}

		public String conv_manifestation_nom;

		public String getConv_manifestation_nom() {
			return this.conv_manifestation_nom;
		}

		public String conv_manifestation_lieu;

		public String getConv_manifestation_lieu() {
			return this.conv_manifestation_lieu;
		}

		public String conv_manifestation_organisateur;

		public String getConv_manifestation_organisateur() {
			return this.conv_manifestation_organisateur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.benef_qualite_code == null) ? 0 : this.benef_qualite_code.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final qualites_conventionsStruct other = (qualites_conventionsStruct) obj;

			if (this.benef_qualite_code == null) {
				if (other.benef_qualite_code != null)
					return false;

			} else if (!this.benef_qualite_code.equals(other.benef_qualite_code))

				return false;

			return true;
		}

		public void copyDataTo(qualites_conventionsStruct other) {

			other.entreprise_identifiant = this.entreprise_identifiant;
			other.denomination_sociale = this.denomination_sociale;
			other.ligne_identifiant = this.ligne_identifiant;
			other.ligne_rectification = this.ligne_rectification;
			other.benef_categorie_code = this.benef_categorie_code;
			other.categorie = this.categorie;
			other.benef_nom = this.benef_nom;
			other.benef_prenom = this.benef_prenom;
			other.benef_qualite_code = this.benef_qualite_code;
			other.qualite = this.qualite;
			other.benef_adresse1 = this.benef_adresse1;
			other.benef_adresse2 = this.benef_adresse2;
			other.benef_adresse3 = this.benef_adresse3;
			other.benef_adresse4 = this.benef_adresse4;
			other.benef_codepostal = this.benef_codepostal;
			other.benef_ville = this.benef_ville;
			other.benef_pays_code = this.benef_pays_code;
			other.pays = this.pays;
			other.benef_titre_code = this.benef_titre_code;
			other.benef_titre_libelle = this.benef_titre_libelle;
			other.benef_specialite_code = this.benef_specialite_code;
			other.benef_speicalite_libelle = this.benef_speicalite_libelle;
			other.benef_identifiant_type_code = this.benef_identifiant_type_code;
			other.identifiant_type = this.identifiant_type;
			other.benef_identifiant_valeur = this.benef_identifiant_valeur;
			other.benef_etablissement = this.benef_etablissement;
			other.benef_etablissement_codepostal = this.benef_etablissement_codepostal;
			other.benef_etablissement_ville = this.benef_etablissement_ville;
			other.benef_denomination_sociale = this.benef_denomination_sociale;
			other.benef_objet_social = this.benef_objet_social;
			other.ligne_type = this.ligne_type;
			other.conv_date_signature = this.conv_date_signature;
			other.conv_objet = this.conv_objet;
			other.conv_objet_autre = this.conv_objet_autre;
			other.conv_date_debut = this.conv_date_debut;
			other.conv_date_fin = this.conv_date_fin;
			other.conv_montant_ttc = this.conv_montant_ttc;
			other.conv_manifestation_date = this.conv_manifestation_date;
			other.conv_manifestation_nom = this.conv_manifestation_nom;
			other.conv_manifestation_lieu = this.conv_manifestation_lieu;
			other.conv_manifestation_organisateur = this.conv_manifestation_organisateur;

		}

		public void copyKeysDataTo(qualites_conventionsStruct other) {

			other.benef_qualite_code = this.benef_qualite_code;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim) {

				try {

					int length = 0;

					this.benef_qualite_code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.benef_qualite_code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.entreprise_identifiant = readString(dis, ois);

				this.denomination_sociale = readString(dis, ois);

				this.ligne_identifiant = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.ligne_rectification = null;
				} else {
					this.ligne_rectification = dis.readChar();
				}

				this.benef_categorie_code = readString(dis, ois);

				this.categorie = readString(dis, ois);

				this.benef_nom = readString(dis, ois);

				this.benef_prenom = readString(dis, ois);

				this.qualite = readString(dis, ois);

				this.benef_adresse1 = readString(dis, ois);

				this.benef_adresse2 = readString(dis, ois);

				this.benef_adresse3 = readString(dis, ois);

				this.benef_adresse4 = readString(dis, ois);

				this.benef_codepostal = readString(dis, ois);

				this.benef_ville = readString(dis, ois);

				this.benef_pays_code = readString(dis, ois);

				this.pays = readString(dis, ois);

				this.benef_titre_code = readString(dis, ois);

				this.benef_titre_libelle = readString(dis, ois);

				this.benef_specialite_code = readString(dis, ois);

				this.benef_speicalite_libelle = readString(dis, ois);

				this.benef_identifiant_type_code = readString(dis, ois);

				this.identifiant_type = readString(dis, ois);

				this.benef_identifiant_valeur = readString(dis, ois);

				this.benef_etablissement = readString(dis, ois);

				this.benef_etablissement_codepostal = readString(dis, ois);

				this.benef_etablissement_ville = readString(dis, ois);

				this.benef_denomination_sociale = readString(dis, ois);

				this.benef_objet_social = readString(dis, ois);

				this.ligne_type = readString(dis, ois);

				this.conv_date_signature = readString(dis, ois);

				this.conv_objet = readString(dis, ois);

				this.conv_objet_autre = readString(dis, ois);

				this.conv_date_debut = readString(dis, ois);

				this.conv_date_fin = readString(dis, ois);

				this.conv_montant_ttc = readString(dis, ois);

				this.conv_manifestation_date = readString(dis, ois);

				this.conv_manifestation_nom = readString(dis, ois);

				this.conv_manifestation_lieu = readString(dis, ois);

				this.conv_manifestation_organisateur = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.entreprise_identifiant, dos, oos);

				writeString(this.denomination_sociale, dos, oos);

				writeString(this.ligne_identifiant, dos, oos);

				if (this.ligne_rectification == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.ligne_rectification);
				}

				writeString(this.benef_categorie_code, dos, oos);

				writeString(this.categorie, dos, oos);

				writeString(this.benef_nom, dos, oos);

				writeString(this.benef_prenom, dos, oos);

				writeString(this.qualite, dos, oos);

				writeString(this.benef_adresse1, dos, oos);

				writeString(this.benef_adresse2, dos, oos);

				writeString(this.benef_adresse3, dos, oos);

				writeString(this.benef_adresse4, dos, oos);

				writeString(this.benef_codepostal, dos, oos);

				writeString(this.benef_ville, dos, oos);

				writeString(this.benef_pays_code, dos, oos);

				writeString(this.pays, dos, oos);

				writeString(this.benef_titre_code, dos, oos);

				writeString(this.benef_titre_libelle, dos, oos);

				writeString(this.benef_specialite_code, dos, oos);

				writeString(this.benef_speicalite_libelle, dos, oos);

				writeString(this.benef_identifiant_type_code, dos, oos);

				writeString(this.identifiant_type, dos, oos);

				writeString(this.benef_identifiant_valeur, dos, oos);

				writeString(this.benef_etablissement, dos, oos);

				writeString(this.benef_etablissement_codepostal, dos, oos);

				writeString(this.benef_etablissement_ville, dos, oos);

				writeString(this.benef_denomination_sociale, dos, oos);

				writeString(this.benef_objet_social, dos, oos);

				writeString(this.ligne_type, dos, oos);

				writeString(this.conv_date_signature, dos, oos);

				writeString(this.conv_objet, dos, oos);

				writeString(this.conv_objet_autre, dos, oos);

				writeString(this.conv_date_debut, dos, oos);

				writeString(this.conv_date_fin, dos, oos);

				writeString(this.conv_montant_ttc, dos, oos);

				writeString(this.conv_manifestation_date, dos, oos);

				writeString(this.conv_manifestation_nom, dos, oos);

				writeString(this.conv_manifestation_lieu, dos, oos);

				writeString(this.conv_manifestation_organisateur, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",denomination_sociale=" + denomination_sociale);
			sb.append(",ligne_identifiant=" + ligne_identifiant);
			sb.append(",ligne_rectification=" + String.valueOf(ligne_rectification));
			sb.append(",benef_categorie_code=" + benef_categorie_code);
			sb.append(",categorie=" + categorie);
			sb.append(",benef_nom=" + benef_nom);
			sb.append(",benef_prenom=" + benef_prenom);
			sb.append(",benef_qualite_code=" + benef_qualite_code);
			sb.append(",qualite=" + qualite);
			sb.append(",benef_adresse1=" + benef_adresse1);
			sb.append(",benef_adresse2=" + benef_adresse2);
			sb.append(",benef_adresse3=" + benef_adresse3);
			sb.append(",benef_adresse4=" + benef_adresse4);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_ville=" + benef_ville);
			sb.append(",benef_pays_code=" + benef_pays_code);
			sb.append(",pays=" + pays);
			sb.append(",benef_titre_code=" + benef_titre_code);
			sb.append(",benef_titre_libelle=" + benef_titre_libelle);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_speicalite_libelle=" + benef_speicalite_libelle);
			sb.append(",benef_identifiant_type_code=" + benef_identifiant_type_code);
			sb.append(",identifiant_type=" + identifiant_type);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",benef_etablissement=" + benef_etablissement);
			sb.append(",benef_etablissement_codepostal=" + benef_etablissement_codepostal);
			sb.append(",benef_etablissement_ville=" + benef_etablissement_ville);
			sb.append(",benef_denomination_sociale=" + benef_denomination_sociale);
			sb.append(",benef_objet_social=" + benef_objet_social);
			sb.append(",ligne_type=" + ligne_type);
			sb.append(",conv_date_signature=" + conv_date_signature);
			sb.append(",conv_objet=" + conv_objet);
			sb.append(",conv_objet_autre=" + conv_objet_autre);
			sb.append(",conv_date_debut=" + conv_date_debut);
			sb.append(",conv_date_fin=" + conv_date_fin);
			sb.append(",conv_montant_ttc=" + conv_montant_ttc);
			sb.append(",conv_manifestation_date=" + conv_manifestation_date);
			sb.append(",conv_manifestation_nom=" + conv_manifestation_nom);
			sb.append(",conv_manifestation_lieu=" + conv_manifestation_lieu);
			sb.append(",conv_manifestation_organisateur=" + conv_manifestation_organisateur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(qualites_conventionsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.benef_qualite_code, other.benef_qualite_code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class conventionsStruct implements routines.system.IPersistableRow<conventionsStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String denomination_sociale;

		public String getDenomination_sociale() {
			return this.denomination_sociale;
		}

		public String ligne_identifiant;

		public String getLigne_identifiant() {
			return this.ligne_identifiant;
		}

		public Character ligne_rectification;

		public Character getLigne_rectification() {
			return this.ligne_rectification;
		}

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String categorie;

		public String getCategorie() {
			return this.categorie;
		}

		public String benef_nom;

		public String getBenef_nom() {
			return this.benef_nom;
		}

		public String benef_prenom;

		public String getBenef_prenom() {
			return this.benef_prenom;
		}

		public String benef_qualite_code;

		public String getBenef_qualite_code() {
			return this.benef_qualite_code;
		}

		public String qualite;

		public String getQualite() {
			return this.qualite;
		}

		public String benef_adresse1;

		public String getBenef_adresse1() {
			return this.benef_adresse1;
		}

		public String benef_adresse2;

		public String getBenef_adresse2() {
			return this.benef_adresse2;
		}

		public String benef_adresse3;

		public String getBenef_adresse3() {
			return this.benef_adresse3;
		}

		public String benef_adresse4;

		public String getBenef_adresse4() {
			return this.benef_adresse4;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_ville;

		public String getBenef_ville() {
			return this.benef_ville;
		}

		public String benef_pays_code;

		public String getBenef_pays_code() {
			return this.benef_pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String benef_titre_code;

		public String getBenef_titre_code() {
			return this.benef_titre_code;
		}

		public String benef_titre_libelle;

		public String getBenef_titre_libelle() {
			return this.benef_titre_libelle;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_speicalite_libelle;

		public String getBenef_speicalite_libelle() {
			return this.benef_speicalite_libelle;
		}

		public String benef_identifiant_type_code;

		public String getBenef_identifiant_type_code() {
			return this.benef_identifiant_type_code;
		}

		public String identifiant_type;

		public String getIdentifiant_type() {
			return this.identifiant_type;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String benef_etablissement;

		public String getBenef_etablissement() {
			return this.benef_etablissement;
		}

		public String benef_etablissement_codepostal;

		public String getBenef_etablissement_codepostal() {
			return this.benef_etablissement_codepostal;
		}

		public String benef_etablissement_ville;

		public String getBenef_etablissement_ville() {
			return this.benef_etablissement_ville;
		}

		public String benef_denomination_sociale;

		public String getBenef_denomination_sociale() {
			return this.benef_denomination_sociale;
		}

		public String benef_objet_social;

		public String getBenef_objet_social() {
			return this.benef_objet_social;
		}

		public String ligne_type;

		public String getLigne_type() {
			return this.ligne_type;
		}

		public String conv_date_signature;

		public String getConv_date_signature() {
			return this.conv_date_signature;
		}

		public String conv_objet;

		public String getConv_objet() {
			return this.conv_objet;
		}

		public String conv_objet_autre;

		public String getConv_objet_autre() {
			return this.conv_objet_autre;
		}

		public String conv_date_debut;

		public String getConv_date_debut() {
			return this.conv_date_debut;
		}

		public String conv_date_fin;

		public String getConv_date_fin() {
			return this.conv_date_fin;
		}

		public String conv_montant_ttc;

		public String getConv_montant_ttc() {
			return this.conv_montant_ttc;
		}

		public String conv_manifestation_date;

		public String getConv_manifestation_date() {
			return this.conv_manifestation_date;
		}

		public String conv_manifestation_nom;

		public String getConv_manifestation_nom() {
			return this.conv_manifestation_nom;
		}

		public String conv_manifestation_lieu;

		public String getConv_manifestation_lieu() {
			return this.conv_manifestation_lieu;
		}

		public String conv_manifestation_organisateur;

		public String getConv_manifestation_organisateur() {
			return this.conv_manifestation_organisateur;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim) {

				try {

					int length = 0;

					this.entreprise_identifiant = readString(dis);

					this.denomination_sociale = readString(dis);

					this.ligne_identifiant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ligne_rectification = null;
					} else {
						this.ligne_rectification = dis.readChar();
					}

					this.benef_categorie_code = readString(dis);

					this.categorie = readString(dis);

					this.benef_nom = readString(dis);

					this.benef_prenom = readString(dis);

					this.benef_qualite_code = readString(dis);

					this.qualite = readString(dis);

					this.benef_adresse1 = readString(dis);

					this.benef_adresse2 = readString(dis);

					this.benef_adresse3 = readString(dis);

					this.benef_adresse4 = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_ville = readString(dis);

					this.benef_pays_code = readString(dis);

					this.pays = readString(dis);

					this.benef_titre_code = readString(dis);

					this.benef_titre_libelle = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_speicalite_libelle = readString(dis);

					this.benef_identifiant_type_code = readString(dis);

					this.identifiant_type = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.benef_etablissement = readString(dis);

					this.benef_etablissement_codepostal = readString(dis);

					this.benef_etablissement_ville = readString(dis);

					this.benef_denomination_sociale = readString(dis);

					this.benef_objet_social = readString(dis);

					this.ligne_type = readString(dis);

					this.conv_date_signature = readString(dis);

					this.conv_objet = readString(dis);

					this.conv_objet_autre = readString(dis);

					this.conv_date_debut = readString(dis);

					this.conv_date_fin = readString(dis);

					this.conv_montant_ttc = readString(dis);

					this.conv_manifestation_date = readString(dis);

					this.conv_manifestation_nom = readString(dis);

					this.conv_manifestation_lieu = readString(dis);

					this.conv_manifestation_organisateur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entreprise_identifiant, dos);

				// String

				writeString(this.denomination_sociale, dos);

				// String

				writeString(this.ligne_identifiant, dos);

				// Character

				if (this.ligne_rectification == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.ligne_rectification);
				}

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.categorie, dos);

				// String

				writeString(this.benef_nom, dos);

				// String

				writeString(this.benef_prenom, dos);

				// String

				writeString(this.benef_qualite_code, dos);

				// String

				writeString(this.qualite, dos);

				// String

				writeString(this.benef_adresse1, dos);

				// String

				writeString(this.benef_adresse2, dos);

				// String

				writeString(this.benef_adresse3, dos);

				// String

				writeString(this.benef_adresse4, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_ville, dos);

				// String

				writeString(this.benef_pays_code, dos);

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.benef_titre_code, dos);

				// String

				writeString(this.benef_titre_libelle, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_speicalite_libelle, dos);

				// String

				writeString(this.benef_identifiant_type_code, dos);

				// String

				writeString(this.identifiant_type, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.benef_etablissement, dos);

				// String

				writeString(this.benef_etablissement_codepostal, dos);

				// String

				writeString(this.benef_etablissement_ville, dos);

				// String

				writeString(this.benef_denomination_sociale, dos);

				// String

				writeString(this.benef_objet_social, dos);

				// String

				writeString(this.ligne_type, dos);

				// String

				writeString(this.conv_date_signature, dos);

				// String

				writeString(this.conv_objet, dos);

				// String

				writeString(this.conv_objet_autre, dos);

				// String

				writeString(this.conv_date_debut, dos);

				// String

				writeString(this.conv_date_fin, dos);

				// String

				writeString(this.conv_montant_ttc, dos);

				// String

				writeString(this.conv_manifestation_date, dos);

				// String

				writeString(this.conv_manifestation_nom, dos);

				// String

				writeString(this.conv_manifestation_lieu, dos);

				// String

				writeString(this.conv_manifestation_organisateur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",denomination_sociale=" + denomination_sociale);
			sb.append(",ligne_identifiant=" + ligne_identifiant);
			sb.append(",ligne_rectification=" + String.valueOf(ligne_rectification));
			sb.append(",benef_categorie_code=" + benef_categorie_code);
			sb.append(",categorie=" + categorie);
			sb.append(",benef_nom=" + benef_nom);
			sb.append(",benef_prenom=" + benef_prenom);
			sb.append(",benef_qualite_code=" + benef_qualite_code);
			sb.append(",qualite=" + qualite);
			sb.append(",benef_adresse1=" + benef_adresse1);
			sb.append(",benef_adresse2=" + benef_adresse2);
			sb.append(",benef_adresse3=" + benef_adresse3);
			sb.append(",benef_adresse4=" + benef_adresse4);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_ville=" + benef_ville);
			sb.append(",benef_pays_code=" + benef_pays_code);
			sb.append(",pays=" + pays);
			sb.append(",benef_titre_code=" + benef_titre_code);
			sb.append(",benef_titre_libelle=" + benef_titre_libelle);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_speicalite_libelle=" + benef_speicalite_libelle);
			sb.append(",benef_identifiant_type_code=" + benef_identifiant_type_code);
			sb.append(",identifiant_type=" + identifiant_type);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",benef_etablissement=" + benef_etablissement);
			sb.append(",benef_etablissement_codepostal=" + benef_etablissement_codepostal);
			sb.append(",benef_etablissement_ville=" + benef_etablissement_ville);
			sb.append(",benef_denomination_sociale=" + benef_denomination_sociale);
			sb.append(",benef_objet_social=" + benef_objet_social);
			sb.append(",ligne_type=" + ligne_type);
			sb.append(",conv_date_signature=" + conv_date_signature);
			sb.append(",conv_objet=" + conv_objet);
			sb.append(",conv_objet_autre=" + conv_objet_autre);
			sb.append(",conv_date_debut=" + conv_date_debut);
			sb.append(",conv_date_fin=" + conv_date_fin);
			sb.append(",conv_montant_ttc=" + conv_montant_ttc);
			sb.append(",conv_manifestation_date=" + conv_manifestation_date);
			sb.append(",conv_manifestation_nom=" + conv_manifestation_nom);
			sb.append(",conv_manifestation_lieu=" + conv_manifestation_lieu);
			sb.append(",conv_manifestation_organisateur=" + conv_manifestation_organisateur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(conventionsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				conventionsStruct conventions = new conventionsStruct();
				qualites_conventionsStruct qualites_conventions = new qualites_conventionsStruct();

				/**
				 * [tAdvancedHash_qualites_conventions begin ] start
				 */

				ok_Hash.put("tAdvancedHash_qualites_conventions", false);
				start_Hash.put("tAdvancedHash_qualites_conventions", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_qualites_conventions";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "qualites_conventions");
				}

				int tos_count_tAdvancedHash_qualites_conventions = 0;

				// connection name:qualites_conventions
				// source node:tUniqRow_2 - inputs:(conventions)
				// outputs:(qualites_conventions,qualites_conventions) | target
				// node:tAdvancedHash_qualites_conventions - inputs:(qualites_conventions)
				// outputs:()
				// linked node: tMap_1 -
				// inputs:(qualites_avantages,qualites_conventions,qualites_remunerations)
				// outputs:(qualites)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_qualites_conventions = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<qualites_conventionsStruct> tHash_Lookup_qualites_conventions = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<qualites_conventionsStruct>getLookup(matchingModeEnum_qualites_conventions);

				globalMap.put("tHash_Lookup_qualites_conventions", tHash_Lookup_qualites_conventions);

				/**
				 * [tAdvancedHash_qualites_conventions begin ] stop
				 */

				/**
				 * [tUniqRow_2 begin ] start
				 */

				ok_Hash.put("tUniqRow_2", false);
				start_Hash.put("tUniqRow_2", System.currentTimeMillis());

				currentComponent = "tUniqRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "conventions");
				}

				int tos_count_tUniqRow_2 = 0;

				class KeyStruct_tUniqRow_2 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String benef_qualite_code;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.benef_qualite_code == null) ? 0 : this.benef_qualite_code.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;

						if (this.benef_qualite_code == null) {
							if (other.benef_qualite_code != null)
								return false;

						} else if (!this.benef_qualite_code.equals(other.benef_qualite_code))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_2 = 0;
				int nb_duplicates_tUniqRow_2 = 0;
				KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
				java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>();

				/**
				 * [tUniqRow_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try {

					Object filename_tFileInputDelimited_2 = "C:/BI/transparence-sante/data/data.gouv/conventions.csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0 || random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"C:/BI/transparence-sante/data/data.gouv/conventions.csv", "UTF-8", ";", "\n", false, 1,
								0, limit_tFileInputDelimited_2, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						conventions = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						conventions = new conventionsStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							conventions.entreprise_identifiant = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 1;

							conventions.denomination_sociale = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							conventions.ligne_identifiant = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 3;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									conventions.ligne_rectification = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ligne_rectification", "conventions", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								conventions.ligne_rectification = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 4;

							conventions.benef_categorie_code = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 5;

							conventions.categorie = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 6;

							conventions.benef_nom = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 7;

							conventions.benef_prenom = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 8;

							conventions.benef_qualite_code = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 9;

							conventions.qualite = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 10;

							conventions.benef_adresse1 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 11;

							conventions.benef_adresse2 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 12;

							conventions.benef_adresse3 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 13;

							conventions.benef_adresse4 = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 14;

							conventions.benef_codepostal = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 15;

							conventions.benef_ville = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 16;

							conventions.benef_pays_code = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 17;

							conventions.pays = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 18;

							conventions.benef_titre_code = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 19;

							conventions.benef_titre_libelle = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 20;

							conventions.benef_specialite_code = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 21;

							conventions.benef_speicalite_libelle = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 22;

							conventions.benef_identifiant_type_code = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 23;

							conventions.identifiant_type = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 24;

							conventions.benef_identifiant_valeur = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 25;

							conventions.benef_etablissement = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 26;

							conventions.benef_etablissement_codepostal = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 27;

							conventions.benef_etablissement_ville = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 28;

							conventions.benef_denomination_sociale = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 29;

							conventions.benef_objet_social = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 30;

							conventions.ligne_type = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 31;

							conventions.conv_date_signature = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 32;

							conventions.conv_objet = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 33;

							conventions.conv_objet_autre = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 34;

							conventions.conv_date_debut = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 35;

							conventions.conv_date_fin = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 36;

							conventions.conv_montant_ttc = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 37;

							conventions.conv_manifestation_date = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 38;

							conventions.conv_manifestation_nom = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 39;

							conventions.conv_manifestation_lieu = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 40;

							conventions.conv_manifestation_organisateur = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							conventions = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "conventions"
						if (conventions != null) {

							/**
							 * [tUniqRow_2 main ] start
							 */

							currentComponent = "tUniqRow_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "conventions");
							}

							qualites_conventions = null;
							qualites_conventions = null;
							if (conventions.benef_qualite_code == null) {
								finder_tUniqRow_2.benef_qualite_code = null;
							} else {
								finder_tUniqRow_2.benef_qualite_code = conventions.benef_qualite_code.toLowerCase();
							}
							finder_tUniqRow_2.hashCodeDirty = true;
							if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
								KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

								if (conventions.benef_qualite_code == null) {
									new_tUniqRow_2.benef_qualite_code = null;
								} else {
									new_tUniqRow_2.benef_qualite_code = conventions.benef_qualite_code.toLowerCase();
								}

								keystUniqRow_2.add(new_tUniqRow_2);
								if (qualites_conventions == null) {

									qualites_conventions = new qualites_conventionsStruct();
								}
								qualites_conventions.entreprise_identifiant = conventions.entreprise_identifiant;
								qualites_conventions.denomination_sociale = conventions.denomination_sociale;
								qualites_conventions.ligne_identifiant = conventions.ligne_identifiant;
								qualites_conventions.ligne_rectification = conventions.ligne_rectification;
								qualites_conventions.benef_categorie_code = conventions.benef_categorie_code;
								qualites_conventions.categorie = conventions.categorie;
								qualites_conventions.benef_nom = conventions.benef_nom;
								qualites_conventions.benef_prenom = conventions.benef_prenom;
								qualites_conventions.benef_qualite_code = conventions.benef_qualite_code;
								qualites_conventions.qualite = conventions.qualite;
								qualites_conventions.benef_adresse1 = conventions.benef_adresse1;
								qualites_conventions.benef_adresse2 = conventions.benef_adresse2;
								qualites_conventions.benef_adresse3 = conventions.benef_adresse3;
								qualites_conventions.benef_adresse4 = conventions.benef_adresse4;
								qualites_conventions.benef_codepostal = conventions.benef_codepostal;
								qualites_conventions.benef_ville = conventions.benef_ville;
								qualites_conventions.benef_pays_code = conventions.benef_pays_code;
								qualites_conventions.pays = conventions.pays;
								qualites_conventions.benef_titre_code = conventions.benef_titre_code;
								qualites_conventions.benef_titre_libelle = conventions.benef_titre_libelle;
								qualites_conventions.benef_specialite_code = conventions.benef_specialite_code;
								qualites_conventions.benef_speicalite_libelle = conventions.benef_speicalite_libelle;
								qualites_conventions.benef_identifiant_type_code = conventions.benef_identifiant_type_code;
								qualites_conventions.identifiant_type = conventions.identifiant_type;
								qualites_conventions.benef_identifiant_valeur = conventions.benef_identifiant_valeur;
								qualites_conventions.benef_etablissement = conventions.benef_etablissement;
								qualites_conventions.benef_etablissement_codepostal = conventions.benef_etablissement_codepostal;
								qualites_conventions.benef_etablissement_ville = conventions.benef_etablissement_ville;
								qualites_conventions.benef_denomination_sociale = conventions.benef_denomination_sociale;
								qualites_conventions.benef_objet_social = conventions.benef_objet_social;
								qualites_conventions.ligne_type = conventions.ligne_type;
								qualites_conventions.conv_date_signature = conventions.conv_date_signature;
								qualites_conventions.conv_objet = conventions.conv_objet;
								qualites_conventions.conv_objet_autre = conventions.conv_objet_autre;
								qualites_conventions.conv_date_debut = conventions.conv_date_debut;
								qualites_conventions.conv_date_fin = conventions.conv_date_fin;
								qualites_conventions.conv_montant_ttc = conventions.conv_montant_ttc;
								qualites_conventions.conv_manifestation_date = conventions.conv_manifestation_date;
								qualites_conventions.conv_manifestation_nom = conventions.conv_manifestation_nom;
								qualites_conventions.conv_manifestation_lieu = conventions.conv_manifestation_lieu;
								qualites_conventions.conv_manifestation_organisateur = conventions.conv_manifestation_organisateur;
								if (qualites_conventions == null) {

									qualites_conventions = new qualites_conventionsStruct();
								}
								qualites_conventions.entreprise_identifiant = conventions.entreprise_identifiant;
								qualites_conventions.denomination_sociale = conventions.denomination_sociale;
								qualites_conventions.ligne_identifiant = conventions.ligne_identifiant;
								qualites_conventions.ligne_rectification = conventions.ligne_rectification;
								qualites_conventions.benef_categorie_code = conventions.benef_categorie_code;
								qualites_conventions.categorie = conventions.categorie;
								qualites_conventions.benef_nom = conventions.benef_nom;
								qualites_conventions.benef_prenom = conventions.benef_prenom;
								qualites_conventions.benef_qualite_code = conventions.benef_qualite_code;
								qualites_conventions.qualite = conventions.qualite;
								qualites_conventions.benef_adresse1 = conventions.benef_adresse1;
								qualites_conventions.benef_adresse2 = conventions.benef_adresse2;
								qualites_conventions.benef_adresse3 = conventions.benef_adresse3;
								qualites_conventions.benef_adresse4 = conventions.benef_adresse4;
								qualites_conventions.benef_codepostal = conventions.benef_codepostal;
								qualites_conventions.benef_ville = conventions.benef_ville;
								qualites_conventions.benef_pays_code = conventions.benef_pays_code;
								qualites_conventions.pays = conventions.pays;
								qualites_conventions.benef_titre_code = conventions.benef_titre_code;
								qualites_conventions.benef_titre_libelle = conventions.benef_titre_libelle;
								qualites_conventions.benef_specialite_code = conventions.benef_specialite_code;
								qualites_conventions.benef_speicalite_libelle = conventions.benef_speicalite_libelle;
								qualites_conventions.benef_identifiant_type_code = conventions.benef_identifiant_type_code;
								qualites_conventions.identifiant_type = conventions.identifiant_type;
								qualites_conventions.benef_identifiant_valeur = conventions.benef_identifiant_valeur;
								qualites_conventions.benef_etablissement = conventions.benef_etablissement;
								qualites_conventions.benef_etablissement_codepostal = conventions.benef_etablissement_codepostal;
								qualites_conventions.benef_etablissement_ville = conventions.benef_etablissement_ville;
								qualites_conventions.benef_denomination_sociale = conventions.benef_denomination_sociale;
								qualites_conventions.benef_objet_social = conventions.benef_objet_social;
								qualites_conventions.ligne_type = conventions.ligne_type;
								qualites_conventions.conv_date_signature = conventions.conv_date_signature;
								qualites_conventions.conv_objet = conventions.conv_objet;
								qualites_conventions.conv_objet_autre = conventions.conv_objet_autre;
								qualites_conventions.conv_date_debut = conventions.conv_date_debut;
								qualites_conventions.conv_date_fin = conventions.conv_date_fin;
								qualites_conventions.conv_montant_ttc = conventions.conv_montant_ttc;
								qualites_conventions.conv_manifestation_date = conventions.conv_manifestation_date;
								qualites_conventions.conv_manifestation_nom = conventions.conv_manifestation_nom;
								qualites_conventions.conv_manifestation_lieu = conventions.conv_manifestation_lieu;
								qualites_conventions.conv_manifestation_organisateur = conventions.conv_manifestation_organisateur;
								nb_uniques_tUniqRow_2++;
							} else {
								nb_duplicates_tUniqRow_2++;
							}

							tos_count_tUniqRow_2++;

							/**
							 * [tUniqRow_2 main ] stop
							 */

							/**
							 * [tUniqRow_2 process_data_begin ] start
							 */

							currentComponent = "tUniqRow_2";

							/**
							 * [tUniqRow_2 process_data_begin ] stop
							 */
// Start of branch "qualites_conventions"
							if (qualites_conventions != null) {

								/**
								 * [tAdvancedHash_qualites_conventions main ] start
								 */

								currentComponent = "tAdvancedHash_qualites_conventions";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "qualites_conventions");
								}

								qualites_conventionsStruct qualites_conventions_HashRow = new qualites_conventionsStruct();

								qualites_conventions_HashRow.entreprise_identifiant = qualites_conventions.entreprise_identifiant;

								qualites_conventions_HashRow.denomination_sociale = qualites_conventions.denomination_sociale;

								qualites_conventions_HashRow.ligne_identifiant = qualites_conventions.ligne_identifiant;

								qualites_conventions_HashRow.ligne_rectification = qualites_conventions.ligne_rectification;

								qualites_conventions_HashRow.benef_categorie_code = qualites_conventions.benef_categorie_code;

								qualites_conventions_HashRow.categorie = qualites_conventions.categorie;

								qualites_conventions_HashRow.benef_nom = qualites_conventions.benef_nom;

								qualites_conventions_HashRow.benef_prenom = qualites_conventions.benef_prenom;

								qualites_conventions_HashRow.benef_qualite_code = qualites_conventions.benef_qualite_code;

								qualites_conventions_HashRow.qualite = qualites_conventions.qualite;

								qualites_conventions_HashRow.benef_adresse1 = qualites_conventions.benef_adresse1;

								qualites_conventions_HashRow.benef_adresse2 = qualites_conventions.benef_adresse2;

								qualites_conventions_HashRow.benef_adresse3 = qualites_conventions.benef_adresse3;

								qualites_conventions_HashRow.benef_adresse4 = qualites_conventions.benef_adresse4;

								qualites_conventions_HashRow.benef_codepostal = qualites_conventions.benef_codepostal;

								qualites_conventions_HashRow.benef_ville = qualites_conventions.benef_ville;

								qualites_conventions_HashRow.benef_pays_code = qualites_conventions.benef_pays_code;

								qualites_conventions_HashRow.pays = qualites_conventions.pays;

								qualites_conventions_HashRow.benef_titre_code = qualites_conventions.benef_titre_code;

								qualites_conventions_HashRow.benef_titre_libelle = qualites_conventions.benef_titre_libelle;

								qualites_conventions_HashRow.benef_specialite_code = qualites_conventions.benef_specialite_code;

								qualites_conventions_HashRow.benef_speicalite_libelle = qualites_conventions.benef_speicalite_libelle;

								qualites_conventions_HashRow.benef_identifiant_type_code = qualites_conventions.benef_identifiant_type_code;

								qualites_conventions_HashRow.identifiant_type = qualites_conventions.identifiant_type;

								qualites_conventions_HashRow.benef_identifiant_valeur = qualites_conventions.benef_identifiant_valeur;

								qualites_conventions_HashRow.benef_etablissement = qualites_conventions.benef_etablissement;

								qualites_conventions_HashRow.benef_etablissement_codepostal = qualites_conventions.benef_etablissement_codepostal;

								qualites_conventions_HashRow.benef_etablissement_ville = qualites_conventions.benef_etablissement_ville;

								qualites_conventions_HashRow.benef_denomination_sociale = qualites_conventions.benef_denomination_sociale;

								qualites_conventions_HashRow.benef_objet_social = qualites_conventions.benef_objet_social;

								qualites_conventions_HashRow.ligne_type = qualites_conventions.ligne_type;

								qualites_conventions_HashRow.conv_date_signature = qualites_conventions.conv_date_signature;

								qualites_conventions_HashRow.conv_objet = qualites_conventions.conv_objet;

								qualites_conventions_HashRow.conv_objet_autre = qualites_conventions.conv_objet_autre;

								qualites_conventions_HashRow.conv_date_debut = qualites_conventions.conv_date_debut;

								qualites_conventions_HashRow.conv_date_fin = qualites_conventions.conv_date_fin;

								qualites_conventions_HashRow.conv_montant_ttc = qualites_conventions.conv_montant_ttc;

								qualites_conventions_HashRow.conv_manifestation_date = qualites_conventions.conv_manifestation_date;

								qualites_conventions_HashRow.conv_manifestation_nom = qualites_conventions.conv_manifestation_nom;

								qualites_conventions_HashRow.conv_manifestation_lieu = qualites_conventions.conv_manifestation_lieu;

								qualites_conventions_HashRow.conv_manifestation_organisateur = qualites_conventions.conv_manifestation_organisateur;

								tHash_Lookup_qualites_conventions.put(qualites_conventions_HashRow);

								tos_count_tAdvancedHash_qualites_conventions++;

								/**
								 * [tAdvancedHash_qualites_conventions main ] stop
								 */

								/**
								 * [tAdvancedHash_qualites_conventions process_data_begin ] start
								 */

								currentComponent = "tAdvancedHash_qualites_conventions";

								/**
								 * [tAdvancedHash_qualites_conventions process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_qualites_conventions process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_qualites_conventions";

								/**
								 * [tAdvancedHash_qualites_conventions process_data_end ] stop
								 */

							} // End of branch "qualites_conventions"

							/**
							 * [tUniqRow_2 process_data_end ] start
							 */

							currentComponent = "tUniqRow_2";

							/**
							 * [tUniqRow_2 process_data_end ] stop
							 */

						} // End of branch "conventions"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("C:/BI/transparence-sante/data/data.gouv/conventions.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tUniqRow_2 end ] start
				 */

				currentComponent = "tUniqRow_2";

				globalMap.put("tUniqRow_2_NB_UNIQUES", nb_uniques_tUniqRow_2);
				globalMap.put("tUniqRow_2_NB_DUPLICATES", nb_duplicates_tUniqRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "conventions");
				}

				ok_Hash.put("tUniqRow_2", true);
				end_Hash.put("tUniqRow_2", System.currentTimeMillis());

				/**
				 * [tUniqRow_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_qualites_conventions end ] start
				 */

				currentComponent = "tAdvancedHash_qualites_conventions";

				tHash_Lookup_qualites_conventions.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "qualites_conventions");
				}

				ok_Hash.put("tAdvancedHash_qualites_conventions", true);
				end_Hash.put("tAdvancedHash_qualites_conventions", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_qualites_conventions end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tUniqRow_2 finally ] start
				 */

				currentComponent = "tUniqRow_2";

				/**
				 * [tUniqRow_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_qualites_conventions finally ] start
				 */

				currentComponent = "tAdvancedHash_qualites_conventions";

				/**
				 * [tAdvancedHash_qualites_conventions finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class qualites_remunerationsStruct
			implements routines.system.IPersistableComparableLookupRow<qualites_remunerationsStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String denomination_sociale;

		public String getDenomination_sociale() {
			return this.denomination_sociale;
		}

		public String ligne_identifiant;

		public String getLigne_identifiant() {
			return this.ligne_identifiant;
		}

		public Character ligne_rectification;

		public Character getLigne_rectification() {
			return this.ligne_rectification;
		}

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String categorie;

		public String getCategorie() {
			return this.categorie;
		}

		public String benef_nom;

		public String getBenef_nom() {
			return this.benef_nom;
		}

		public String benef_prenom;

		public String getBenef_prenom() {
			return this.benef_prenom;
		}

		public String benef_qualite_code;

		public String getBenef_qualite_code() {
			return this.benef_qualite_code;
		}

		public String qualite;

		public String getQualite() {
			return this.qualite;
		}

		public String benef_adresse1;

		public String getBenef_adresse1() {
			return this.benef_adresse1;
		}

		public String benef_adresse2;

		public String getBenef_adresse2() {
			return this.benef_adresse2;
		}

		public String benef_adresse3;

		public String getBenef_adresse3() {
			return this.benef_adresse3;
		}

		public String benef_adresse4;

		public String getBenef_adresse4() {
			return this.benef_adresse4;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_ville;

		public String getBenef_ville() {
			return this.benef_ville;
		}

		public String benef_pays_code;

		public String getBenef_pays_code() {
			return this.benef_pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String benef_titre_code;

		public String getBenef_titre_code() {
			return this.benef_titre_code;
		}

		public String benef_titre_libelle;

		public String getBenef_titre_libelle() {
			return this.benef_titre_libelle;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_speicalite_libelle;

		public String getBenef_speicalite_libelle() {
			return this.benef_speicalite_libelle;
		}

		public String benef_identifiant_type_code;

		public String getBenef_identifiant_type_code() {
			return this.benef_identifiant_type_code;
		}

		public String identifiant_type;

		public String getIdentifiant_type() {
			return this.identifiant_type;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String benef_etablissement;

		public String getBenef_etablissement() {
			return this.benef_etablissement;
		}

		public String benef_etablissement_codepostal;

		public String getBenef_etablissement_codepostal() {
			return this.benef_etablissement_codepostal;
		}

		public String benef_etablissement_ville;

		public String getBenef_etablissement_ville() {
			return this.benef_etablissement_ville;
		}

		public String benef_denomination_sociale;

		public String getBenef_denomination_sociale() {
			return this.benef_denomination_sociale;
		}

		public String benef_objet_social;

		public String getBenef_objet_social() {
			return this.benef_objet_social;
		}

		public String ligne_type;

		public String getLigne_type() {
			return this.ligne_type;
		}

		public String remu_date;

		public String getRemu_date() {
			return this.remu_date;
		}

		public Integer remu_montant_ttc;

		public Integer getRemu_montant_ttc() {
			return this.remu_montant_ttc;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.benef_qualite_code == null) ? 0 : this.benef_qualite_code.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final qualites_remunerationsStruct other = (qualites_remunerationsStruct) obj;

			if (this.benef_qualite_code == null) {
				if (other.benef_qualite_code != null)
					return false;

			} else if (!this.benef_qualite_code.equals(other.benef_qualite_code))

				return false;

			return true;
		}

		public void copyDataTo(qualites_remunerationsStruct other) {

			other.entreprise_identifiant = this.entreprise_identifiant;
			other.denomination_sociale = this.denomination_sociale;
			other.ligne_identifiant = this.ligne_identifiant;
			other.ligne_rectification = this.ligne_rectification;
			other.benef_categorie_code = this.benef_categorie_code;
			other.categorie = this.categorie;
			other.benef_nom = this.benef_nom;
			other.benef_prenom = this.benef_prenom;
			other.benef_qualite_code = this.benef_qualite_code;
			other.qualite = this.qualite;
			other.benef_adresse1 = this.benef_adresse1;
			other.benef_adresse2 = this.benef_adresse2;
			other.benef_adresse3 = this.benef_adresse3;
			other.benef_adresse4 = this.benef_adresse4;
			other.benef_codepostal = this.benef_codepostal;
			other.benef_ville = this.benef_ville;
			other.benef_pays_code = this.benef_pays_code;
			other.pays = this.pays;
			other.benef_titre_code = this.benef_titre_code;
			other.benef_titre_libelle = this.benef_titre_libelle;
			other.benef_specialite_code = this.benef_specialite_code;
			other.benef_speicalite_libelle = this.benef_speicalite_libelle;
			other.benef_identifiant_type_code = this.benef_identifiant_type_code;
			other.identifiant_type = this.identifiant_type;
			other.benef_identifiant_valeur = this.benef_identifiant_valeur;
			other.benef_etablissement = this.benef_etablissement;
			other.benef_etablissement_codepostal = this.benef_etablissement_codepostal;
			other.benef_etablissement_ville = this.benef_etablissement_ville;
			other.benef_denomination_sociale = this.benef_denomination_sociale;
			other.benef_objet_social = this.benef_objet_social;
			other.ligne_type = this.ligne_type;
			other.remu_date = this.remu_date;
			other.remu_montant_ttc = this.remu_montant_ttc;

		}

		public void copyKeysDataTo(qualites_remunerationsStruct other) {

			other.benef_qualite_code = this.benef_qualite_code;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim) {

				try {

					int length = 0;

					this.benef_qualite_code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.benef_qualite_code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.entreprise_identifiant = readString(dis, ois);

				this.denomination_sociale = readString(dis, ois);

				this.ligne_identifiant = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.ligne_rectification = null;
				} else {
					this.ligne_rectification = dis.readChar();
				}

				this.benef_categorie_code = readString(dis, ois);

				this.categorie = readString(dis, ois);

				this.benef_nom = readString(dis, ois);

				this.benef_prenom = readString(dis, ois);

				this.qualite = readString(dis, ois);

				this.benef_adresse1 = readString(dis, ois);

				this.benef_adresse2 = readString(dis, ois);

				this.benef_adresse3 = readString(dis, ois);

				this.benef_adresse4 = readString(dis, ois);

				this.benef_codepostal = readString(dis, ois);

				this.benef_ville = readString(dis, ois);

				this.benef_pays_code = readString(dis, ois);

				this.pays = readString(dis, ois);

				this.benef_titre_code = readString(dis, ois);

				this.benef_titre_libelle = readString(dis, ois);

				this.benef_specialite_code = readString(dis, ois);

				this.benef_speicalite_libelle = readString(dis, ois);

				this.benef_identifiant_type_code = readString(dis, ois);

				this.identifiant_type = readString(dis, ois);

				this.benef_identifiant_valeur = readString(dis, ois);

				this.benef_etablissement = readString(dis, ois);

				this.benef_etablissement_codepostal = readString(dis, ois);

				this.benef_etablissement_ville = readString(dis, ois);

				this.benef_denomination_sociale = readString(dis, ois);

				this.benef_objet_social = readString(dis, ois);

				this.ligne_type = readString(dis, ois);

				this.remu_date = readString(dis, ois);

				this.remu_montant_ttc = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.entreprise_identifiant, dos, oos);

				writeString(this.denomination_sociale, dos, oos);

				writeString(this.ligne_identifiant, dos, oos);

				if (this.ligne_rectification == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.ligne_rectification);
				}

				writeString(this.benef_categorie_code, dos, oos);

				writeString(this.categorie, dos, oos);

				writeString(this.benef_nom, dos, oos);

				writeString(this.benef_prenom, dos, oos);

				writeString(this.qualite, dos, oos);

				writeString(this.benef_adresse1, dos, oos);

				writeString(this.benef_adresse2, dos, oos);

				writeString(this.benef_adresse3, dos, oos);

				writeString(this.benef_adresse4, dos, oos);

				writeString(this.benef_codepostal, dos, oos);

				writeString(this.benef_ville, dos, oos);

				writeString(this.benef_pays_code, dos, oos);

				writeString(this.pays, dos, oos);

				writeString(this.benef_titre_code, dos, oos);

				writeString(this.benef_titre_libelle, dos, oos);

				writeString(this.benef_specialite_code, dos, oos);

				writeString(this.benef_speicalite_libelle, dos, oos);

				writeString(this.benef_identifiant_type_code, dos, oos);

				writeString(this.identifiant_type, dos, oos);

				writeString(this.benef_identifiant_valeur, dos, oos);

				writeString(this.benef_etablissement, dos, oos);

				writeString(this.benef_etablissement_codepostal, dos, oos);

				writeString(this.benef_etablissement_ville, dos, oos);

				writeString(this.benef_denomination_sociale, dos, oos);

				writeString(this.benef_objet_social, dos, oos);

				writeString(this.ligne_type, dos, oos);

				writeString(this.remu_date, dos, oos);

				writeInteger(this.remu_montant_ttc, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",denomination_sociale=" + denomination_sociale);
			sb.append(",ligne_identifiant=" + ligne_identifiant);
			sb.append(",ligne_rectification=" + String.valueOf(ligne_rectification));
			sb.append(",benef_categorie_code=" + benef_categorie_code);
			sb.append(",categorie=" + categorie);
			sb.append(",benef_nom=" + benef_nom);
			sb.append(",benef_prenom=" + benef_prenom);
			sb.append(",benef_qualite_code=" + benef_qualite_code);
			sb.append(",qualite=" + qualite);
			sb.append(",benef_adresse1=" + benef_adresse1);
			sb.append(",benef_adresse2=" + benef_adresse2);
			sb.append(",benef_adresse3=" + benef_adresse3);
			sb.append(",benef_adresse4=" + benef_adresse4);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_ville=" + benef_ville);
			sb.append(",benef_pays_code=" + benef_pays_code);
			sb.append(",pays=" + pays);
			sb.append(",benef_titre_code=" + benef_titre_code);
			sb.append(",benef_titre_libelle=" + benef_titre_libelle);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_speicalite_libelle=" + benef_speicalite_libelle);
			sb.append(",benef_identifiant_type_code=" + benef_identifiant_type_code);
			sb.append(",identifiant_type=" + identifiant_type);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",benef_etablissement=" + benef_etablissement);
			sb.append(",benef_etablissement_codepostal=" + benef_etablissement_codepostal);
			sb.append(",benef_etablissement_ville=" + benef_etablissement_ville);
			sb.append(",benef_denomination_sociale=" + benef_denomination_sociale);
			sb.append(",benef_objet_social=" + benef_objet_social);
			sb.append(",ligne_type=" + ligne_type);
			sb.append(",remu_date=" + remu_date);
			sb.append(",remu_montant_ttc=" + String.valueOf(remu_montant_ttc));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(qualites_remunerationsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.benef_qualite_code, other.benef_qualite_code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class remunerationsStruct implements routines.system.IPersistableRow<remunerationsStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[0];

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String denomination_sociale;

		public String getDenomination_sociale() {
			return this.denomination_sociale;
		}

		public String ligne_identifiant;

		public String getLigne_identifiant() {
			return this.ligne_identifiant;
		}

		public Character ligne_rectification;

		public Character getLigne_rectification() {
			return this.ligne_rectification;
		}

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String categorie;

		public String getCategorie() {
			return this.categorie;
		}

		public String benef_nom;

		public String getBenef_nom() {
			return this.benef_nom;
		}

		public String benef_prenom;

		public String getBenef_prenom() {
			return this.benef_prenom;
		}

		public String benef_qualite_code;

		public String getBenef_qualite_code() {
			return this.benef_qualite_code;
		}

		public String qualite;

		public String getQualite() {
			return this.qualite;
		}

		public String benef_adresse1;

		public String getBenef_adresse1() {
			return this.benef_adresse1;
		}

		public String benef_adresse2;

		public String getBenef_adresse2() {
			return this.benef_adresse2;
		}

		public String benef_adresse3;

		public String getBenef_adresse3() {
			return this.benef_adresse3;
		}

		public String benef_adresse4;

		public String getBenef_adresse4() {
			return this.benef_adresse4;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_ville;

		public String getBenef_ville() {
			return this.benef_ville;
		}

		public String benef_pays_code;

		public String getBenef_pays_code() {
			return this.benef_pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String benef_titre_code;

		public String getBenef_titre_code() {
			return this.benef_titre_code;
		}

		public String benef_titre_libelle;

		public String getBenef_titre_libelle() {
			return this.benef_titre_libelle;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_speicalite_libelle;

		public String getBenef_speicalite_libelle() {
			return this.benef_speicalite_libelle;
		}

		public String benef_identifiant_type_code;

		public String getBenef_identifiant_type_code() {
			return this.benef_identifiant_type_code;
		}

		public String identifiant_type;

		public String getIdentifiant_type() {
			return this.identifiant_type;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String benef_etablissement;

		public String getBenef_etablissement() {
			return this.benef_etablissement;
		}

		public String benef_etablissement_codepostal;

		public String getBenef_etablissement_codepostal() {
			return this.benef_etablissement_codepostal;
		}

		public String benef_etablissement_ville;

		public String getBenef_etablissement_ville() {
			return this.benef_etablissement_ville;
		}

		public String benef_denomination_sociale;

		public String getBenef_denomination_sociale() {
			return this.benef_denomination_sociale;
		}

		public String benef_objet_social;

		public String getBenef_objet_social() {
			return this.benef_objet_social;
		}

		public String ligne_type;

		public String getLigne_type() {
			return this.ligne_type;
		}

		public String remu_date;

		public String getRemu_date() {
			return this.remu_date;
		}

		public Integer remu_montant_ttc;

		public Integer getRemu_montant_ttc() {
			return this.remu_montant_ttc;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_qualite_beneficiaire_dim) {

				try {

					int length = 0;

					this.entreprise_identifiant = readString(dis);

					this.denomination_sociale = readString(dis);

					this.ligne_identifiant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ligne_rectification = null;
					} else {
						this.ligne_rectification = dis.readChar();
					}

					this.benef_categorie_code = readString(dis);

					this.categorie = readString(dis);

					this.benef_nom = readString(dis);

					this.benef_prenom = readString(dis);

					this.benef_qualite_code = readString(dis);

					this.qualite = readString(dis);

					this.benef_adresse1 = readString(dis);

					this.benef_adresse2 = readString(dis);

					this.benef_adresse3 = readString(dis);

					this.benef_adresse4 = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_ville = readString(dis);

					this.benef_pays_code = readString(dis);

					this.pays = readString(dis);

					this.benef_titre_code = readString(dis);

					this.benef_titre_libelle = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_speicalite_libelle = readString(dis);

					this.benef_identifiant_type_code = readString(dis);

					this.identifiant_type = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.benef_etablissement = readString(dis);

					this.benef_etablissement_codepostal = readString(dis);

					this.benef_etablissement_ville = readString(dis);

					this.benef_denomination_sociale = readString(dis);

					this.benef_objet_social = readString(dis);

					this.ligne_type = readString(dis);

					this.remu_date = readString(dis);

					this.remu_montant_ttc = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entreprise_identifiant, dos);

				// String

				writeString(this.denomination_sociale, dos);

				// String

				writeString(this.ligne_identifiant, dos);

				// Character

				if (this.ligne_rectification == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.ligne_rectification);
				}

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.categorie, dos);

				// String

				writeString(this.benef_nom, dos);

				// String

				writeString(this.benef_prenom, dos);

				// String

				writeString(this.benef_qualite_code, dos);

				// String

				writeString(this.qualite, dos);

				// String

				writeString(this.benef_adresse1, dos);

				// String

				writeString(this.benef_adresse2, dos);

				// String

				writeString(this.benef_adresse3, dos);

				// String

				writeString(this.benef_adresse4, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_ville, dos);

				// String

				writeString(this.benef_pays_code, dos);

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.benef_titre_code, dos);

				// String

				writeString(this.benef_titre_libelle, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_speicalite_libelle, dos);

				// String

				writeString(this.benef_identifiant_type_code, dos);

				// String

				writeString(this.identifiant_type, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.benef_etablissement, dos);

				// String

				writeString(this.benef_etablissement_codepostal, dos);

				// String

				writeString(this.benef_etablissement_ville, dos);

				// String

				writeString(this.benef_denomination_sociale, dos);

				// String

				writeString(this.benef_objet_social, dos);

				// String

				writeString(this.ligne_type, dos);

				// String

				writeString(this.remu_date, dos);

				// Integer

				writeInteger(this.remu_montant_ttc, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",denomination_sociale=" + denomination_sociale);
			sb.append(",ligne_identifiant=" + ligne_identifiant);
			sb.append(",ligne_rectification=" + String.valueOf(ligne_rectification));
			sb.append(",benef_categorie_code=" + benef_categorie_code);
			sb.append(",categorie=" + categorie);
			sb.append(",benef_nom=" + benef_nom);
			sb.append(",benef_prenom=" + benef_prenom);
			sb.append(",benef_qualite_code=" + benef_qualite_code);
			sb.append(",qualite=" + qualite);
			sb.append(",benef_adresse1=" + benef_adresse1);
			sb.append(",benef_adresse2=" + benef_adresse2);
			sb.append(",benef_adresse3=" + benef_adresse3);
			sb.append(",benef_adresse4=" + benef_adresse4);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_ville=" + benef_ville);
			sb.append(",benef_pays_code=" + benef_pays_code);
			sb.append(",pays=" + pays);
			sb.append(",benef_titre_code=" + benef_titre_code);
			sb.append(",benef_titre_libelle=" + benef_titre_libelle);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_speicalite_libelle=" + benef_speicalite_libelle);
			sb.append(",benef_identifiant_type_code=" + benef_identifiant_type_code);
			sb.append(",identifiant_type=" + identifiant_type);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",benef_etablissement=" + benef_etablissement);
			sb.append(",benef_etablissement_codepostal=" + benef_etablissement_codepostal);
			sb.append(",benef_etablissement_ville=" + benef_etablissement_ville);
			sb.append(",benef_denomination_sociale=" + benef_denomination_sociale);
			sb.append(",benef_objet_social=" + benef_objet_social);
			sb.append(",ligne_type=" + ligne_type);
			sb.append(",remu_date=" + remu_date);
			sb.append(",remu_montant_ttc=" + String.valueOf(remu_montant_ttc));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(remunerationsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				remunerationsStruct remunerations = new remunerationsStruct();
				qualites_remunerationsStruct qualites_remunerations = new qualites_remunerationsStruct();

				/**
				 * [tAdvancedHash_qualites_remunerations begin ] start
				 */

				ok_Hash.put("tAdvancedHash_qualites_remunerations", false);
				start_Hash.put("tAdvancedHash_qualites_remunerations", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_qualites_remunerations";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "qualites_remunerations");
				}

				int tos_count_tAdvancedHash_qualites_remunerations = 0;

				// connection name:qualites_remunerations
				// source node:tUniqRow_3 - inputs:(remunerations)
				// outputs:(qualites_remunerations,qualites_remunerations) | target
				// node:tAdvancedHash_qualites_remunerations - inputs:(qualites_remunerations)
				// outputs:()
				// linked node: tMap_1 -
				// inputs:(qualites_avantages,qualites_conventions,qualites_remunerations)
				// outputs:(qualites)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_qualites_remunerations = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<qualites_remunerationsStruct> tHash_Lookup_qualites_remunerations = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<qualites_remunerationsStruct>getLookup(matchingModeEnum_qualites_remunerations);

				globalMap.put("tHash_Lookup_qualites_remunerations", tHash_Lookup_qualites_remunerations);

				/**
				 * [tAdvancedHash_qualites_remunerations begin ] stop
				 */

				/**
				 * [tUniqRow_3 begin ] start
				 */

				ok_Hash.put("tUniqRow_3", false);
				start_Hash.put("tUniqRow_3", System.currentTimeMillis());

				currentComponent = "tUniqRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "remunerations");
				}

				int tos_count_tUniqRow_3 = 0;

				class KeyStruct_tUniqRow_3 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String benef_qualite_code;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.benef_qualite_code == null) ? 0 : this.benef_qualite_code.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;

						if (this.benef_qualite_code == null) {
							if (other.benef_qualite_code != null)
								return false;

						} else if (!this.benef_qualite_code.equals(other.benef_qualite_code))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_3 = 0;
				int nb_duplicates_tUniqRow_3 = 0;
				KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
				java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>();

				/**
				 * [tUniqRow_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try {

					Object filename_tFileInputDelimited_3 = "C:/BI/transparence-sante/data/data.gouv/remunerations.csv";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0 || random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								"C:/BI/transparence-sante/data/data.gouv/remunerations.csv", "UTF-8", ";", "\n", false,
								1, 0, limit_tFileInputDelimited_3, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						remunerations = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						remunerations = new remunerationsStruct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_3 = 0;

							remunerations.entreprise_identifiant = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 1;

							remunerations.denomination_sociale = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 2;

							remunerations.ligne_identifiant = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 3;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									remunerations.ligne_rectification = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ligne_rectification", "remunerations", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								remunerations.ligne_rectification = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 4;

							remunerations.benef_categorie_code = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 5;

							remunerations.categorie = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 6;

							remunerations.benef_nom = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 7;

							remunerations.benef_prenom = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 8;

							remunerations.benef_qualite_code = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 9;

							remunerations.qualite = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 10;

							remunerations.benef_adresse1 = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 11;

							remunerations.benef_adresse2 = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 12;

							remunerations.benef_adresse3 = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 13;

							remunerations.benef_adresse4 = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 14;

							remunerations.benef_codepostal = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 15;

							remunerations.benef_ville = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 16;

							remunerations.benef_pays_code = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 17;

							remunerations.pays = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 18;

							remunerations.benef_titre_code = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 19;

							remunerations.benef_titre_libelle = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 20;

							remunerations.benef_specialite_code = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 21;

							remunerations.benef_speicalite_libelle = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 22;

							remunerations.benef_identifiant_type_code = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 23;

							remunerations.identifiant_type = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 24;

							remunerations.benef_identifiant_valeur = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 25;

							remunerations.benef_etablissement = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 26;

							remunerations.benef_etablissement_codepostal = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 27;

							remunerations.benef_etablissement_ville = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 28;

							remunerations.benef_denomination_sociale = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 29;

							remunerations.benef_objet_social = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 30;

							remunerations.ligne_type = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 31;

							remunerations.remu_date = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 32;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									remunerations.remu_montant_ttc = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"remu_montant_ttc", "remunerations", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								remunerations.remu_montant_ttc = null;

							}

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							remunerations = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "remunerations"
						if (remunerations != null) {

							/**
							 * [tUniqRow_3 main ] start
							 */

							currentComponent = "tUniqRow_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "remunerations");
							}

							qualites_remunerations = null;
							qualites_remunerations = null;
							if (remunerations.benef_qualite_code == null) {
								finder_tUniqRow_3.benef_qualite_code = null;
							} else {
								finder_tUniqRow_3.benef_qualite_code = remunerations.benef_qualite_code.toLowerCase();
							}
							finder_tUniqRow_3.hashCodeDirty = true;
							if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
								KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

								if (remunerations.benef_qualite_code == null) {
									new_tUniqRow_3.benef_qualite_code = null;
								} else {
									new_tUniqRow_3.benef_qualite_code = remunerations.benef_qualite_code.toLowerCase();
								}

								keystUniqRow_3.add(new_tUniqRow_3);
								if (qualites_remunerations == null) {

									qualites_remunerations = new qualites_remunerationsStruct();
								}
								qualites_remunerations.entreprise_identifiant = remunerations.entreprise_identifiant;
								qualites_remunerations.denomination_sociale = remunerations.denomination_sociale;
								qualites_remunerations.ligne_identifiant = remunerations.ligne_identifiant;
								qualites_remunerations.ligne_rectification = remunerations.ligne_rectification;
								qualites_remunerations.benef_categorie_code = remunerations.benef_categorie_code;
								qualites_remunerations.categorie = remunerations.categorie;
								qualites_remunerations.benef_nom = remunerations.benef_nom;
								qualites_remunerations.benef_prenom = remunerations.benef_prenom;
								qualites_remunerations.benef_qualite_code = remunerations.benef_qualite_code;
								qualites_remunerations.qualite = remunerations.qualite;
								qualites_remunerations.benef_adresse1 = remunerations.benef_adresse1;
								qualites_remunerations.benef_adresse2 = remunerations.benef_adresse2;
								qualites_remunerations.benef_adresse3 = remunerations.benef_adresse3;
								qualites_remunerations.benef_adresse4 = remunerations.benef_adresse4;
								qualites_remunerations.benef_codepostal = remunerations.benef_codepostal;
								qualites_remunerations.benef_ville = remunerations.benef_ville;
								qualites_remunerations.benef_pays_code = remunerations.benef_pays_code;
								qualites_remunerations.pays = remunerations.pays;
								qualites_remunerations.benef_titre_code = remunerations.benef_titre_code;
								qualites_remunerations.benef_titre_libelle = remunerations.benef_titre_libelle;
								qualites_remunerations.benef_specialite_code = remunerations.benef_specialite_code;
								qualites_remunerations.benef_speicalite_libelle = remunerations.benef_speicalite_libelle;
								qualites_remunerations.benef_identifiant_type_code = remunerations.benef_identifiant_type_code;
								qualites_remunerations.identifiant_type = remunerations.identifiant_type;
								qualites_remunerations.benef_identifiant_valeur = remunerations.benef_identifiant_valeur;
								qualites_remunerations.benef_etablissement = remunerations.benef_etablissement;
								qualites_remunerations.benef_etablissement_codepostal = remunerations.benef_etablissement_codepostal;
								qualites_remunerations.benef_etablissement_ville = remunerations.benef_etablissement_ville;
								qualites_remunerations.benef_denomination_sociale = remunerations.benef_denomination_sociale;
								qualites_remunerations.benef_objet_social = remunerations.benef_objet_social;
								qualites_remunerations.ligne_type = remunerations.ligne_type;
								qualites_remunerations.remu_date = remunerations.remu_date;
								qualites_remunerations.remu_montant_ttc = remunerations.remu_montant_ttc;
								if (qualites_remunerations == null) {

									qualites_remunerations = new qualites_remunerationsStruct();
								}
								qualites_remunerations.entreprise_identifiant = remunerations.entreprise_identifiant;
								qualites_remunerations.denomination_sociale = remunerations.denomination_sociale;
								qualites_remunerations.ligne_identifiant = remunerations.ligne_identifiant;
								qualites_remunerations.ligne_rectification = remunerations.ligne_rectification;
								qualites_remunerations.benef_categorie_code = remunerations.benef_categorie_code;
								qualites_remunerations.categorie = remunerations.categorie;
								qualites_remunerations.benef_nom = remunerations.benef_nom;
								qualites_remunerations.benef_prenom = remunerations.benef_prenom;
								qualites_remunerations.benef_qualite_code = remunerations.benef_qualite_code;
								qualites_remunerations.qualite = remunerations.qualite;
								qualites_remunerations.benef_adresse1 = remunerations.benef_adresse1;
								qualites_remunerations.benef_adresse2 = remunerations.benef_adresse2;
								qualites_remunerations.benef_adresse3 = remunerations.benef_adresse3;
								qualites_remunerations.benef_adresse4 = remunerations.benef_adresse4;
								qualites_remunerations.benef_codepostal = remunerations.benef_codepostal;
								qualites_remunerations.benef_ville = remunerations.benef_ville;
								qualites_remunerations.benef_pays_code = remunerations.benef_pays_code;
								qualites_remunerations.pays = remunerations.pays;
								qualites_remunerations.benef_titre_code = remunerations.benef_titre_code;
								qualites_remunerations.benef_titre_libelle = remunerations.benef_titre_libelle;
								qualites_remunerations.benef_specialite_code = remunerations.benef_specialite_code;
								qualites_remunerations.benef_speicalite_libelle = remunerations.benef_speicalite_libelle;
								qualites_remunerations.benef_identifiant_type_code = remunerations.benef_identifiant_type_code;
								qualites_remunerations.identifiant_type = remunerations.identifiant_type;
								qualites_remunerations.benef_identifiant_valeur = remunerations.benef_identifiant_valeur;
								qualites_remunerations.benef_etablissement = remunerations.benef_etablissement;
								qualites_remunerations.benef_etablissement_codepostal = remunerations.benef_etablissement_codepostal;
								qualites_remunerations.benef_etablissement_ville = remunerations.benef_etablissement_ville;
								qualites_remunerations.benef_denomination_sociale = remunerations.benef_denomination_sociale;
								qualites_remunerations.benef_objet_social = remunerations.benef_objet_social;
								qualites_remunerations.ligne_type = remunerations.ligne_type;
								qualites_remunerations.remu_date = remunerations.remu_date;
								qualites_remunerations.remu_montant_ttc = remunerations.remu_montant_ttc;
								nb_uniques_tUniqRow_3++;
							} else {
								nb_duplicates_tUniqRow_3++;
							}

							tos_count_tUniqRow_3++;

							/**
							 * [tUniqRow_3 main ] stop
							 */

							/**
							 * [tUniqRow_3 process_data_begin ] start
							 */

							currentComponent = "tUniqRow_3";

							/**
							 * [tUniqRow_3 process_data_begin ] stop
							 */
// Start of branch "qualites_remunerations"
							if (qualites_remunerations != null) {

								/**
								 * [tAdvancedHash_qualites_remunerations main ] start
								 */

								currentComponent = "tAdvancedHash_qualites_remunerations";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "qualites_remunerations");
								}

								qualites_remunerationsStruct qualites_remunerations_HashRow = new qualites_remunerationsStruct();

								qualites_remunerations_HashRow.entreprise_identifiant = qualites_remunerations.entreprise_identifiant;

								qualites_remunerations_HashRow.denomination_sociale = qualites_remunerations.denomination_sociale;

								qualites_remunerations_HashRow.ligne_identifiant = qualites_remunerations.ligne_identifiant;

								qualites_remunerations_HashRow.ligne_rectification = qualites_remunerations.ligne_rectification;

								qualites_remunerations_HashRow.benef_categorie_code = qualites_remunerations.benef_categorie_code;

								qualites_remunerations_HashRow.categorie = qualites_remunerations.categorie;

								qualites_remunerations_HashRow.benef_nom = qualites_remunerations.benef_nom;

								qualites_remunerations_HashRow.benef_prenom = qualites_remunerations.benef_prenom;

								qualites_remunerations_HashRow.benef_qualite_code = qualites_remunerations.benef_qualite_code;

								qualites_remunerations_HashRow.qualite = qualites_remunerations.qualite;

								qualites_remunerations_HashRow.benef_adresse1 = qualites_remunerations.benef_adresse1;

								qualites_remunerations_HashRow.benef_adresse2 = qualites_remunerations.benef_adresse2;

								qualites_remunerations_HashRow.benef_adresse3 = qualites_remunerations.benef_adresse3;

								qualites_remunerations_HashRow.benef_adresse4 = qualites_remunerations.benef_adresse4;

								qualites_remunerations_HashRow.benef_codepostal = qualites_remunerations.benef_codepostal;

								qualites_remunerations_HashRow.benef_ville = qualites_remunerations.benef_ville;

								qualites_remunerations_HashRow.benef_pays_code = qualites_remunerations.benef_pays_code;

								qualites_remunerations_HashRow.pays = qualites_remunerations.pays;

								qualites_remunerations_HashRow.benef_titre_code = qualites_remunerations.benef_titre_code;

								qualites_remunerations_HashRow.benef_titre_libelle = qualites_remunerations.benef_titre_libelle;

								qualites_remunerations_HashRow.benef_specialite_code = qualites_remunerations.benef_specialite_code;

								qualites_remunerations_HashRow.benef_speicalite_libelle = qualites_remunerations.benef_speicalite_libelle;

								qualites_remunerations_HashRow.benef_identifiant_type_code = qualites_remunerations.benef_identifiant_type_code;

								qualites_remunerations_HashRow.identifiant_type = qualites_remunerations.identifiant_type;

								qualites_remunerations_HashRow.benef_identifiant_valeur = qualites_remunerations.benef_identifiant_valeur;

								qualites_remunerations_HashRow.benef_etablissement = qualites_remunerations.benef_etablissement;

								qualites_remunerations_HashRow.benef_etablissement_codepostal = qualites_remunerations.benef_etablissement_codepostal;

								qualites_remunerations_HashRow.benef_etablissement_ville = qualites_remunerations.benef_etablissement_ville;

								qualites_remunerations_HashRow.benef_denomination_sociale = qualites_remunerations.benef_denomination_sociale;

								qualites_remunerations_HashRow.benef_objet_social = qualites_remunerations.benef_objet_social;

								qualites_remunerations_HashRow.ligne_type = qualites_remunerations.ligne_type;

								qualites_remunerations_HashRow.remu_date = qualites_remunerations.remu_date;

								qualites_remunerations_HashRow.remu_montant_ttc = qualites_remunerations.remu_montant_ttc;

								tHash_Lookup_qualites_remunerations.put(qualites_remunerations_HashRow);

								tos_count_tAdvancedHash_qualites_remunerations++;

								/**
								 * [tAdvancedHash_qualites_remunerations main ] stop
								 */

								/**
								 * [tAdvancedHash_qualites_remunerations process_data_begin ] start
								 */

								currentComponent = "tAdvancedHash_qualites_remunerations";

								/**
								 * [tAdvancedHash_qualites_remunerations process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_qualites_remunerations process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_qualites_remunerations";

								/**
								 * [tAdvancedHash_qualites_remunerations process_data_end ] stop
								 */

							} // End of branch "qualites_remunerations"

							/**
							 * [tUniqRow_3 process_data_end ] start
							 */

							currentComponent = "tUniqRow_3";

							/**
							 * [tUniqRow_3 process_data_end ] stop
							 */

						} // End of branch "remunerations"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) ("C:/BI/transparence-sante/data/data.gouv/remunerations.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tUniqRow_3 end ] start
				 */

				currentComponent = "tUniqRow_3";

				globalMap.put("tUniqRow_3_NB_UNIQUES", nb_uniques_tUniqRow_3);
				globalMap.put("tUniqRow_3_NB_DUPLICATES", nb_duplicates_tUniqRow_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "remunerations");
				}

				ok_Hash.put("tUniqRow_3", true);
				end_Hash.put("tUniqRow_3", System.currentTimeMillis());

				/**
				 * [tUniqRow_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_qualites_remunerations end ] start
				 */

				currentComponent = "tAdvancedHash_qualites_remunerations";

				tHash_Lookup_qualites_remunerations.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "qualites_remunerations");
				}

				ok_Hash.put("tAdvancedHash_qualites_remunerations", true);
				end_Hash.put("tAdvancedHash_qualites_remunerations", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_qualites_remunerations end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tUniqRow_3 finally ] start
				 */

				currentComponent = "tUniqRow_3";

				/**
				 * [tUniqRow_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_qualites_remunerations finally ] start
				 */

				currentComponent = "tAdvancedHash_qualites_remunerations";

				/**
				 * [tAdvancedHash_qualites_remunerations finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final qualite_beneficiaire_dim qualite_beneficiaire_dimClass = new qualite_beneficiaire_dim();

		int exitCode = qualite_beneficiaire_dimClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = qualite_beneficiaire_dim.class.getClassLoader().getResourceAsStream(
					"transparence_sante_bi/qualite_beneficiaire_dim_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = qualite_beneficiaire_dim.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : qualite_beneficiaire_dim");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 257853 characters generated by Talend Open Studio for Data Integration on the
 * 16 octobre 2020 12:48:05 CEST
 ************************************************************************************************/