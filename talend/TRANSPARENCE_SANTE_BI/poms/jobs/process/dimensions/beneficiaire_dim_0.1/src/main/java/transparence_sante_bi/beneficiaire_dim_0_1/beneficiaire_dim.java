// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package transparence_sante_bi.beneficiaire_dim_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: beneficiaire_dim Purpose: Remplir la table des bénéficiaires<br>
 * Description: les bénéficiaires sont des professionnels de santé. Voir la doc
 * en ligne. <br>
 * 
 * @author haytham.elghazel@univ-lyon1.fr
 * @version 7.3.1.20200219_1130
 * @status
 */
public class beneficiaire_dim implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "beneficiaire_dim";
	private final String projectName = "TRANSPARENCE_SANTE_BI";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					beneficiaire_dim.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(beneficiaire_dim.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[0];

		public String beneficiaire_id;

		public String getBeneficiaire_id() {
			return this.beneficiaire_id;
		}

		public boolean beneficiaire_moral_booleen;

		public boolean getBeneficiaire_moral_booleen() {
			return this.beneficiaire_moral_booleen;
		}

		public String beneficiaire_nom;

		public String getBeneficiaire_nom() {
			return this.beneficiaire_nom;
		}

		public String beneficiaire_prenom;

		public String getBeneficiaire_prenom() {
			return this.beneficiaire_prenom;
		}

		public String beneficiaire_denomination_sociale;

		public String getBeneficiaire_denomination_sociale() {
			return this.beneficiaire_denomination_sociale;
		}

		public String beneficiaire_diplome;

		public String getBeneficiaire_diplome() {
			return this.beneficiaire_diplome;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_beneficiaire_dim) {

				try {

					int length = 0;

					this.beneficiaire_id = readString(dis);

					this.beneficiaire_moral_booleen = dis.readBoolean();

					this.beneficiaire_nom = readString(dis);

					this.beneficiaire_prenom = readString(dis);

					this.beneficiaire_denomination_sociale = readString(dis);

					this.beneficiaire_diplome = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.beneficiaire_id, dos);

				// boolean

				dos.writeBoolean(this.beneficiaire_moral_booleen);

				// String

				writeString(this.beneficiaire_nom, dos);

				// String

				writeString(this.beneficiaire_prenom, dos);

				// String

				writeString(this.beneficiaire_denomination_sociale, dos);

				// String

				writeString(this.beneficiaire_diplome, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("beneficiaire_id=" + beneficiaire_id);
			sb.append(",beneficiaire_moral_booleen=" + String.valueOf(beneficiaire_moral_booleen));
			sb.append(",beneficiaire_nom=" + beneficiaire_nom);
			sb.append(",beneficiaire_prenom=" + beneficiaire_prenom);
			sb.append(",beneficiaire_denomination_sociale=" + beneficiaire_denomination_sociale);
			sb.append(",beneficiaire_diplome=" + beneficiaire_diplome);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class beneficiaireStruct implements routines.system.IPersistableRow<beneficiaireStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[0];

		public String beneficiaire_id;

		public String getBeneficiaire_id() {
			return this.beneficiaire_id;
		}

		public boolean beneficiaire_moral_booleen;

		public boolean getBeneficiaire_moral_booleen() {
			return this.beneficiaire_moral_booleen;
		}

		public String beneficiaire_nom;

		public String getBeneficiaire_nom() {
			return this.beneficiaire_nom;
		}

		public String beneficiaire_prenom;

		public String getBeneficiaire_prenom() {
			return this.beneficiaire_prenom;
		}

		public String beneficiaire_denomination_sociale;

		public String getBeneficiaire_denomination_sociale() {
			return this.beneficiaire_denomination_sociale;
		}

		public String beneficiaire_diplome;

		public String getBeneficiaire_diplome() {
			return this.beneficiaire_diplome;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_beneficiaire_dim) {

				try {

					int length = 0;

					this.beneficiaire_id = readString(dis);

					this.beneficiaire_moral_booleen = dis.readBoolean();

					this.beneficiaire_nom = readString(dis);

					this.beneficiaire_prenom = readString(dis);

					this.beneficiaire_denomination_sociale = readString(dis);

					this.beneficiaire_diplome = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.beneficiaire_id, dos);

				// boolean

				dos.writeBoolean(this.beneficiaire_moral_booleen);

				// String

				writeString(this.beneficiaire_nom, dos);

				// String

				writeString(this.beneficiaire_prenom, dos);

				// String

				writeString(this.beneficiaire_denomination_sociale, dos);

				// String

				writeString(this.beneficiaire_diplome, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("beneficiaire_id=" + beneficiaire_id);
			sb.append(",beneficiaire_moral_booleen=" + String.valueOf(beneficiaire_moral_booleen));
			sb.append(",beneficiaire_nom=" + beneficiaire_nom);
			sb.append(",beneficiaire_prenom=" + beneficiaire_prenom);
			sb.append(",beneficiaire_denomination_sociale=" + beneficiaire_denomination_sociale);
			sb.append(",beneficiaire_diplome=" + beneficiaire_diplome);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(beneficiaireStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[0];

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String benef_nom;

		public String getBenef_nom() {
			return this.benef_nom;
		}

		public String benef_prenom;

		public String getBenef_prenom() {
			return this.benef_prenom;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String benef_denomination_sociale;

		public String getBenef_denomination_sociale() {
			return this.benef_denomination_sociale;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_beneficiaire_dim) {

				try {

					int length = 0;

					this.benef_categorie_code = readString(dis);

					this.benef_nom = readString(dis);

					this.benef_prenom = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.benef_denomination_sociale = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.benef_nom, dos);

				// String

				writeString(this.benef_prenom, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.benef_denomination_sociale, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("benef_categorie_code=" + benef_categorie_code);
			sb.append(",benef_nom=" + benef_nom);
			sb.append(",benef_prenom=" + benef_prenom);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",benef_denomination_sociale=" + benef_denomination_sociale);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[0];

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String benef_nom;

		public String getBenef_nom() {
			return this.benef_nom;
		}

		public String benef_prenom;

		public String getBenef_prenom() {
			return this.benef_prenom;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String benef_denomination_sociale;

		public String getBenef_denomination_sociale() {
			return this.benef_denomination_sociale;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_beneficiaire_dim) {

				try {

					int length = 0;

					this.benef_categorie_code = readString(dis);

					this.benef_nom = readString(dis);

					this.benef_prenom = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.benef_denomination_sociale = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.benef_nom, dos);

				// String

				writeString(this.benef_prenom, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.benef_denomination_sociale, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("benef_categorie_code=" + benef_categorie_code);
			sb.append(",benef_nom=" + benef_nom);
			sb.append(",benef_prenom=" + benef_prenom);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",benef_denomination_sociale=" + benef_denomination_sociale);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class beneficiaire_convStruct implements routines.system.IPersistableRow<beneficiaire_convStruct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[0];

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String benef_nom;

		public String getBenef_nom() {
			return this.benef_nom;
		}

		public String benef_prenom;

		public String getBenef_prenom() {
			return this.benef_prenom;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String benef_denomination_sociale;

		public String getBenef_denomination_sociale() {
			return this.benef_denomination_sociale;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_beneficiaire_dim) {

				try {

					int length = 0;

					this.benef_categorie_code = readString(dis);

					this.benef_nom = readString(dis);

					this.benef_prenom = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.benef_denomination_sociale = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.benef_nom, dos);

				// String

				writeString(this.benef_prenom, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.benef_denomination_sociale, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("benef_categorie_code=" + benef_categorie_code);
			sb.append(",benef_nom=" + benef_nom);
			sb.append(",benef_prenom=" + benef_prenom);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",benef_denomination_sociale=" + benef_denomination_sociale);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(beneficiaire_convStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[0];

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String denomination_sociale;

		public String getDenomination_sociale() {
			return this.denomination_sociale;
		}

		public String ligne_identifiant;

		public String getLigne_identifiant() {
			return this.ligne_identifiant;
		}

		public Character ligne_rectification;

		public Character getLigne_rectification() {
			return this.ligne_rectification;
		}

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String categorie;

		public String getCategorie() {
			return this.categorie;
		}

		public String benef_nom;

		public String getBenef_nom() {
			return this.benef_nom;
		}

		public String benef_prenom;

		public String getBenef_prenom() {
			return this.benef_prenom;
		}

		public String benef_qualite_code;

		public String getBenef_qualite_code() {
			return this.benef_qualite_code;
		}

		public String qualite;

		public String getQualite() {
			return this.qualite;
		}

		public String benef_adresse1;

		public String getBenef_adresse1() {
			return this.benef_adresse1;
		}

		public String benef_adresse2;

		public String getBenef_adresse2() {
			return this.benef_adresse2;
		}

		public String benef_adresse3;

		public String getBenef_adresse3() {
			return this.benef_adresse3;
		}

		public String benef_adresse4;

		public String getBenef_adresse4() {
			return this.benef_adresse4;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_ville;

		public String getBenef_ville() {
			return this.benef_ville;
		}

		public String benef_pays_code;

		public String getBenef_pays_code() {
			return this.benef_pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String benef_titre_code;

		public String getBenef_titre_code() {
			return this.benef_titre_code;
		}

		public String benef_titre_libelle;

		public String getBenef_titre_libelle() {
			return this.benef_titre_libelle;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_speicalite_libelle;

		public String getBenef_speicalite_libelle() {
			return this.benef_speicalite_libelle;
		}

		public String benef_identifiant_type_code;

		public String getBenef_identifiant_type_code() {
			return this.benef_identifiant_type_code;
		}

		public String identifiant_type;

		public String getIdentifiant_type() {
			return this.identifiant_type;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String benef_etablissement;

		public String getBenef_etablissement() {
			return this.benef_etablissement;
		}

		public String benef_etablissement_codepostal;

		public String getBenef_etablissement_codepostal() {
			return this.benef_etablissement_codepostal;
		}

		public String benef_etablissement_ville;

		public String getBenef_etablissement_ville() {
			return this.benef_etablissement_ville;
		}

		public String benef_denomination_sociale;

		public String getBenef_denomination_sociale() {
			return this.benef_denomination_sociale;
		}

		public String benef_objet_social;

		public String getBenef_objet_social() {
			return this.benef_objet_social;
		}

		public String ligne_type;

		public String getLigne_type() {
			return this.ligne_type;
		}

		public String conv_date_signature;

		public String getConv_date_signature() {
			return this.conv_date_signature;
		}

		public String conv_objet;

		public String getConv_objet() {
			return this.conv_objet;
		}

		public String conv_objet_autre;

		public String getConv_objet_autre() {
			return this.conv_objet_autre;
		}

		public String conv_date_debut;

		public String getConv_date_debut() {
			return this.conv_date_debut;
		}

		public String conv_date_fin;

		public String getConv_date_fin() {
			return this.conv_date_fin;
		}

		public String conv_montant_ttc;

		public String getConv_montant_ttc() {
			return this.conv_montant_ttc;
		}

		public String conv_manifestation_date;

		public String getConv_manifestation_date() {
			return this.conv_manifestation_date;
		}

		public String conv_manifestation_nom;

		public String getConv_manifestation_nom() {
			return this.conv_manifestation_nom;
		}

		public String conv_manifestation_lieu;

		public String getConv_manifestation_lieu() {
			return this.conv_manifestation_lieu;
		}

		public String conv_manifestation_organisateur;

		public String getConv_manifestation_organisateur() {
			return this.conv_manifestation_organisateur;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_beneficiaire_dim) {

				try {

					int length = 0;

					this.entreprise_identifiant = readString(dis);

					this.denomination_sociale = readString(dis);

					this.ligne_identifiant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ligne_rectification = null;
					} else {
						this.ligne_rectification = dis.readChar();
					}

					this.benef_categorie_code = readString(dis);

					this.categorie = readString(dis);

					this.benef_nom = readString(dis);

					this.benef_prenom = readString(dis);

					this.benef_qualite_code = readString(dis);

					this.qualite = readString(dis);

					this.benef_adresse1 = readString(dis);

					this.benef_adresse2 = readString(dis);

					this.benef_adresse3 = readString(dis);

					this.benef_adresse4 = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_ville = readString(dis);

					this.benef_pays_code = readString(dis);

					this.pays = readString(dis);

					this.benef_titre_code = readString(dis);

					this.benef_titre_libelle = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_speicalite_libelle = readString(dis);

					this.benef_identifiant_type_code = readString(dis);

					this.identifiant_type = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.benef_etablissement = readString(dis);

					this.benef_etablissement_codepostal = readString(dis);

					this.benef_etablissement_ville = readString(dis);

					this.benef_denomination_sociale = readString(dis);

					this.benef_objet_social = readString(dis);

					this.ligne_type = readString(dis);

					this.conv_date_signature = readString(dis);

					this.conv_objet = readString(dis);

					this.conv_objet_autre = readString(dis);

					this.conv_date_debut = readString(dis);

					this.conv_date_fin = readString(dis);

					this.conv_montant_ttc = readString(dis);

					this.conv_manifestation_date = readString(dis);

					this.conv_manifestation_nom = readString(dis);

					this.conv_manifestation_lieu = readString(dis);

					this.conv_manifestation_organisateur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entreprise_identifiant, dos);

				// String

				writeString(this.denomination_sociale, dos);

				// String

				writeString(this.ligne_identifiant, dos);

				// Character

				if (this.ligne_rectification == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.ligne_rectification);
				}

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.categorie, dos);

				// String

				writeString(this.benef_nom, dos);

				// String

				writeString(this.benef_prenom, dos);

				// String

				writeString(this.benef_qualite_code, dos);

				// String

				writeString(this.qualite, dos);

				// String

				writeString(this.benef_adresse1, dos);

				// String

				writeString(this.benef_adresse2, dos);

				// String

				writeString(this.benef_adresse3, dos);

				// String

				writeString(this.benef_adresse4, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_ville, dos);

				// String

				writeString(this.benef_pays_code, dos);

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.benef_titre_code, dos);

				// String

				writeString(this.benef_titre_libelle, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_speicalite_libelle, dos);

				// String

				writeString(this.benef_identifiant_type_code, dos);

				// String

				writeString(this.identifiant_type, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.benef_etablissement, dos);

				// String

				writeString(this.benef_etablissement_codepostal, dos);

				// String

				writeString(this.benef_etablissement_ville, dos);

				// String

				writeString(this.benef_denomination_sociale, dos);

				// String

				writeString(this.benef_objet_social, dos);

				// String

				writeString(this.ligne_type, dos);

				// String

				writeString(this.conv_date_signature, dos);

				// String

				writeString(this.conv_objet, dos);

				// String

				writeString(this.conv_objet_autre, dos);

				// String

				writeString(this.conv_date_debut, dos);

				// String

				writeString(this.conv_date_fin, dos);

				// String

				writeString(this.conv_montant_ttc, dos);

				// String

				writeString(this.conv_manifestation_date, dos);

				// String

				writeString(this.conv_manifestation_nom, dos);

				// String

				writeString(this.conv_manifestation_lieu, dos);

				// String

				writeString(this.conv_manifestation_organisateur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",denomination_sociale=" + denomination_sociale);
			sb.append(",ligne_identifiant=" + ligne_identifiant);
			sb.append(",ligne_rectification=" + String.valueOf(ligne_rectification));
			sb.append(",benef_categorie_code=" + benef_categorie_code);
			sb.append(",categorie=" + categorie);
			sb.append(",benef_nom=" + benef_nom);
			sb.append(",benef_prenom=" + benef_prenom);
			sb.append(",benef_qualite_code=" + benef_qualite_code);
			sb.append(",qualite=" + qualite);
			sb.append(",benef_adresse1=" + benef_adresse1);
			sb.append(",benef_adresse2=" + benef_adresse2);
			sb.append(",benef_adresse3=" + benef_adresse3);
			sb.append(",benef_adresse4=" + benef_adresse4);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_ville=" + benef_ville);
			sb.append(",benef_pays_code=" + benef_pays_code);
			sb.append(",pays=" + pays);
			sb.append(",benef_titre_code=" + benef_titre_code);
			sb.append(",benef_titre_libelle=" + benef_titre_libelle);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_speicalite_libelle=" + benef_speicalite_libelle);
			sb.append(",benef_identifiant_type_code=" + benef_identifiant_type_code);
			sb.append(",identifiant_type=" + identifiant_type);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",benef_etablissement=" + benef_etablissement);
			sb.append(",benef_etablissement_codepostal=" + benef_etablissement_codepostal);
			sb.append(",benef_etablissement_ville=" + benef_etablissement_ville);
			sb.append(",benef_denomination_sociale=" + benef_denomination_sociale);
			sb.append(",benef_objet_social=" + benef_objet_social);
			sb.append(",ligne_type=" + ligne_type);
			sb.append(",conv_date_signature=" + conv_date_signature);
			sb.append(",conv_objet=" + conv_objet);
			sb.append(",conv_objet_autre=" + conv_objet_autre);
			sb.append(",conv_date_debut=" + conv_date_debut);
			sb.append(",conv_date_fin=" + conv_date_fin);
			sb.append(",conv_montant_ttc=" + conv_montant_ttc);
			sb.append(",conv_manifestation_date=" + conv_manifestation_date);
			sb.append(",conv_manifestation_nom=" + conv_manifestation_nom);
			sb.append(",conv_manifestation_lieu=" + conv_manifestation_lieu);
			sb.append(",conv_manifestation_organisateur=" + conv_manifestation_organisateur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[0];

		public String entreprise_identifiant;

		public String getEntreprise_identifiant() {
			return this.entreprise_identifiant;
		}

		public String denomination_sociale;

		public String getDenomination_sociale() {
			return this.denomination_sociale;
		}

		public String ligne_identifiant;

		public String getLigne_identifiant() {
			return this.ligne_identifiant;
		}

		public Character ligne_rectification;

		public Character getLigne_rectification() {
			return this.ligne_rectification;
		}

		public String benef_categorie_code;

		public String getBenef_categorie_code() {
			return this.benef_categorie_code;
		}

		public String categorie;

		public String getCategorie() {
			return this.categorie;
		}

		public String benef_nom;

		public String getBenef_nom() {
			return this.benef_nom;
		}

		public String benef_prenom;

		public String getBenef_prenom() {
			return this.benef_prenom;
		}

		public String benef_qualite_code;

		public String getBenef_qualite_code() {
			return this.benef_qualite_code;
		}

		public String qualite;

		public String getQualite() {
			return this.qualite;
		}

		public String benef_adresse1;

		public String getBenef_adresse1() {
			return this.benef_adresse1;
		}

		public String benef_adresse2;

		public String getBenef_adresse2() {
			return this.benef_adresse2;
		}

		public String benef_adresse3;

		public String getBenef_adresse3() {
			return this.benef_adresse3;
		}

		public String benef_adresse4;

		public String getBenef_adresse4() {
			return this.benef_adresse4;
		}

		public String benef_codepostal;

		public String getBenef_codepostal() {
			return this.benef_codepostal;
		}

		public String benef_ville;

		public String getBenef_ville() {
			return this.benef_ville;
		}

		public String benef_pays_code;

		public String getBenef_pays_code() {
			return this.benef_pays_code;
		}

		public String pays;

		public String getPays() {
			return this.pays;
		}

		public String benef_titre_code;

		public String getBenef_titre_code() {
			return this.benef_titre_code;
		}

		public String benef_titre_libelle;

		public String getBenef_titre_libelle() {
			return this.benef_titre_libelle;
		}

		public String benef_specialite_code;

		public String getBenef_specialite_code() {
			return this.benef_specialite_code;
		}

		public String benef_speicalite_libelle;

		public String getBenef_speicalite_libelle() {
			return this.benef_speicalite_libelle;
		}

		public String benef_identifiant_type_code;

		public String getBenef_identifiant_type_code() {
			return this.benef_identifiant_type_code;
		}

		public String identifiant_type;

		public String getIdentifiant_type() {
			return this.identifiant_type;
		}

		public String benef_identifiant_valeur;

		public String getBenef_identifiant_valeur() {
			return this.benef_identifiant_valeur;
		}

		public String benef_etablissement;

		public String getBenef_etablissement() {
			return this.benef_etablissement;
		}

		public String benef_etablissement_codepostal;

		public String getBenef_etablissement_codepostal() {
			return this.benef_etablissement_codepostal;
		}

		public String benef_etablissement_ville;

		public String getBenef_etablissement_ville() {
			return this.benef_etablissement_ville;
		}

		public String benef_denomination_sociale;

		public String getBenef_denomination_sociale() {
			return this.benef_denomination_sociale;
		}

		public String benef_objet_social;

		public String getBenef_objet_social() {
			return this.benef_objet_social;
		}

		public String ligne_type;

		public String getLigne_type() {
			return this.ligne_type;
		}

		public String conv_date_signature;

		public String getConv_date_signature() {
			return this.conv_date_signature;
		}

		public String conv_objet;

		public String getConv_objet() {
			return this.conv_objet;
		}

		public String conv_objet_autre;

		public String getConv_objet_autre() {
			return this.conv_objet_autre;
		}

		public String conv_date_debut;

		public String getConv_date_debut() {
			return this.conv_date_debut;
		}

		public String conv_date_fin;

		public String getConv_date_fin() {
			return this.conv_date_fin;
		}

		public String conv_montant_ttc;

		public String getConv_montant_ttc() {
			return this.conv_montant_ttc;
		}

		public String conv_manifestation_date;

		public String getConv_manifestation_date() {
			return this.conv_manifestation_date;
		}

		public String conv_manifestation_nom;

		public String getConv_manifestation_nom() {
			return this.conv_manifestation_nom;
		}

		public String conv_manifestation_lieu;

		public String getConv_manifestation_lieu() {
			return this.conv_manifestation_lieu;
		}

		public String conv_manifestation_organisateur;

		public String getConv_manifestation_organisateur() {
			return this.conv_manifestation_organisateur;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_beneficiaire_dim) {

				try {

					int length = 0;

					this.entreprise_identifiant = readString(dis);

					this.denomination_sociale = readString(dis);

					this.ligne_identifiant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ligne_rectification = null;
					} else {
						this.ligne_rectification = dis.readChar();
					}

					this.benef_categorie_code = readString(dis);

					this.categorie = readString(dis);

					this.benef_nom = readString(dis);

					this.benef_prenom = readString(dis);

					this.benef_qualite_code = readString(dis);

					this.qualite = readString(dis);

					this.benef_adresse1 = readString(dis);

					this.benef_adresse2 = readString(dis);

					this.benef_adresse3 = readString(dis);

					this.benef_adresse4 = readString(dis);

					this.benef_codepostal = readString(dis);

					this.benef_ville = readString(dis);

					this.benef_pays_code = readString(dis);

					this.pays = readString(dis);

					this.benef_titre_code = readString(dis);

					this.benef_titre_libelle = readString(dis);

					this.benef_specialite_code = readString(dis);

					this.benef_speicalite_libelle = readString(dis);

					this.benef_identifiant_type_code = readString(dis);

					this.identifiant_type = readString(dis);

					this.benef_identifiant_valeur = readString(dis);

					this.benef_etablissement = readString(dis);

					this.benef_etablissement_codepostal = readString(dis);

					this.benef_etablissement_ville = readString(dis);

					this.benef_denomination_sociale = readString(dis);

					this.benef_objet_social = readString(dis);

					this.ligne_type = readString(dis);

					this.conv_date_signature = readString(dis);

					this.conv_objet = readString(dis);

					this.conv_objet_autre = readString(dis);

					this.conv_date_debut = readString(dis);

					this.conv_date_fin = readString(dis);

					this.conv_montant_ttc = readString(dis);

					this.conv_manifestation_date = readString(dis);

					this.conv_manifestation_nom = readString(dis);

					this.conv_manifestation_lieu = readString(dis);

					this.conv_manifestation_organisateur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.entreprise_identifiant, dos);

				// String

				writeString(this.denomination_sociale, dos);

				// String

				writeString(this.ligne_identifiant, dos);

				// Character

				if (this.ligne_rectification == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.ligne_rectification);
				}

				// String

				writeString(this.benef_categorie_code, dos);

				// String

				writeString(this.categorie, dos);

				// String

				writeString(this.benef_nom, dos);

				// String

				writeString(this.benef_prenom, dos);

				// String

				writeString(this.benef_qualite_code, dos);

				// String

				writeString(this.qualite, dos);

				// String

				writeString(this.benef_adresse1, dos);

				// String

				writeString(this.benef_adresse2, dos);

				// String

				writeString(this.benef_adresse3, dos);

				// String

				writeString(this.benef_adresse4, dos);

				// String

				writeString(this.benef_codepostal, dos);

				// String

				writeString(this.benef_ville, dos);

				// String

				writeString(this.benef_pays_code, dos);

				// String

				writeString(this.pays, dos);

				// String

				writeString(this.benef_titre_code, dos);

				// String

				writeString(this.benef_titre_libelle, dos);

				// String

				writeString(this.benef_specialite_code, dos);

				// String

				writeString(this.benef_speicalite_libelle, dos);

				// String

				writeString(this.benef_identifiant_type_code, dos);

				// String

				writeString(this.identifiant_type, dos);

				// String

				writeString(this.benef_identifiant_valeur, dos);

				// String

				writeString(this.benef_etablissement, dos);

				// String

				writeString(this.benef_etablissement_codepostal, dos);

				// String

				writeString(this.benef_etablissement_ville, dos);

				// String

				writeString(this.benef_denomination_sociale, dos);

				// String

				writeString(this.benef_objet_social, dos);

				// String

				writeString(this.ligne_type, dos);

				// String

				writeString(this.conv_date_signature, dos);

				// String

				writeString(this.conv_objet, dos);

				// String

				writeString(this.conv_objet_autre, dos);

				// String

				writeString(this.conv_date_debut, dos);

				// String

				writeString(this.conv_date_fin, dos);

				// String

				writeString(this.conv_montant_ttc, dos);

				// String

				writeString(this.conv_manifestation_date, dos);

				// String

				writeString(this.conv_manifestation_nom, dos);

				// String

				writeString(this.conv_manifestation_lieu, dos);

				// String

				writeString(this.conv_manifestation_organisateur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("entreprise_identifiant=" + entreprise_identifiant);
			sb.append(",denomination_sociale=" + denomination_sociale);
			sb.append(",ligne_identifiant=" + ligne_identifiant);
			sb.append(",ligne_rectification=" + String.valueOf(ligne_rectification));
			sb.append(",benef_categorie_code=" + benef_categorie_code);
			sb.append(",categorie=" + categorie);
			sb.append(",benef_nom=" + benef_nom);
			sb.append(",benef_prenom=" + benef_prenom);
			sb.append(",benef_qualite_code=" + benef_qualite_code);
			sb.append(",qualite=" + qualite);
			sb.append(",benef_adresse1=" + benef_adresse1);
			sb.append(",benef_adresse2=" + benef_adresse2);
			sb.append(",benef_adresse3=" + benef_adresse3);
			sb.append(",benef_adresse4=" + benef_adresse4);
			sb.append(",benef_codepostal=" + benef_codepostal);
			sb.append(",benef_ville=" + benef_ville);
			sb.append(",benef_pays_code=" + benef_pays_code);
			sb.append(",pays=" + pays);
			sb.append(",benef_titre_code=" + benef_titre_code);
			sb.append(",benef_titre_libelle=" + benef_titre_libelle);
			sb.append(",benef_specialite_code=" + benef_specialite_code);
			sb.append(",benef_speicalite_libelle=" + benef_speicalite_libelle);
			sb.append(",benef_identifiant_type_code=" + benef_identifiant_type_code);
			sb.append(",identifiant_type=" + identifiant_type);
			sb.append(",benef_identifiant_valeur=" + benef_identifiant_valeur);
			sb.append(",benef_etablissement=" + benef_etablissement);
			sb.append(",benef_etablissement_codepostal=" + benef_etablissement_codepostal);
			sb.append(",benef_etablissement_ville=" + benef_etablissement_ville);
			sb.append(",benef_denomination_sociale=" + benef_denomination_sociale);
			sb.append(",benef_objet_social=" + benef_objet_social);
			sb.append(",ligne_type=" + ligne_type);
			sb.append(",conv_date_signature=" + conv_date_signature);
			sb.append(",conv_objet=" + conv_objet);
			sb.append(",conv_objet_autre=" + conv_objet_autre);
			sb.append(",conv_date_debut=" + conv_date_debut);
			sb.append(",conv_date_fin=" + conv_date_fin);
			sb.append(",conv_montant_ttc=" + conv_montant_ttc);
			sb.append(",conv_manifestation_date=" + conv_manifestation_date);
			sb.append(",conv_manifestation_nom=" + conv_manifestation_nom);
			sb.append(",conv_manifestation_lieu=" + conv_manifestation_lieu);
			sb.append(",conv_manifestation_organisateur=" + conv_manifestation_organisateur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				beneficiaire_convStruct beneficiaire_conv = new beneficiaire_convStruct();
				row2Struct row2 = new row2Struct();
				beneficiaireStruct beneficiaire = new beneficiaireStruct();
				row7Struct row7 = new row7Struct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;

				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "beneficiaire_dim";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime().getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbProperties_tDBOutput_1 = "noDatetimeStringSync=true";
				String url_tDBOutput_1 = null;
				if (dbProperties_tDBOutput_1 == null || dbProperties_tDBOutput_1.trim().length() == 0) {
					url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "transparence_sante_bi" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_1 = "noDatetimeStringSync=true";
					if (!properties_tDBOutput_1.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "transparence_sante_bi" + "?"
							+ properties_tDBOutput_1;
				}
				String driverClass_tDBOutput_1 = "com.mysql.jdbc.Driver";

				String dbUser_tDBOutput_1 = "root";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:mpYZdcDwkmvin1tfmJmmnJD/RvHEYx95yRL6WA==");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				java.lang.Class.forName(driverClass_tDBOutput_1);

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;

				try (java.sql.Statement stmtClear_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtClear_tDBOutput_1.executeUpdate("DELETE FROM `" + tableName_tDBOutput_1 + "`");
				}

				String insert_tDBOutput_1 = "INSERT INTO `" + "beneficiaire_dim"
						+ "` (`beneficiaire_id`,`beneficiaire_moral_booleen`,`beneficiaire_nom`,`beneficiaire_prenom`,`beneficiaire_denomination_sociale`,`beneficiaire_diplome`) VALUES (?,?,?,?,?,?)";
				int batchSize_tDBOutput_1 = 100;
				int batchSizeCounter_tDBOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tUniqRow_3 begin ] start
				 */

				ok_Hash.put("tUniqRow_3", false);
				start_Hash.put("tUniqRow_3", System.currentTimeMillis());

				currentComponent = "tUniqRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "beneficiaire");
				}

				int tos_count_tUniqRow_3 = 0;

				class KeyStruct_tUniqRow_3 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String beneficiaire_id;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.beneficiaire_id == null) ? 0 : this.beneficiaire_id.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_3 other = (KeyStruct_tUniqRow_3) obj;

						if (this.beneficiaire_id == null) {
							if (other.beneficiaire_id != null)
								return false;

						} else if (!this.beneficiaire_id.equals(other.beneficiaire_id))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_3 = 0;
				int nb_duplicates_tUniqRow_3 = 0;
				KeyStruct_tUniqRow_3 finder_tUniqRow_3 = new KeyStruct_tUniqRow_3();
				java.util.Set<KeyStruct_tUniqRow_3> keystUniqRow_3 = new java.util.HashSet<KeyStruct_tUniqRow_3>();

				/**
				 * [tUniqRow_3 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				beneficiaireStruct beneficiaire_tmp = new beneficiaireStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"C:/BI/transparence-sante/data/rejects/beneficiaire.csv")).getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "beneficiaire_conv");
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				beneficiaire_convStruct beneficiaire_conv_tmp = new beneficiaire_convStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "C:/BI/transparence-sante/data/min/conventions_top10000.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"C:/BI/transparence-sante/data/min/conventions_top10000.csv", "UTF-8", ";", "\n", false,
								1, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.entreprise_identifiant = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.denomination_sociale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row1.ligne_identifiant = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.ligne_rectification = ParserUtils.parseTo_Character(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ligne_rectification", "row1", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row1.ligne_rectification = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row1.benef_categorie_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row1.categorie = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row1.benef_nom = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							row1.benef_prenom = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 8;

							row1.benef_qualite_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 9;

							row1.qualite = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 10;

							row1.benef_adresse1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 11;

							row1.benef_adresse2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 12;

							row1.benef_adresse3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 13;

							row1.benef_adresse4 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 14;

							row1.benef_codepostal = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 15;

							row1.benef_ville = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 16;

							row1.benef_pays_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 17;

							row1.pays = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 18;

							row1.benef_titre_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 19;

							row1.benef_titre_libelle = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 20;

							row1.benef_specialite_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 21;

							row1.benef_speicalite_libelle = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 22;

							row1.benef_identifiant_type_code = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 23;

							row1.identifiant_type = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 24;

							row1.benef_identifiant_valeur = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 25;

							row1.benef_etablissement = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 26;

							row1.benef_etablissement_codepostal = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 27;

							row1.benef_etablissement_ville = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 28;

							row1.benef_denomination_sociale = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 29;

							row1.benef_objet_social = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 30;

							row1.ligne_type = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 31;

							row1.conv_date_signature = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 32;

							row1.conv_objet = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 33;

							row1.conv_objet_autre = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 34;

							row1.conv_date_debut = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 35;

							row1.conv_date_fin = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 36;

							row1.conv_montant_ttc = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 37;

							row1.conv_manifestation_date = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 38;

							row1.conv_manifestation_nom = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 39;

							row1.conv_manifestation_lieu = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 40;

							row1.conv_manifestation_organisateur = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {
							row3 = null;

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								beneficiaire_conv = null;

// # Output table : 'beneficiaire_conv'
								beneficiaire_conv_tmp.benef_categorie_code = row1.benef_categorie_code
										.replaceAll("[^A-Za-z0-9]", "");
								beneficiaire_conv_tmp.benef_nom = row1.benef_nom;
								beneficiaire_conv_tmp.benef_prenom = row1.benef_prenom;
								beneficiaire_conv_tmp.benef_codepostal = row1.benef_codepostal;
								beneficiaire_conv_tmp.benef_specialite_code = row1.benef_specialite_code;
								beneficiaire_conv_tmp.benef_identifiant_valeur = row1.benef_identifiant_valeur;
								beneficiaire_conv_tmp.benef_denomination_sociale = row1.benef_denomination_sociale;
								beneficiaire_conv = beneficiaire_conv_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
// Start of branch "beneficiaire_conv"
							if (beneficiaire_conv != null) {
								row3 = null;

								/**
								 * [tFilterRow_1 main ] start
								 */

								currentComponent = "tFilterRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "beneficiaire_conv");
								}

								row3 = null;
								row2 = null;
								Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
								ope_tFilterRow_1.matches(
										(beneficiaire_conv.benef_denomination_sociale == null ? false
												: beneficiaire_conv.benef_denomination_sociale.length() > 0),
										" benef_denomination_sociale.length() > 0 failed");
								ope_tFilterRow_1.matches(
										(beneficiaire_conv.benef_identifiant_valeur == null ? false
												: beneficiaire_conv.benef_identifiant_valeur.length() > 0),
										" benef_identifiant_valeur.length() > 0 failed");
								ope_tFilterRow_1.matches(
										(beneficiaire_conv.benef_codepostal == null ? false
												: beneficiaire_conv.benef_codepostal.length() > 0),
										" benef_codepostal.length() > 0 failed");
								ope_tFilterRow_1.matches(
										(beneficiaire_conv.benef_categorie_code == null ? false
												: beneficiaire_conv.benef_categorie_code.length() > 0),
										" benef_categorie_code.length() > 0 failed");
								ope_tFilterRow_1.matches((// code sample : use beneficiaire_conv to define the
															// condition.
// beneficiaire_conv.columnName1.equals("foo") ||!(beneficiaire_conv.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
								!(beneficiaire_conv.benef_identifiant_valeur.replaceAll("[^A-Za-z0-9]", "")).equals("")
										&& !(beneficiaire_conv.benef_codepostal.replaceAll("[^A-Za-z0-9]", ""))
												.equals("")),
										"advanced condition failed");

								if (ope_tFilterRow_1.getMatchFlag()) {
									if (row2 == null) {
										row2 = new row2Struct();
									}
									row2.benef_categorie_code = beneficiaire_conv.benef_categorie_code;
									row2.benef_nom = beneficiaire_conv.benef_nom;
									row2.benef_prenom = beneficiaire_conv.benef_prenom;
									row2.benef_codepostal = beneficiaire_conv.benef_codepostal;
									row2.benef_specialite_code = beneficiaire_conv.benef_specialite_code;
									row2.benef_identifiant_valeur = beneficiaire_conv.benef_identifiant_valeur;
									row2.benef_denomination_sociale = beneficiaire_conv.benef_denomination_sociale;
									nb_line_ok_tFilterRow_1++;
								} else {
									if (row3 == null) {
										row3 = new row3Struct();
									}
									row3.benef_categorie_code = beneficiaire_conv.benef_categorie_code;
									row3.benef_nom = beneficiaire_conv.benef_nom;
									row3.benef_prenom = beneficiaire_conv.benef_prenom;
									row3.benef_codepostal = beneficiaire_conv.benef_codepostal;
									row3.benef_specialite_code = beneficiaire_conv.benef_specialite_code;
									row3.benef_identifiant_valeur = beneficiaire_conv.benef_identifiant_valeur;
									row3.benef_denomination_sociale = beneficiaire_conv.benef_denomination_sociale;
									row3.errorMessage = ope_tFilterRow_1.getErrorMsg();
									nb_line_reject_tFilterRow_1++;
								}

								nb_line_tFilterRow_1++;

								tos_count_tFilterRow_1++;

								/**
								 * [tFilterRow_1 main ] stop
								 */

								/**
								 * [tFilterRow_1 process_data_begin ] start
								 */

								currentComponent = "tFilterRow_1";

								/**
								 * [tFilterRow_1 process_data_begin ] stop
								 */
// Start of branch "row2"
								if (row2 != null) {

									/**
									 * [tMap_1 main ] start
									 */

									currentComponent = "tMap_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_1 = false;
									boolean mainRowRejected_tMap_1 = false;

									///////////////////////////////////////////////
									// Starting Lookup Table "row5"
									///////////////////////////////////////////////

									boolean forceLooprow5 = false;

									row5Struct row5ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_1 = false;

										row5HashKey.Code_diplome_obtenu = row2.benef_specialite_code
												.replaceAll("[^A-Za-z0-9]", "");

										row5HashKey.hashCodeDirty = true;

										tHash_Lookup_row5.lookup(row5HashKey);

									} // G_TM_M_020

									if (tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G
																													// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5'
										// and it contains more one result from keys : row5.Code_diplome_obtenu = '" +
										// row5HashKey.Code_diplome_obtenu + "'");
									} // G 071

									row5Struct row5 = null;

									row5Struct fromLookup_row5 = null;
									row5 = row5Default;

									if (tHash_Lookup_row5 != null && tHash_Lookup_row5.hasNext()) { // G 099

										fromLookup_row5 = tHash_Lookup_row5.next();

									} // G 099

									if (fromLookup_row5 != null) {
										row5 = fromLookup_row5;
									}

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
										// ###############################
										// # Output tables

										beneficiaire = null;

// # Output table : 'beneficiaire'
										beneficiaire_tmp.beneficiaire_id = row2.benef_identifiant_valeur;
										beneficiaire_tmp.beneficiaire_moral_booleen = (row2.benef_categorie_code
												.replaceAll("[^A-Za-z]", "")).equals("PRS")
												|| (row2.benef_categorie_code.replaceAll("[^A-Za-z]", "")).equals("PRS")
												|| (row2.benef_categorie_code.replaceAll("[^A-Za-z]", "")).equals("VET")
												|| (row2.benef_categorie_code.replaceAll("[^A-Za-z]", "")).equals("APS")
												|| (row2.benef_categorie_code.replaceAll("[^A-Za-z]", "")).equals("FON")
												|| (row2.benef_categorie_code.replaceAll("[^A-Za-z]", "")).equals("PMO")
												|| (row2.benef_categorie_code.replaceAll("[^A-Za-z]", ""))
														.equals("VPM");
										beneficiaire_tmp.beneficiaire_nom = row2.benef_nom;
										beneficiaire_tmp.beneficiaire_prenom = row2.benef_prenom;
										beneficiaire_tmp.beneficiaire_denomination_sociale = (row2.benef_denomination_sociale
												.replaceAll("[^A-Za-z0-9]", "")).isEmpty() ? "N/A"
														: row2.benef_denomination_sociale.replaceAll("[^A-Za-z0-9]",
																"");
										beneficiaire_tmp.beneficiaire_diplome = (row5.Libelle_diplome_obtenu == null
												|| row5.Libelle_diplome_obtenu.isEmpty()
												|| (row5.Libelle_diplome_obtenu.replaceAll("[^A-Za-z0-9]", ""))
														.isEmpty()) ? "N/A" : row5.Libelle_diplome_obtenu;
										beneficiaire = beneficiaire_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_1 = false;

									tos_count_tMap_1++;

									/**
									 * [tMap_1 main ] stop
									 */

									/**
									 * [tMap_1 process_data_begin ] start
									 */

									currentComponent = "tMap_1";

									/**
									 * [tMap_1 process_data_begin ] stop
									 */
// Start of branch "beneficiaire"
									if (beneficiaire != null) {

										/**
										 * [tUniqRow_3 main ] start
										 */

										currentComponent = "tUniqRow_3";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "beneficiaire");
										}

										row7 = null;
										finder_tUniqRow_3.beneficiaire_id = beneficiaire.beneficiaire_id;
										finder_tUniqRow_3.hashCodeDirty = true;
										if (!keystUniqRow_3.contains(finder_tUniqRow_3)) {
											KeyStruct_tUniqRow_3 new_tUniqRow_3 = new KeyStruct_tUniqRow_3();

											new_tUniqRow_3.beneficiaire_id = beneficiaire.beneficiaire_id;

											keystUniqRow_3.add(new_tUniqRow_3);
											if (row7 == null) {

												row7 = new row7Struct();
											}
											row7.beneficiaire_id = beneficiaire.beneficiaire_id;
											row7.beneficiaire_moral_booleen = beneficiaire.beneficiaire_moral_booleen;
											row7.beneficiaire_nom = beneficiaire.beneficiaire_nom;
											row7.beneficiaire_prenom = beneficiaire.beneficiaire_prenom;
											row7.beneficiaire_denomination_sociale = beneficiaire.beneficiaire_denomination_sociale;
											row7.beneficiaire_diplome = beneficiaire.beneficiaire_diplome;
											nb_uniques_tUniqRow_3++;
										} else {
											nb_duplicates_tUniqRow_3++;
										}

										tos_count_tUniqRow_3++;

										/**
										 * [tUniqRow_3 main ] stop
										 */

										/**
										 * [tUniqRow_3 process_data_begin ] start
										 */

										currentComponent = "tUniqRow_3";

										/**
										 * [tUniqRow_3 process_data_begin ] stop
										 */
// Start of branch "row7"
										if (row7 != null) {

											/**
											 * [tDBOutput_1 main ] start
											 */

											currentComponent = "tDBOutput_1";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
											}

											whetherReject_tDBOutput_1 = false;
											if (row7.beneficiaire_id == null) {
												pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(1, row7.beneficiaire_id);
											}

											pstmt_tDBOutput_1.setBoolean(2, row7.beneficiaire_moral_booleen);

											if (row7.beneficiaire_nom == null) {
												pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(3, row7.beneficiaire_nom);
											}

											if (row7.beneficiaire_prenom == null) {
												pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(4, row7.beneficiaire_prenom);
											}

											if (row7.beneficiaire_denomination_sociale == null) {
												pstmt_tDBOutput_1.setNull(5, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(5, row7.beneficiaire_denomination_sociale);
											}

											if (row7.beneficiaire_diplome == null) {
												pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(6, row7.beneficiaire_diplome);
											}

											pstmt_tDBOutput_1.addBatch();
											nb_line_tDBOutput_1++;

											batchSizeCounter_tDBOutput_1++;
											if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
												try {
													int countSum_tDBOutput_1 = 0;
													for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
														countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED
																? 0
																: 1);
													}
													insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_1 = 0;
													for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
														countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
																: countEach_tDBOutput_1);
													}
													insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
													System.err.println(e.getMessage());
												}

												batchSizeCounter_tDBOutput_1 = 0;
											}
											commitCounter_tDBOutput_1++;

											if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

												try {
													int countSum_tDBOutput_1 = 0;
													for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
														countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : 1);
													}
													insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
												} catch (java.sql.BatchUpdateException e) {
													int countSum_tDBOutput_1 = 0;
													for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
														countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
																: countEach_tDBOutput_1);
													}
													insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
													System.err.println(e.getMessage());

												}
												conn_tDBOutput_1.commit();
												commitCounter_tDBOutput_1 = 0;

											}

											tos_count_tDBOutput_1++;

											/**
											 * [tDBOutput_1 main ] stop
											 */

											/**
											 * [tDBOutput_1 process_data_begin ] start
											 */

											currentComponent = "tDBOutput_1";

											/**
											 * [tDBOutput_1 process_data_begin ] stop
											 */

											/**
											 * [tDBOutput_1 process_data_end ] start
											 */

											currentComponent = "tDBOutput_1";

											/**
											 * [tDBOutput_1 process_data_end ] stop
											 */

										} // End of branch "row7"

										/**
										 * [tUniqRow_3 process_data_end ] start
										 */

										currentComponent = "tUniqRow_3";

										/**
										 * [tUniqRow_3 process_data_end ] stop
										 */

									} // End of branch "beneficiaire"

									/**
									 * [tMap_1 process_data_end ] start
									 */

									currentComponent = "tMap_1";

									/**
									 * [tMap_1 process_data_end ] stop
									 */

								} // End of branch "row2"

// Start of branch "row3"
								if (row3 != null) {

									/**
									 * [tFileOutputDelimited_1 main ] start
									 */

									currentComponent = "tFileOutputDelimited_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
									}

									StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
									if (row3.benef_categorie_code != null) {
										sb_tFileOutputDelimited_1.append(row3.benef_categorie_code);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row3.benef_nom != null) {
										sb_tFileOutputDelimited_1.append(row3.benef_nom);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row3.benef_prenom != null) {
										sb_tFileOutputDelimited_1.append(row3.benef_prenom);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row3.benef_codepostal != null) {
										sb_tFileOutputDelimited_1.append(row3.benef_codepostal);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row3.benef_specialite_code != null) {
										sb_tFileOutputDelimited_1.append(row3.benef_specialite_code);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row3.benef_identifiant_valeur != null) {
										sb_tFileOutputDelimited_1.append(row3.benef_identifiant_valeur);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row3.benef_denomination_sociale != null) {
										sb_tFileOutputDelimited_1.append(row3.benef_denomination_sociale);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (row3.errorMessage != null) {
										sb_tFileOutputDelimited_1.append(row3.errorMessage);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

									nb_line_tFileOutputDelimited_1++;
									resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

									outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

									tos_count_tFileOutputDelimited_1++;

									/**
									 * [tFileOutputDelimited_1 main ] stop
									 */

									/**
									 * [tFileOutputDelimited_1 process_data_begin ] start
									 */

									currentComponent = "tFileOutputDelimited_1";

									/**
									 * [tFileOutputDelimited_1 process_data_begin ] stop
									 */

									/**
									 * [tFileOutputDelimited_1 process_data_end ] start
									 */

									currentComponent = "tFileOutputDelimited_1";

									/**
									 * [tFileOutputDelimited_1 process_data_end ] stop
									 */

								} // End of branch "row3"

								/**
								 * [tFilterRow_1 process_data_end ] start
								 */

								currentComponent = "tFilterRow_1";

								/**
								 * [tFilterRow_1 process_data_end ] stop
								 */

							} // End of branch "beneficiaire_conv"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("C:/BI/transparence-sante/data/min/conventions_top10000.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "beneficiaire_conv");
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tUniqRow_3 end ] start
				 */

				currentComponent = "tUniqRow_3";

				globalMap.put("tUniqRow_3_NB_UNIQUES", nb_uniques_tUniqRow_3);
				globalMap.put("tUniqRow_3_NB_DUPLICATES", nb_duplicates_tUniqRow_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "beneficiaire");
				}

				ok_Hash.put("tUniqRow_3", true);
				end_Hash.put("tUniqRow_3", System.currentTimeMillis());

				/**
				 * [tUniqRow_3 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (batchSizeCounter_tDBOutput_1 != 0) {
						int countSum_tDBOutput_1 = 0;

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_1 = 0;

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0) {

					conn_tDBOutput_1.commit();

				}

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row5");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tUniqRow_3 finally ] start
				 */

				currentComponent = "tUniqRow_3";

				/**
				 * [tUniqRow_3 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Type_d_identifiant_PP;

		public String getType_d_identifiant_PP() {
			return this.Type_d_identifiant_PP;
		}

		public String Identifiant_PP;

		public String getIdentifiant_PP() {
			return this.Identifiant_PP;
		}

		public String Identification_nationale_PP;

		public String getIdentification_nationale_PP() {
			return this.Identification_nationale_PP;
		}

		public String Nom_d_exercice;

		public String getNom_d_exercice() {
			return this.Nom_d_exercice;
		}

		public String Prenom_d_exercice;

		public String getPrenom_d_exercice() {
			return this.Prenom_d_exercice;
		}

		public String Code_type_diplome_obtenu;

		public String getCode_type_diplome_obtenu() {
			return this.Code_type_diplome_obtenu;
		}

		public String Libelle_type_diplome_obtenu;

		public String getLibelle_type_diplome_obtenu() {
			return this.Libelle_type_diplome_obtenu;
		}

		public String Code_diplome_obtenu;

		public String getCode_diplome_obtenu() {
			return this.Code_diplome_obtenu;
		}

		public String Libelle_diplome_obtenu;

		public String getLibelle_diplome_obtenu() {
			return this.Libelle_diplome_obtenu;
		}

		public String Code_type_autorisation;

		public String getCode_type_autorisation() {
			return this.Code_type_autorisation;
		}

		public String Libelle_type_autorisation;

		public String getLibelle_type_autorisation() {
			return this.Libelle_type_autorisation;
		}

		public String Code_discipline_autorisation;

		public String getCode_discipline_autorisation() {
			return this.Code_discipline_autorisation;
		}

		public String Libelle_discipline_autorisation;

		public String getLibelle_discipline_autorisation() {
			return this.Libelle_discipline_autorisation;
		}

		public String Column13;

		public String getColumn13() {
			return this.Column13;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.Code_diplome_obtenu == null) ? 0 : this.Code_diplome_obtenu.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.Code_diplome_obtenu == null) {
				if (other.Code_diplome_obtenu != null)
					return false;

			} else if (!this.Code_diplome_obtenu.equals(other.Code_diplome_obtenu))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.Type_d_identifiant_PP = this.Type_d_identifiant_PP;
			other.Identifiant_PP = this.Identifiant_PP;
			other.Identification_nationale_PP = this.Identification_nationale_PP;
			other.Nom_d_exercice = this.Nom_d_exercice;
			other.Prenom_d_exercice = this.Prenom_d_exercice;
			other.Code_type_diplome_obtenu = this.Code_type_diplome_obtenu;
			other.Libelle_type_diplome_obtenu = this.Libelle_type_diplome_obtenu;
			other.Code_diplome_obtenu = this.Code_diplome_obtenu;
			other.Libelle_diplome_obtenu = this.Libelle_diplome_obtenu;
			other.Code_type_autorisation = this.Code_type_autorisation;
			other.Libelle_type_autorisation = this.Libelle_type_autorisation;
			other.Code_discipline_autorisation = this.Code_discipline_autorisation;
			other.Libelle_discipline_autorisation = this.Libelle_discipline_autorisation;
			other.Column13 = this.Column13;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.Code_diplome_obtenu = this.Code_diplome_obtenu;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_beneficiaire_dim) {

				try {

					int length = 0;

					this.Code_diplome_obtenu = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Code_diplome_obtenu, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Type_d_identifiant_PP = readString(dis, ois);

				this.Identifiant_PP = readString(dis, ois);

				this.Identification_nationale_PP = readString(dis, ois);

				this.Nom_d_exercice = readString(dis, ois);

				this.Prenom_d_exercice = readString(dis, ois);

				this.Code_type_diplome_obtenu = readString(dis, ois);

				this.Libelle_type_diplome_obtenu = readString(dis, ois);

				this.Libelle_diplome_obtenu = readString(dis, ois);

				this.Code_type_autorisation = readString(dis, ois);

				this.Libelle_type_autorisation = readString(dis, ois);

				this.Code_discipline_autorisation = readString(dis, ois);

				this.Libelle_discipline_autorisation = readString(dis, ois);

				this.Column13 = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Type_d_identifiant_PP, dos, oos);

				writeString(this.Identifiant_PP, dos, oos);

				writeString(this.Identification_nationale_PP, dos, oos);

				writeString(this.Nom_d_exercice, dos, oos);

				writeString(this.Prenom_d_exercice, dos, oos);

				writeString(this.Code_type_diplome_obtenu, dos, oos);

				writeString(this.Libelle_type_diplome_obtenu, dos, oos);

				writeString(this.Libelle_diplome_obtenu, dos, oos);

				writeString(this.Code_type_autorisation, dos, oos);

				writeString(this.Libelle_type_autorisation, dos, oos);

				writeString(this.Code_discipline_autorisation, dos, oos);

				writeString(this.Libelle_discipline_autorisation, dos, oos);

				writeString(this.Column13, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Type_d_identifiant_PP=" + Type_d_identifiant_PP);
			sb.append(",Identifiant_PP=" + Identifiant_PP);
			sb.append(",Identification_nationale_PP=" + Identification_nationale_PP);
			sb.append(",Nom_d_exercice=" + Nom_d_exercice);
			sb.append(",Prenom_d_exercice=" + Prenom_d_exercice);
			sb.append(",Code_type_diplome_obtenu=" + Code_type_diplome_obtenu);
			sb.append(",Libelle_type_diplome_obtenu=" + Libelle_type_diplome_obtenu);
			sb.append(",Code_diplome_obtenu=" + Code_diplome_obtenu);
			sb.append(",Libelle_diplome_obtenu=" + Libelle_diplome_obtenu);
			sb.append(",Code_type_autorisation=" + Code_type_autorisation);
			sb.append(",Libelle_type_autorisation=" + Libelle_type_autorisation);
			sb.append(",Code_discipline_autorisation=" + Code_discipline_autorisation);
			sb.append(",Libelle_discipline_autorisation=" + Libelle_discipline_autorisation);
			sb.append(",Column13=" + Column13);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Code_diplome_obtenu, other.Code_diplome_obtenu);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[0];

		public String Type_d_identifiant_PP;

		public String getType_d_identifiant_PP() {
			return this.Type_d_identifiant_PP;
		}

		public String Identifiant_PP;

		public String getIdentifiant_PP() {
			return this.Identifiant_PP;
		}

		public String Identification_nationale_PP;

		public String getIdentification_nationale_PP() {
			return this.Identification_nationale_PP;
		}

		public String Nom_d_exercice;

		public String getNom_d_exercice() {
			return this.Nom_d_exercice;
		}

		public String Prenom_d_exercice;

		public String getPrenom_d_exercice() {
			return this.Prenom_d_exercice;
		}

		public String Code_type_diplome_obtenu;

		public String getCode_type_diplome_obtenu() {
			return this.Code_type_diplome_obtenu;
		}

		public String Libelle_type_diplome_obtenu;

		public String getLibelle_type_diplome_obtenu() {
			return this.Libelle_type_diplome_obtenu;
		}

		public String Code_diplome_obtenu;

		public String getCode_diplome_obtenu() {
			return this.Code_diplome_obtenu;
		}

		public String Libelle_diplome_obtenu;

		public String getLibelle_diplome_obtenu() {
			return this.Libelle_diplome_obtenu;
		}

		public String Code_type_autorisation;

		public String getCode_type_autorisation() {
			return this.Code_type_autorisation;
		}

		public String Libelle_type_autorisation;

		public String getLibelle_type_autorisation() {
			return this.Libelle_type_autorisation;
		}

		public String Code_discipline_autorisation;

		public String getCode_discipline_autorisation() {
			return this.Code_discipline_autorisation;
		}

		public String Libelle_discipline_autorisation;

		public String getLibelle_discipline_autorisation() {
			return this.Libelle_discipline_autorisation;
		}

		public String Column13;

		public String getColumn13() {
			return this.Column13;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_beneficiaire_dim) {

				try {

					int length = 0;

					this.Type_d_identifiant_PP = readString(dis);

					this.Identifiant_PP = readString(dis);

					this.Identification_nationale_PP = readString(dis);

					this.Nom_d_exercice = readString(dis);

					this.Prenom_d_exercice = readString(dis);

					this.Code_type_diplome_obtenu = readString(dis);

					this.Libelle_type_diplome_obtenu = readString(dis);

					this.Code_diplome_obtenu = readString(dis);

					this.Libelle_diplome_obtenu = readString(dis);

					this.Code_type_autorisation = readString(dis);

					this.Libelle_type_autorisation = readString(dis);

					this.Code_discipline_autorisation = readString(dis);

					this.Libelle_discipline_autorisation = readString(dis);

					this.Column13 = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Type_d_identifiant_PP, dos);

				// String

				writeString(this.Identifiant_PP, dos);

				// String

				writeString(this.Identification_nationale_PP, dos);

				// String

				writeString(this.Nom_d_exercice, dos);

				// String

				writeString(this.Prenom_d_exercice, dos);

				// String

				writeString(this.Code_type_diplome_obtenu, dos);

				// String

				writeString(this.Libelle_type_diplome_obtenu, dos);

				// String

				writeString(this.Code_diplome_obtenu, dos);

				// String

				writeString(this.Libelle_diplome_obtenu, dos);

				// String

				writeString(this.Code_type_autorisation, dos);

				// String

				writeString(this.Libelle_type_autorisation, dos);

				// String

				writeString(this.Code_discipline_autorisation, dos);

				// String

				writeString(this.Libelle_discipline_autorisation, dos);

				// String

				writeString(this.Column13, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Type_d_identifiant_PP=" + Type_d_identifiant_PP);
			sb.append(",Identifiant_PP=" + Identifiant_PP);
			sb.append(",Identification_nationale_PP=" + Identification_nationale_PP);
			sb.append(",Nom_d_exercice=" + Nom_d_exercice);
			sb.append(",Prenom_d_exercice=" + Prenom_d_exercice);
			sb.append(",Code_type_diplome_obtenu=" + Code_type_diplome_obtenu);
			sb.append(",Libelle_type_diplome_obtenu=" + Libelle_type_diplome_obtenu);
			sb.append(",Code_diplome_obtenu=" + Code_diplome_obtenu);
			sb.append(",Libelle_diplome_obtenu=" + Libelle_diplome_obtenu);
			sb.append(",Code_type_autorisation=" + Code_type_autorisation);
			sb.append(",Libelle_type_autorisation=" + Libelle_type_autorisation);
			sb.append(",Code_discipline_autorisation=" + Code_discipline_autorisation);
			sb.append(",Libelle_discipline_autorisation=" + Libelle_discipline_autorisation);
			sb.append(",Column13=" + Column13);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[0];
		static byte[] commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[0];

		public String Type_d_identifiant_PP;

		public String getType_d_identifiant_PP() {
			return this.Type_d_identifiant_PP;
		}

		public String Identifiant_PP;

		public String getIdentifiant_PP() {
			return this.Identifiant_PP;
		}

		public String Identification_nationale_PP;

		public String getIdentification_nationale_PP() {
			return this.Identification_nationale_PP;
		}

		public String Nom_d_exercice;

		public String getNom_d_exercice() {
			return this.Nom_d_exercice;
		}

		public String Prenom_d_exercice;

		public String getPrenom_d_exercice() {
			return this.Prenom_d_exercice;
		}

		public String Code_type_diplome_obtenu;

		public String getCode_type_diplome_obtenu() {
			return this.Code_type_diplome_obtenu;
		}

		public String Libelle_type_diplome_obtenu;

		public String getLibelle_type_diplome_obtenu() {
			return this.Libelle_type_diplome_obtenu;
		}

		public String Code_diplome_obtenu;

		public String getCode_diplome_obtenu() {
			return this.Code_diplome_obtenu;
		}

		public String Libelle_diplome_obtenu;

		public String getLibelle_diplome_obtenu() {
			return this.Libelle_diplome_obtenu;
		}

		public String Code_type_autorisation;

		public String getCode_type_autorisation() {
			return this.Code_type_autorisation;
		}

		public String Libelle_type_autorisation;

		public String getLibelle_type_autorisation() {
			return this.Libelle_type_autorisation;
		}

		public String Code_discipline_autorisation;

		public String getCode_discipline_autorisation() {
			return this.Code_discipline_autorisation;
		}

		public String Libelle_discipline_autorisation;

		public String getLibelle_discipline_autorisation() {
			return this.Libelle_discipline_autorisation;
		}

		public String Column13;

		public String getColumn13() {
			return this.Column13;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim.length) {
					if (length < 1024 && commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim.length == 0) {
						commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[1024];
					} else {
						commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim, 0, length);
				strReturn = new String(commonByteArray_TRANSPARENCE_SANTE_BI_beneficiaire_dim, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TRANSPARENCE_SANTE_BI_beneficiaire_dim) {

				try {

					int length = 0;

					this.Type_d_identifiant_PP = readString(dis);

					this.Identifiant_PP = readString(dis);

					this.Identification_nationale_PP = readString(dis);

					this.Nom_d_exercice = readString(dis);

					this.Prenom_d_exercice = readString(dis);

					this.Code_type_diplome_obtenu = readString(dis);

					this.Libelle_type_diplome_obtenu = readString(dis);

					this.Code_diplome_obtenu = readString(dis);

					this.Libelle_diplome_obtenu = readString(dis);

					this.Code_type_autorisation = readString(dis);

					this.Libelle_type_autorisation = readString(dis);

					this.Code_discipline_autorisation = readString(dis);

					this.Libelle_discipline_autorisation = readString(dis);

					this.Column13 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Type_d_identifiant_PP, dos);

				// String

				writeString(this.Identifiant_PP, dos);

				// String

				writeString(this.Identification_nationale_PP, dos);

				// String

				writeString(this.Nom_d_exercice, dos);

				// String

				writeString(this.Prenom_d_exercice, dos);

				// String

				writeString(this.Code_type_diplome_obtenu, dos);

				// String

				writeString(this.Libelle_type_diplome_obtenu, dos);

				// String

				writeString(this.Code_diplome_obtenu, dos);

				// String

				writeString(this.Libelle_diplome_obtenu, dos);

				// String

				writeString(this.Code_type_autorisation, dos);

				// String

				writeString(this.Libelle_type_autorisation, dos);

				// String

				writeString(this.Code_discipline_autorisation, dos);

				// String

				writeString(this.Libelle_discipline_autorisation, dos);

				// String

				writeString(this.Column13, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Type_d_identifiant_PP=" + Type_d_identifiant_PP);
			sb.append(",Identifiant_PP=" + Identifiant_PP);
			sb.append(",Identification_nationale_PP=" + Identification_nationale_PP);
			sb.append(",Nom_d_exercice=" + Nom_d_exercice);
			sb.append(",Prenom_d_exercice=" + Prenom_d_exercice);
			sb.append(",Code_type_diplome_obtenu=" + Code_type_diplome_obtenu);
			sb.append(",Libelle_type_diplome_obtenu=" + Libelle_type_diplome_obtenu);
			sb.append(",Code_diplome_obtenu=" + Code_diplome_obtenu);
			sb.append(",Libelle_diplome_obtenu=" + Libelle_diplome_obtenu);
			sb.append(",Code_type_autorisation=" + Code_type_autorisation);
			sb.append(",Libelle_type_autorisation=" + Libelle_type_autorisation);
			sb.append(",Code_discipline_autorisation=" + Code_discipline_autorisation);
			sb.append(",Libelle_discipline_autorisation=" + Libelle_discipline_autorisation);
			sb.append(",Column13=" + Column13);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				row6Struct row6 = new row6Struct();
				row5Struct row5 = new row5Struct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						"C:/BI/transparence-sante/data/rejects/rpps_diplomes.csv")).getAbsolutePath().replace("\\",
								"/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
							fileName_tFileOutputDelimited_2.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
																		 * Start field
																		 * tFileOutputDelimited_2:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tFilterRow_2 - inputs:(row4) outputs:(row5,row6,row5) | target
				// node:tAdvancedHash_row5 - inputs:(row5) outputs:()
				// linked node: tMap_1 - inputs:(row2,row5) outputs:(beneficiaire)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct>getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tFilterRow_2 = 0;

				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) "|").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) "|").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /** Start field tFileInputDelimited_2:FILENAME */
						"C:/BI/transparence-sante/data/others/rpps_diplomes.csv"/**
																				 * End field
																				 * tFileInputDelimited_2:FILENAME
																				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0], "UTF-8");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(new java.io.InputStreamReader(
											new java.io.FileInputStream(String.valueOf(filename_tFileInputDelimited_2)),
											"UTF-8")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd("" + rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('"');

						csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_2.readNext()) {

								totalLinetFileInputDelimited_2++;

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
											: totalLinetFileInputDelimited_2 - footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2
										? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0], "UTF-8");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2.setLineEnd("" + rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('"');

							csvReadertFileInputDelimited_2.setEscapeChar(csvReadertFileInputDelimited_2.getQuoteChar());

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 1; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_2 != 0 && csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {
						rowstate_tFileInputDelimited_2.reset();

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2.getValues();

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						row4 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row4 = new row4Struct();
						try {

							char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) "|").length() > 0) {
								fieldSeparator_tFileInputDelimited_2_ListType = ((String) "|").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row4.Type_d_identifiant_PP = null;

								row4.Identifiant_PP = null;

								row4.Identification_nationale_PP = null;

								row4.Nom_d_exercice = null;

								row4.Prenom_d_exercice = null;

								row4.Code_type_diplome_obtenu = null;

								row4.Libelle_type_diplome_obtenu = null;

								row4.Code_diplome_obtenu = null;

								row4.Libelle_diplome_obtenu = null;

								row4.Code_type_autorisation = null;

								row4.Libelle_type_autorisation = null;

								row4.Code_discipline_autorisation = null;

								row4.Libelle_discipline_autorisation = null;

								row4.Column13 = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.Type_d_identifiant_PP = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.Type_d_identifiant_PP = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.Identifiant_PP = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.Identifiant_PP = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 2;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.Identification_nationale_PP = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.Identification_nationale_PP = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 3;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.Nom_d_exercice = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.Nom_d_exercice = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 4;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.Prenom_d_exercice = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.Prenom_d_exercice = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 5;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.Code_type_diplome_obtenu = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.Code_type_diplome_obtenu = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 6;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.Libelle_type_diplome_obtenu = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.Libelle_type_diplome_obtenu = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 7;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.Code_diplome_obtenu = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.Code_diplome_obtenu = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 8;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.Libelle_diplome_obtenu = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.Libelle_diplome_obtenu = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 9;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.Code_type_autorisation = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.Code_type_autorisation = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 10;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.Libelle_type_autorisation = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.Libelle_type_autorisation = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 11;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.Code_discipline_autorisation = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.Code_discipline_autorisation = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 12;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.Libelle_discipline_autorisation = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.Libelle_discipline_autorisation = null;

								}

								columnIndexWithD_tFileInputDelimited_2 = 13;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row4.Column13 = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {

									row4.Column13 = null;

								}

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row4 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tFilterRow_2 main ] start
							 */

							currentComponent = "tFilterRow_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
							}

							row5 = null;
							row6 = null;
							row5 = null;
							Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
							ope_tFilterRow_2.matches(
									(row4.Libelle_diplome_obtenu == null ? false
											: row4.Libelle_diplome_obtenu.length() > 0),
									" Libelle_diplome_obtenu.length() > 0 failed");
							ope_tFilterRow_2.matches((// code sample : use row4 to define the condition.
// row4.columnName1.equals("foo") ||!(row4.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
							row4.Code_diplome_obtenu != null && row4.Libelle_diplome_obtenu != null),
									"advanced condition failed");

							if (ope_tFilterRow_2.getMatchFlag()) {
								if (row5 == null) {
									row5 = new row5Struct();
								}
								row5.Type_d_identifiant_PP = row4.Type_d_identifiant_PP;
								row5.Identifiant_PP = row4.Identifiant_PP;
								row5.Identification_nationale_PP = row4.Identification_nationale_PP;
								row5.Nom_d_exercice = row4.Nom_d_exercice;
								row5.Prenom_d_exercice = row4.Prenom_d_exercice;
								row5.Code_type_diplome_obtenu = row4.Code_type_diplome_obtenu;
								row5.Libelle_type_diplome_obtenu = row4.Libelle_type_diplome_obtenu;
								row5.Code_diplome_obtenu = row4.Code_diplome_obtenu;
								row5.Libelle_diplome_obtenu = row4.Libelle_diplome_obtenu;
								row5.Code_type_autorisation = row4.Code_type_autorisation;
								row5.Libelle_type_autorisation = row4.Libelle_type_autorisation;
								row5.Code_discipline_autorisation = row4.Code_discipline_autorisation;
								row5.Libelle_discipline_autorisation = row4.Libelle_discipline_autorisation;
								row5.Column13 = row4.Column13;
								if (row5 == null) {
									row5 = new row5Struct();
								}
								row5.Type_d_identifiant_PP = row4.Type_d_identifiant_PP;
								row5.Identifiant_PP = row4.Identifiant_PP;
								row5.Identification_nationale_PP = row4.Identification_nationale_PP;
								row5.Nom_d_exercice = row4.Nom_d_exercice;
								row5.Prenom_d_exercice = row4.Prenom_d_exercice;
								row5.Code_type_diplome_obtenu = row4.Code_type_diplome_obtenu;
								row5.Libelle_type_diplome_obtenu = row4.Libelle_type_diplome_obtenu;
								row5.Code_diplome_obtenu = row4.Code_diplome_obtenu;
								row5.Libelle_diplome_obtenu = row4.Libelle_diplome_obtenu;
								row5.Code_type_autorisation = row4.Code_type_autorisation;
								row5.Libelle_type_autorisation = row4.Libelle_type_autorisation;
								row5.Code_discipline_autorisation = row4.Code_discipline_autorisation;
								row5.Libelle_discipline_autorisation = row4.Libelle_discipline_autorisation;
								row5.Column13 = row4.Column13;
								nb_line_ok_tFilterRow_2++;
							} else {
								if (row6 == null) {
									row6 = new row6Struct();
								}
								row6.Type_d_identifiant_PP = row4.Type_d_identifiant_PP;
								row6.Identifiant_PP = row4.Identifiant_PP;
								row6.Identification_nationale_PP = row4.Identification_nationale_PP;
								row6.Nom_d_exercice = row4.Nom_d_exercice;
								row6.Prenom_d_exercice = row4.Prenom_d_exercice;
								row6.Code_type_diplome_obtenu = row4.Code_type_diplome_obtenu;
								row6.Libelle_type_diplome_obtenu = row4.Libelle_type_diplome_obtenu;
								row6.Code_diplome_obtenu = row4.Code_diplome_obtenu;
								row6.Libelle_diplome_obtenu = row4.Libelle_diplome_obtenu;
								row6.Code_type_autorisation = row4.Code_type_autorisation;
								row6.Libelle_type_autorisation = row4.Libelle_type_autorisation;
								row6.Code_discipline_autorisation = row4.Code_discipline_autorisation;
								row6.Libelle_discipline_autorisation = row4.Libelle_discipline_autorisation;
								row6.Column13 = row4.Column13;
								row6.errorMessage = ope_tFilterRow_2.getErrorMsg();
								nb_line_reject_tFilterRow_2++;
							}

							nb_line_tFilterRow_2++;

							tos_count_tFilterRow_2++;

							/**
							 * [tFilterRow_2 main ] stop
							 */

							/**
							 * [tFilterRow_2 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_2";

							/**
							 * [tFilterRow_2 process_data_begin ] stop
							 */
// Start of branch "row6"
							if (row6 != null) {

								/**
								 * [tFileOutputDelimited_2 main ] start
								 */

								currentComponent = "tFileOutputDelimited_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
								}

								StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
								if (row6.Type_d_identifiant_PP != null) {
									sb_tFileOutputDelimited_2.append(row6.Type_d_identifiant_PP);
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row6.Identifiant_PP != null) {
									sb_tFileOutputDelimited_2.append(row6.Identifiant_PP);
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row6.Identification_nationale_PP != null) {
									sb_tFileOutputDelimited_2.append(row6.Identification_nationale_PP);
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row6.Nom_d_exercice != null) {
									sb_tFileOutputDelimited_2.append(row6.Nom_d_exercice);
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row6.Prenom_d_exercice != null) {
									sb_tFileOutputDelimited_2.append(row6.Prenom_d_exercice);
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row6.Code_type_diplome_obtenu != null) {
									sb_tFileOutputDelimited_2.append(row6.Code_type_diplome_obtenu);
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row6.Libelle_type_diplome_obtenu != null) {
									sb_tFileOutputDelimited_2.append(row6.Libelle_type_diplome_obtenu);
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row6.Code_diplome_obtenu != null) {
									sb_tFileOutputDelimited_2.append(row6.Code_diplome_obtenu);
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row6.Libelle_diplome_obtenu != null) {
									sb_tFileOutputDelimited_2.append(row6.Libelle_diplome_obtenu);
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row6.Code_type_autorisation != null) {
									sb_tFileOutputDelimited_2.append(row6.Code_type_autorisation);
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row6.Libelle_type_autorisation != null) {
									sb_tFileOutputDelimited_2.append(row6.Libelle_type_autorisation);
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row6.Code_discipline_autorisation != null) {
									sb_tFileOutputDelimited_2.append(row6.Code_discipline_autorisation);
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row6.Libelle_discipline_autorisation != null) {
									sb_tFileOutputDelimited_2.append(row6.Libelle_discipline_autorisation);
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row6.Column13 != null) {
									sb_tFileOutputDelimited_2.append(row6.Column13);
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row6.errorMessage != null) {
									sb_tFileOutputDelimited_2.append(row6.errorMessage);
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

								nb_line_tFileOutputDelimited_2++;
								resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

								outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

								tos_count_tFileOutputDelimited_2++;

								/**
								 * [tFileOutputDelimited_2 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_2 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_2";

								/**
								 * [tFileOutputDelimited_2 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_2 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_2";

								/**
								 * [tFileOutputDelimited_2 process_data_end ] stop
								 */

							} // End of branch "row6"

// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tAdvancedHash_row5 main ] start
								 */

								currentComponent = "tAdvancedHash_row5";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
								}

								row5Struct row5_HashRow = new row5Struct();

								row5_HashRow.Type_d_identifiant_PP = row5.Type_d_identifiant_PP;

								row5_HashRow.Identifiant_PP = row5.Identifiant_PP;

								row5_HashRow.Identification_nationale_PP = row5.Identification_nationale_PP;

								row5_HashRow.Nom_d_exercice = row5.Nom_d_exercice;

								row5_HashRow.Prenom_d_exercice = row5.Prenom_d_exercice;

								row5_HashRow.Code_type_diplome_obtenu = row5.Code_type_diplome_obtenu;

								row5_HashRow.Libelle_type_diplome_obtenu = row5.Libelle_type_diplome_obtenu;

								row5_HashRow.Code_diplome_obtenu = row5.Code_diplome_obtenu;

								row5_HashRow.Libelle_diplome_obtenu = row5.Libelle_diplome_obtenu;

								row5_HashRow.Code_type_autorisation = row5.Code_type_autorisation;

								row5_HashRow.Libelle_type_autorisation = row5.Libelle_type_autorisation;

								row5_HashRow.Code_discipline_autorisation = row5.Code_discipline_autorisation;

								row5_HashRow.Libelle_discipline_autorisation = row5.Libelle_discipline_autorisation;

								row5_HashRow.Column13 = row5.Column13;

								tHash_Lookup_row5.put(row5_HashRow);

								tos_count_tAdvancedHash_row5++;

								/**
								 * [tAdvancedHash_row5 main ] stop
								 */

								/**
								 * [tAdvancedHash_row5 process_data_begin ] start
								 */

								currentComponent = "tAdvancedHash_row5";

								/**
								 * [tAdvancedHash_row5 process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_row5 process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_row5";

								/**
								 * [tAdvancedHash_row5 process_data_end ] stop
								 */

							} // End of branch "row5"

							/**
							 * [tFilterRow_2 process_data_end ] start
							 */

							currentComponent = "tFilterRow_2";

							/**
							 * [tFilterRow_2 process_data_end ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", nb_line_tFileInputDelimited_2);
					}

				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE", nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final beneficiaire_dim beneficiaire_dimClass = new beneficiaire_dim();

		int exitCode = beneficiaire_dimClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = beneficiaire_dim.class.getClassLoader().getResourceAsStream(
					"transparence_sante_bi/beneficiaire_dim_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = beneficiaire_dim.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : beneficiaire_dim");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 210872 characters generated by Talend Open Studio for Data Integration on the
 * 23 janvier 2021 12:42:43 CET
 ************************************************************************************************/